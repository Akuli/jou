if WINDOWS:
    @public
    const RAND_MAX: int = 0x7fff
else:
    # MacOS, Linux, NetBSD
    @public
    const RAND_MAX: int = 0x7fff_ffff

# Returns a random value between 0 and RAND_MAX inclusive.
#
# By default, the same values are returned every time the program runs.
#
# The random values are not cryptographically secure. This means that someone
# may be able to guess what the next random value is if they know something
# about previous random values. For most use cases, this doesn't matter.
@public
declare rand() -> int

# The `rand()` function produces a sequence of numbers that depend on a number
# known as the seed. This function sets that seed.
#
# For example, you can use `srand(1)` to reset the state so that you get the same
# random values as when the program started, or `srand(1234)` to get a different
# sequence.
#
# A common (and often good enough) trick is to use the current time as the seed:
#
#   import "stdlib/rand.jou"
#   import "stdlib/time.jou"
#
#   def main() -> int:
#       ...
#       srand(time(NULL) as uint32)
#       ...
#
# Note that this will produce the same rand() values if the program is started
# several times during the same second.
@public
declare srand(seed: uint32) -> None
