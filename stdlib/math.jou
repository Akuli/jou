# Math lib
# Some math functions

# Choose bigger/smaller
def min(a: int, b: int) -> int:
    if a < b:
        return a
    else:
        return b
def max(a: int, b: int) -> int:
    if a > b:
        return a
    else:
        return b

def fmin(a: double, b: double) -> double:
    if a < b:
        return a
    else:
        return b
def fmax(a: double, b: double) -> double:
    if a > b:
        return a
    else:
        return b

def llmin(a: long, b: long) -> long:
    if a < b:
        return a
    else:
        return b
def llmax(a: long, b: long) -> long:
    if a > b:
        return a
    else:
        return b

# Returns the absolute value of x: |x|.
declare abs(x: int) -> int
declare fabs(x: double) -> double
declare llabs(x: long) -> long

# Rounding and remainder functions
# Rounds x upward, returning the smallest integral value that is not less than x.
declare ceil(x: double) -> double
# Rounds x downward, returning the largest integral value that is not greater than x.
declare floor(x: double) -> double
# Returns the integral value that is nearest to x, with halfway cases rounded away from zero.
declare round(x: double) -> double

# Trigonometric functions
# These functions use radians as the angle unit.
# One radian is the angle of a circle slice with equal radius and arc length, about 57 degrees.
# A full turn (360 degrees) is 2pi (about 6.28) radians.
declare cos(x: double) -> double
declare sin(x: double) -> double
declare tan(x: double) -> double
# The 'a' prefixed functions are inverse functions.
# For example, asin is also known as arcsin and sin^-1.
declare acos(x: double) -> double
declare asin(x: double) -> double
declare atan(x: double) -> double
# Returns the angle of a point (x, y). Note the reversed order of the arguments.
declare atan2(y: double, x: double) -> double

# Use nan("") to get a quiet NaN (Not-A-Number) value.
# The argument must be an empty string.
declare nan(tagp: byte*) -> double

# Hyperbolic versions of the trig functions
declare cosh(x: double) -> double
declare sinh(x: double) -> double
declare tanh(x: double) -> double
declare acosh(x: double) -> double
declare asinh(x: double) -> double
declare atanh(x: double) -> double

# Exponential and logarithmic functions
# returns e^x
declare exp(x: double) -> double
# returns 2^x
declare exp2(x: double) -> double
# Returns the natural logarithm of x.
declare log(x: double) -> double
declare log2(x: double) -> double
declare log10(x: double) -> double

# Power functions
# Raise to power.
declare pow(x: double, y: double) -> double
# Returns the square root of x.
declare sqrt(x: double) -> double
# Returns the cubic root of x.
declare cbrt(x: double) -> double
# Returns the hypotenuse of a right-angled triangle whose legs are x and y.
declare hypot(x: double, y: double) -> double

# Error and gamma functions
# Returns the error function value for x
declare erf(x: double) -> double
# Returns the complementary error function value for x.
declare erfc(x: double) -> double
# Returns the gamma function of x.
declare tgamma(x: double) -> double
# Returns the natural logarithm of the absolute value of the gamma.
declare lgamma(x: double) -> double
