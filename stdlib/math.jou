# Defines the math functions in math.h

# Choose bigger/smaller
@public
def min(a: int, b: int) -> int:
    if a < b:
        return a
    else:
        return b

@public
def max(a: int, b: int) -> int:
    if a > b:
        return a
    else:
        return b

@public
declare fmin(a: double, b: double) -> double
@public
declare fminf(a: float, b: float) -> float
@public
declare fmax(a: double, b: double) -> double
@public
declare fmaxf(a: float, b: float) -> float

@public
def llmin(a: long, b: long) -> long:
    if a < b:
        return a
    else:
        return b

@public
def llmax(a: long, b: long) -> long:
    if a > b:
        return a
    else:
        return b

# Returns the absolute value of x: |x|.
@public
declare abs(x: int) -> int
@public
declare fabs(x: double) -> double
@public
declare fabsf(x: float) -> float
@public
declare llabs(x: long) -> long

# Rounding and remainder functions

# Rounds x upward, returning the smallest integral value that is not less than x.
@public
declare ceil(x: double) -> double
@public
declare ceilf(x: float) -> float
# Rounds x downward, returning the largest integral value that is not greater than x.
@public
declare floor(x: double) -> double
@public
declare floorf(x: float) -> float
# Returns the integral value that is nearest to x, with halfway cases rounded away from zero.
@public
declare round(x: double) -> double
@public
declare roundf(x: float) -> float

# Trigonometric functions

# These functions use radians as the angle unit.
# One radian is the angle of a circle slice with equal radius and arc length, about 57 degrees.
# A full turn (360 degrees) is 2pi (about 6.28) radians.
@public
declare cos(x: double) -> double
@public
declare cosf(x: float) -> float
@public
declare sin(x: double) -> double
@public
declare sinf(x: float) -> float
@public
declare tan(x: double) -> double
@public
declare tanf(x: float) -> float
# The 'a' prefixed functions are inverse functions.
# For example, asin is also known as arcsin and sin^-1.
@public
declare acos(x: double) -> double
@public
declare acosf(x: float) -> float
@public
declare asin(x: double) -> double
@public
declare asinf(x: float) -> float
@public
declare atan(x: double) -> double
@public
declare atanf(x: float) -> float
# Returns the angle of a point (x, y).
# Note the reversed order of the arguments.
@public
declare atan2(y: double, x: double) -> double
@public
declare atan2f(y: float, x: float) -> float

# Use nan("") to get a quiet NaN (Not-A-Number) value.
# The argument must be an empty string.
@public
declare nan(tagp: byte*) -> double

# Hyperbolic versions of the trig functions
@public
declare cosh(x: double) -> double
@public
declare coshf(x: float) -> float
@public
declare sinh(x: double) -> double
@public
declare sinhf(x: float) -> float
@public
declare tanh(x: double) -> double
@public
declare tanhf(x: float) -> float
@public
declare acosh(x: double) -> double
@public
declare acoshf(x: float) -> float
@public
declare asinh(x: double) -> double
@public
declare asinhf(x: float) -> float
@public
declare atanh(x: double) -> double
@public
declare atanhf(x: float) -> float

# Exponential and logarithmic functions

# Computes e^x.
@public
declare exp(x: double) -> double
@public
declare expf(x: float) -> float

# Computes 2^x.
@public
declare exp2(x: double) -> double
@public
declare exp2f(x: float) -> float

# Computes 10^x.
@public
declare exp10(x: double) -> double
@public
declare exp10f(x: float) -> float

# Returns the natural (base e) logarithm of x.
@public
declare log(x: double) -> double
@public
declare logf(x: float) -> float

# Returns the base 2 logarithm of x.
@public
declare log2(x: double) -> double
@public
declare log2f(x: float) -> float

# Returns the base 10 logarithm of x.
@public
declare log10(x: double) -> double
@public
declare log10f(x: float) -> float

# Power functions

# Raise to power.
@public
declare pow(x: double, y: double) -> double
@public
declare powf(x: float, y: float) -> float
# Returns the square root of x.
@public
declare sqrt(x: double) -> double
@public
declare sqrtf(x: float) -> float
# Returns the cubic root of x.
@public
declare cbrt(x: double) -> double
@public
declare cbrtf(x: float) -> float
# Returns the hypotenuse of a right-angled triangle whose legs are x and y.
@public
declare hypot(x: double, y: double) -> double
@public
declare hypotf(x: float, y: float) -> float

# Error and gamma functions

# Returns the error function value for x.
@public
declare erf(x: double) -> double
@public
declare erff(x: float) -> float
# Returns the complementary error function value for x.
@public
declare erfc(x: double) -> double
@public
declare erfcf(x: float) -> float
# Returns the gamma function of x.
@public
declare tgamma(x: double) -> double
@public
declare tgammaf(x: float) -> float
# Returns the natural logarithm of the absolute value of the gamma.
@public
declare lgamma(x: double) -> double
@public
declare lgammaf(x: float) -> float
