# Functions for working with strings (byte* pointers).

# Parsing. See also scanf() in io.jou.
declare sscanf(s: byte*, pattern: byte*, ...) -> int  # Parse a string. See sscanf() in io.jou.

# Formatting. See also printf() in io.jou.
#   sprintf() assumes that the result fits in dest (UB happens, if it overflows)
#   snprintf() truncates the string so that the string and its '\0' fit into a total of n bytes of space
declare sprintf(dest: byte*, pattern: byte*, ...) -> int
declare snprintf(dest: byte*, n: long, pattern: byte*, ...) -> int

# Find a substring. Return a pointer to the occurrence in haystack, or NULL if not found.
declare strstr(haystack: byte*, needle: byte*) -> byte*

# Similar to strstr(), but searches for a single byte rather than a substring.
declare strchr(haystack: byte*, needle: byte) -> byte*

# Calculate the length of a string in bytes. Note that strlen("รถ") == 2, for example.
declare strlen(s: byte*) -> long

# Compare the strings. Return 0 for equal, or nonzero for not equal.
declare strcmp(s1: byte*, s2: byte*) -> int
