# A list is basically an array that grows dynamically.
#
# See doc/lists.md for documentation.

import "stdlib/mem.jou"


@public
class List[T]:
    ptr: T*         # Pointer to first item of the list (may change when list grows)
    len: int64       # How many items are in the list
    alloc: int64     # How many items would fit into the allocated memory

    # Ensure that the list has room for at least the given number of elements.
    # Newly allocated space at the end of list will contain uninitialized/garbage values.
    @inline
    def grow(self, n: int64) -> None:
        if self.alloc >= n:
            # Already big enough
            return

        # Allocate more than enough space, so that the next grow() is likely
        # going to be a fast "yes we have enough room" check.
        if self.alloc == 0:
            self.alloc = 4
        while self.alloc < n:
            self.alloc *= 2

        self.ptr = realloc(self.ptr, self.alloc * sizeof(self.ptr[0]))
        assert self.ptr != NULL  # If this fails, we ran out of memory

    # Add item to end of the list.
    @inline
    def append(self, item: T) -> None:
        self.grow(self.len + 1)
        self.ptr[self.len++] = item

    # Append n items to the list, starting at the given pointer.
    # For example, with n=3, this appends ptr[0], ptr[1] and ptr[2].
    @inline
    def extend_from_ptr(self, ptr: T*, n: int64) -> None:
        self.grow(self.len + n)
        memcpy(self.end(), ptr, n * sizeof(ptr[0]))
        self.len += n

    # Append all items in the given list.
    @inline
    def extend(self, other: List[T]) -> None:
        self.extend_from_ptr(other.ptr, other.len)

    # Return a pointer just beyond the last element of the list.
    # Use list.end()[-1] to get the last element.
    @inline
    def end(self) -> T*:
        return &self.ptr[self.len]

    # Remove the last item from the list and return it.
    #
    # In reality, the item remains in the memory used by the list, and only the
    # length of the list changes.
    @inline
    def pop(self) -> T:
        assert self.len > 0  # If this fails, you are trying to pop from an empty list
        return self.ptr[--self.len]
