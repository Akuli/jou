# A call to the _jou_windows_startup() function is inserted to the
# start of every Jou program when compiling for Windows.
#
# On Windows, the C "global variables" stdin, stdout and stderr are
# actually macros:
#
#    $ printf "#include <stdio.h>\nstdin\nstdout\nstderr\n" | x86_64-w64-mingw32-cpp | tail -3
#    (__acrt_iob_func(0))
#    (__acrt_iob_func(1))
#    (__acrt_iob_func(2))
#
# For simplicity, Jou redefines them as variables with the same
# names and assigns the correct values to them.
#
# There seems to be a similar situation on most other platforms.
#
# We can't import FILE from io.jou here, because then we would be
# trying to define a variable that already exists.
if WINDOWS or MACOS or NETBSD:
    global stdin: void*
    global stdout: void*
    global stderr: void*

if WINDOWS:
    declare __acrt_iob_func(index: int) -> void*

    def _jou_startup() -> None:
        stdin = __acrt_iob_func(0)
        stdout = __acrt_iob_func(1)
        stderr = __acrt_iob_func(2)

if MACOS:
    declare global __stdinp: void*
    declare global __stdoutp: void*
    declare global __stderrp: void*

    def _jou_startup() -> None:
        stdin = __stdinp
        stdout = __stdoutp
        stderr = __stderrp

if NETBSD:
    declare global __sF: byte[152][3] # sizeof(FILE) == 152

    def _jou_startup() -> None:
        stdin = &__sF[0]
        stdout = &__sF[1]
        stderr = &__sF[2]
