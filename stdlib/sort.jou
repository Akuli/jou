# This file lets you sort an array of values.
#
# See doc/sort.md for documentation.

import "stdlib/str.jou"

declare qsort(
    base: void*,
    nmemb: int64,
    size: int64,
    compare: funcptr(void*, void*) -> int,
) -> None


# The "advanced" way to sort elements. You provide the data to sort and a
# comparator function.
#
# The comparator takes two pointers to values in the array and returns an
# integer. The return value should be:
#
#   negative    if first < second
#   0           if first == second
#   positive    if first > second
@public
class Sorter[T]:
    @inline
    def sort(self: Sorter[T], ptr: T*, len: int64, compare: funcptr(T*, T*) -> int) -> None:
        qsort(ptr, len, sizeof(ptr[0]), compare as funcptr(void*, void*) -> int)


def compare_int8(a: int8*, b: int8*) -> int:
    return ((*a > *b) as int) - ((*a < *b) as int)
def compare_int16(a: int16*, b: int16*) -> int:
    return ((*a > *b) as int) - ((*a < *b) as int)
def compare_int32(a: int32*, b: int32*) -> int:
    return ((*a > *b) as int) - ((*a < *b) as int)
def compare_int64(a: int64*, b: int64*) -> int:
    return ((*a > *b) as int) - ((*a < *b) as int)

def compare_uint8(a: uint8*, b: uint8*) -> int:
    return ((*a > *b) as int) - ((*a < *b) as int)
def compare_uint16(a: uint16*, b: uint16*) -> int:
    return ((*a > *b) as int) - ((*a < *b) as int)
def compare_uint32(a: uint32*, b: uint32*) -> int:
    return ((*a > *b) as int) - ((*a < *b) as int)
def compare_uint64(a: uint64*, b: uint64*) -> int:
    return ((*a > *b) as int) - ((*a < *b) as int)

def compare_strings(a: byte**, b: byte**) -> int:
    return strcmp(*a, *b)


@public
def sort_int8(ptr: int8*, len: int64) -> None:
    Sorter[int8]{}.sort(ptr, len, compare_int8)
@public
def sort_int16(ptr: int16*, len: int64) -> None:
    Sorter[int16]{}.sort(ptr, len, compare_int16)
@public
def sort_int32(ptr: int32*, len: int64) -> None:
    Sorter[int32]{}.sort(ptr, len, compare_int32)
@public
def sort_int64(ptr: int64*, len: int64) -> None:
    Sorter[int64]{}.sort(ptr, len, compare_int64)

@public
def sort_uint8(ptr: uint8*, len: int64) -> None:
    Sorter[uint8]{}.sort(ptr, len, compare_uint8)
@public
def sort_uint16(ptr: uint16*, len: int64) -> None:
    Sorter[uint16]{}.sort(ptr, len, compare_uint16)
@public
def sort_uint32(ptr: uint32*, len: int64) -> None:
    Sorter[uint32]{}.sort(ptr, len, compare_uint32)
@public
def sort_uint64(ptr: uint64*, len: int64) -> None:
    Sorter[uint64]{}.sort(ptr, len, compare_uint64)

@public
def sort_strings(ptr: byte**, len: int64) -> None:
    Sorter[byte*]{}.sort(ptr, len, compare_strings)
