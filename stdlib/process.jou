# Functions for working with processes (i.e. running programs).
#
# Many functions apply to the current process. Some create new
# processes as subprocesses of the current process.

# Run a command in a new subprocess. Return value 0 means it succeeded.
declare system(command: byte*) -> int

# Exit the current process.
declare exit(status: int) -> noreturn  # Clean exit. Status 0 is success, other status (usually 1) means fail.
declare abort() -> noreturn  # Hard exit. Similar to a crash.
# declare execl(path: byte*, arg: byte*, ...) -> int # Execute the executable file with argument list args, replacing the current process.

declare access(pathname: byte*, mode: int) -> int # Use the real uid/gid to test for access to a path.
declare chdir(path: byte*) -> int # Change the current working directory to the specified path.

declare close(fd: int) -> int # Close a file descriptor.

# Each process has a list of environment variables, and each child
# process inherits its parent's variables. These functions access
# the environment variables of the current process.
declare getenv(varname: byte*) -> byte*  # Returns NULL if not found.
