# C's errno is actually a macro that expands to a function call.
# The function name varies by platform.
if WINDOWS:
    declare _errno() -> int*
elif MACOS:
    declare __error() -> int*
elif NETBSD:
    declare __errno() -> int*
else:
    declare __errno_location() -> int*


@public
def set_errno(value: int) -> None:
    if WINDOWS:
        *_errno() = value
    elif MACOS:
        *__error() = value
    elif NETBSD:
        *__errno() = value
    else:
        *__errno_location() = value


@public
def get_errno() -> int:
    if WINDOWS:
        return *_errno()
    elif MACOS:
        return *__error()
    elif NETBSD:
        return *__errno()
    else:
        return *__errno_location()


# Convert an error code into a string. Do not modify or free() the returned string.
@public
declare strerror(errno_value: int) -> byte*
