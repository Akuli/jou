import "../config.jou"
import "./ast.jou"
import "./errors_and_warnings.jou"
import "./tokenizer.jou"
import "./parser.jou"
import "./types.jou"
import "./typecheck.jou"
import "./paths.jou"
import "./target.jou"
import "./create_llvm_ir.jou"
import "./llvm.jou"
import "./evaluate.jou"
import "stdlib/mem.jou"
import "stdlib/process.jou"
import "stdlib/str.jou"
import "stdlib/io.jou"

enum CompilerMode:
    TokenizeOnly    # Tokenize one file, don't recurse to imports
    ParseOnly       # Tokenize and parse one file, don't recurse to imports
    Compile         # Compile and link
    CompileAndRun   # Compile, link and run a program (default)

class CommandLineArgs:
    mode: CompilerMode
    output_file: byte*  # The argument after -o, possibly with .exe appended to it
    verbosity: int      # Number of -v/--verbose flags given
    main_path: byte*    # Jou file path passed on command line


# An error message should have already been printed to stderr, without a trailing \n
def fail_parsing_args(argv0: byte*, message: byte*) -> None:
    fprintf(stderr, "%s: %s (try \"%s --help\")\n", argv0, message, argv0)
    exit(2)

def print_help(argv0: byte*) -> None:
    printf("Usage:\n")
    printf("  %s [options] FILENAME.jou\n", argv0)
    printf("  %s --help         # This message\n", argv0)
    printf("\n")
    printf("Options:\n")
    printf("  -o OUTFILE                 output an executable file, don't run the code\n")
    printf("  -v/--verbose               print what compilation steps are done\n")
    printf("  -vv / --verbose --verbose  show what each compilation step produces\n")
    printf("  --tokenize-only            tokenize one file and display the resulting tokens\n")
    printf("  --parse-only               tokenize and parse one file and display the AST\n")

def parse_args(argc: int, argv: byte**) -> CommandLineArgs:
    result = CommandLineArgs{mode = CompilerMode::CompileAndRun}

    i = 1
    while i < argc:
        arg = argv[i++]

        if strcmp(arg, "--help") == 0:
            print_help(argv[0])
            exit(0)

        if result.mode != CompilerMode::CompileAndRun and (
            strcmp(arg, "--tokenize-only") == 0
            or strcmp(arg, "--parse-only") == 0
            or strcmp(arg, "-o") == 0
        ):
            fail_parsing_args(argv[0], "only one of --tokenize-only, --parse-only or -o can be given")

        if strcmp(arg, "--tokenize-only") == 0:
            result.mode = CompilerMode::TokenizeOnly
        elif strcmp(arg, "--parse-only") == 0:
            result.mode = CompilerMode::ParseOnly
        elif strcmp(arg, "-o") == 0:
            result.mode = CompilerMode::Compile
            result.output_file = argv[i++]
            if result.output_file == NULL:
                fail_parsing_args(argv[0], "-o must be followed by the name of an output file")
        elif strcmp(arg, "--verbose") == 0:
            result.verbosity++
        elif starts_with(arg, "-v") and strspn(&arg[1], "v") == strlen(arg) - 1:
            result.verbosity += (strlen(arg) as int) - 1
        elif arg[0] == '-':
            message = malloc(strlen(arg) + 100)
            sprintf(message, "unknown option '%s'", arg)
            fail_parsing_args(argv[0], message)
        elif result.main_path == NULL:
            result.main_path = arg
        else:
            fail_parsing_args(argv[0], "you can pass only one Jou file")

    if result.main_path == NULL:
        fail_parsing_args(argv[0], "missing Jou file name")

    return result


# C:\Users\myname\.foo-bar.jou --> "_foo_bar"
# Result never contains "-", so you can add "-" separated suffixes without conflicts.
def get_sane_filename(path: byte*) -> byte[50]:
    while True:
        if strstr(path, "/") != NULL:
            path = strstr(path, "/")
        elif strstr(path, "\\") != NULL:
            path = strstr(path, "\\")
        else:
            break
        path++  # skip slash

    name: byte[50]
    snprintf(name, sizeof name, "%s", path)
    assert name[0] != '\0'

    if name[0] == '.':
        name[0] = '_'
    for i = 0; name[i] != '\0'; i++:
        if name[i] == '.':
            name[i] = '\0'
            break
        if name[i] == '-':
            name[i] = '_'
    return name

def check_ast_and_import_conflicts(ast: AstFile*, symbol: ExportSymbol*) -> None:
    for i = 0; i < ast->body.nstatements; i++:
        ts = &ast->body.statements[i]
        if ts->kind == AstStatementKind::Function:
            conflict = symbol->kind == ExportSymbolKind::Function and strcmp(ts->function.signature.name, symbol->name) == 0
        elif (
            ts->kind == AstStatementKind::GlobalVariableDeclaration
            or ts->kind == AstStatementKind::GlobalVariableDefinition
        ):
            conflict = symbol->kind == ExportSymbolKind::GlobalVariable and strcmp(ts->var_declaration.name, symbol->name) == 0
        elif ts->kind == AstStatementKind::Class:
            conflict = symbol->kind == ExportSymbolKind::Type and strcmp(ts->classdef.name, symbol->name) == 0
        elif ts->kind == AstStatementKind::Enum:
            conflict = symbol->kind == ExportSymbolKind::Type and strcmp(ts->enumdef.name, symbol->name) == 0
        else:
            assert False

        if conflict:
            if symbol->kind == ExportSymbolKind::Function:
                kind_name = "function"
            elif symbol->kind == ExportSymbolKind::GlobalVariable:
                kind_name = "global variable"
            elif symbol->kind == ExportSymbolKind::Type:
                kind_name = "type"
            else:
                assert False

            message: byte[500]
            # TODO: might be nice to show where it was imported from
            snprintf(message, sizeof message, "a %s named '%s' already exists", kind_name, symbol->name)
            fail(ts->location, message)


class FileState:
    ast: AstFile
    typectx: FileTypes
    pending_exports: ExportSymbol*

class ParseQueueItem:
    path: byte*
    is_imported: bool
    import_location: Location

class Compiler:
    argv0: byte*
    verbosity: int
    stdlib_path: byte*
    args: CommandLineArgs*
    files: FileState*
    nfiles: int
    automagic_files: byte*[10]

    def determine_automagic_files(self) -> None:
        self->automagic_files[0] = malloc(strlen(self->stdlib_path) + 40)
        sprintf(self->automagic_files[0], "%s/_assert_fail.jou", self->stdlib_path)
        if WINDOWS:
            self->automagic_files[1] = malloc(strlen(self->stdlib_path) + 40)
            sprintf(self->automagic_files[1], "%s/_windows_startup.jou", self->stdlib_path)

    def parse_all_files(self) -> None:
        queue: ParseQueueItem* = malloc(50 * sizeof queue[0])
        queue_len = 0
        queue[queue_len++] = ParseQueueItem{path = self->args->main_path}
        for i = 0; self->automagic_files[i] != NULL; i++:
            queue[queue_len++] = ParseQueueItem{path = self->automagic_files[i]}

        while queue_len > 0:
            item = queue[--queue_len]

            found = False
            for i = 0; i < self->nfiles; i++:
                if strcmp(self->files[i].ast.path, item.path) == 0:
                    found = True
                    break
            if found:
                continue

            if self->verbosity >= 1:
                printf("Parsing %s\n", item.path)

            if item.is_imported:
                tokens = tokenize(item.path, &item.import_location)
            else:
                tokens = tokenize(item.path, NULL)
            if self->verbosity >= 2:
                print_tokens(tokens)
            ast = parse(tokens, self->stdlib_path)
            if self->verbosity >= 2:
                ast.print()
            free(tokens)  # TODO: do this properly

            evaluate_compile_time_if_statements_in_body(&ast.body)

            self->files = realloc(self->files, sizeof self->files[0] * (self->nfiles + 1))
            self->files[self->nfiles++] = FileState{ast = ast}

            for i = 0; i < ast.nimports; i++:
                # TODO: offsetof()
                queue = realloc(queue, sizeof queue[0] * (queue_len + 1))
                queue[queue_len++] = ParseQueueItem{
                    path = ast.imports[i].resolved_path,
                    is_imported = True,
                    import_location = ast.imports[i].location,
                }

        free(queue)

    def process_imports_and_exports(self) -> None:
        if self->verbosity >= 1:
            printf("Processing imports/exports\n")

        for idest = 0; idest < self->nfiles; idest++:
            dest = &self->files[idest]
            seen_before: FileState** = malloc(sizeof(seen_before[0]) * dest->ast.nimports)

            for i = 0; i < dest->ast.nimports; i++:
                imp = &dest->ast.imports[i]

                src: FileState* = NULL
                for isrc = 0; isrc < self->nfiles; isrc++:
                    if strcmp(self->files[isrc].ast.path, imp->resolved_path) == 0:
                        src = &self->files[isrc]
                        break
                assert src != NULL

                if src == dest:
                    fail(imp->location, "the file itself cannot be imported")

                for k = 0; k < i; k++:
                    if seen_before[k] == src:
                        message: byte[500]
                        snprintf(message, sizeof(message), "file \"%s\" is imported twice", imp->specified_path)
                        fail(imp->location, message)
                seen_before[i] = src

                for exp = src->pending_exports; exp->name[0] != '\0'; exp++:
                    if self->verbosity >= 1:
                        printf(
                            "  %s: imported in %s, exported in %s\n",
                            exp->name, src->ast.path, dest->ast.path,
                        )
                    check_ast_and_import_conflicts(&dest->ast, exp)
                    dest->typectx.add_imported_symbol(exp)

            free(seen_before)

        for i = 0; i < self->nfiles; i++:
            free(self->files[i].pending_exports)
            self->files[i].pending_exports = NULL

    def typecheck_stage1_all_files(self) -> None:
        for i = 0; i < self->nfiles; i++:
            if self->verbosity >= 1:
                printf("Type-check stage 1: %s\n", self->files[i].ast.path)

            assert self->files[i].pending_exports == NULL
            self->files[i].pending_exports = typecheck_stage1_create_types(
                &self->files[i].typectx,
                &self->files[i].ast,
            )

    def typecheck_stage2_all_files(self) -> None:
        for i = 0; i < self->nfiles; i++:
            if self->verbosity >= 1:
                printf("Type-check stage 2: %s\n", self->files[i].ast.path)

            assert self->files[i].pending_exports == NULL
            self->files[i].pending_exports = typecheck_stage2_populate_types(
                &self->files[i].typectx,
                &self->files[i].ast,
            )

    def typecheck_stage3_all_files(self) -> None:
        for i = 0; i < self->nfiles; i++:
            if self->verbosity >= 1:
                printf("Type-check stage 3: %s\n", self->files[i].ast.path)

            typecheck_stage3_function_and_method_bodies(
                &self->files[i].typectx,
                &self->files[i].ast,
            )

    def get_object_file_paths(self) -> byte**:
        sane_names: byte[50]* = calloc(sizeof sane_names[0], self->nfiles)
        result: byte** = calloc(sizeof result[0], self->nfiles + 1)  # NULL terminated

        # First, extract just the names from file paths.
        # "blah/blah/foo.jou" --> "foo"
        for i = 0; i < self->nfiles; i++:
            sane_names[i] = get_sane_filename(self->files[i].ast.path)

        for i = 0; i < self->nfiles; i++:
            # If there are 3 files named foo.jou in different directories, their object files will be foo.o, foo-1.o, foo-2.o
            counter = 0
            for k = 0; k < i; k++:
                if strcmp(sane_names[k], sane_names[i]) == 0:
                    counter++

            name: byte[100]
            if counter == 0:
                sprintf(name, "%s.o", sane_names[i])
            else:
                sprintf(name, "%s-%d.o", sane_names[i], counter)
            result[i] = get_path_to_file_in_jou_compiled(name)

        free(sane_names)
        return result

    def get_exe_file_path(self) -> byte*:
        if self->args->output_file == NULL:
            tmp = get_sane_filename(self->args->main_path)
            exe = get_path_to_file_in_jou_compiled(tmp)
        else:
            exe = strdup(self->args->output_file)

        if WINDOWS and not ends_with(exe, ".exe") and not ends_with(exe, ".EXE"):
            exe = realloc(exe, strlen(exe) + 10)
            strcat(exe, ".exe")

        if WINDOWS:
            for i = 0; exe[i] != '\0'; i++:
                if exe[i] == '/':
                    exe[i] = '\\'

        return exe

    def create_object_files(self) -> byte**:
        paths = self->get_object_file_paths()

        for i = 0; i < self->nfiles; i++:
            if self->verbosity >= 1:
                printf("Build LLVM IR: %s\n", self->files[i].ast.path)

            module = create_llvm_ir(&self->files[i].ast, &self->files[i].typectx)
            if self->verbosity >= 2:
                # Don't want to use LLVMDumpModule() because it dumps to stdout.
                # When redirected, stdout and stderr tend to get mixed up into a weird order.
                s = LLVMPrintModuleToString(module)
                puts(s)
                LLVMDisposeMessage(s)

            if self->verbosity >= 1:
                printf("Verify LLVM IR: %s\n", self->files[i].ast.path)
            LLVMVerifyModule(module, LLVMVerifierFailureAction::AbortProcess, NULL)

            path = paths[i]
            if self->verbosity >= 1:
                printf("Emit LLVM IR: %s --> %s\n", self->files[i].ast.path, path)

            error: byte* = NULL
            if LLVMTargetMachineEmitToFile(target.target_machine, module, path, LLVMCodeGenFileType::ObjectFile, &error) != 0:
                assert error != NULL
                fprintf(stderr, "error in LLVMTargetMachineEmitToFile(): %s\n", error)
                exit(1)
            assert error == NULL

        return paths

    def link(self, object_files: byte**) -> byte*:
        exe = self->get_exe_file_path()
        if WINDOWS:
            c_compiler = find_installation_directory()
            c_compiler = realloc(c_compiler, strlen(c_compiler) + 100)
            strcat(c_compiler, "\\mingw64\\bin\\gcc.exe")
        else:
            c_compiler = get_jou_clang_path()

        command_size = strlen(c_compiler) + strlen(exe) + 100
        for i = 0; object_files[i] != NULL; i++:
            command_size += 5
            command_size += strlen(object_files[i])
        command: byte* = malloc(command_size)

        sprintf(command, "\"%s\" -o \"%s\"", c_compiler, exe)
        for i = 0; object_files[i] != NULL; i++:
            sprintf(&command[strlen(command)], " \"%s\"", object_files[i])
        strcat(command, " -lm")

        if WINDOWS:
            # windows strips outermost quotes for some reason, so let's quote it all one more time...
            memmove(&command[1], &command[0], strlen(command) + 1)
            command[0] = '"'
            strcat(command, "\"")

        if self->verbosity >= 1:
            printf("Run linker command: %s\n", command)

        # make sure that compiler output shows up before command output, even if redirected
        fflush(stdout)
        fflush(stderr)

        ret = system(command)
        free(command)
        if ret != 0:
            fprintf(stderr, "%s: linking failed\n", self->argv0)
            exit(1)

        return exe

    def run(self, exe: byte*) -> None:
        command = malloc(strlen(exe) + 10)
        sprintf(command, "\"%s\"", exe)
        if self->verbosity >= 1:
            printf("Run the compiled program command: %s\n", command)

        # make sure that compiler output shows up before command output, even if redirected
        fflush(stdout)
        fflush(stderr)

        ret = system(command)
        if ret != 0:
            fprintf(stderr, "%s: running the program failed\n", self->argv0)
            exit(1)


def main(argc: int, argv: byte**) -> int:
    init_target()
    init_types()

    args = parse_args(argc, argv)

    if args.mode == CompilerMode::TokenizeOnly:
        tokens = tokenize(args.main_path, NULL)
        print_tokens(tokens)
        free(tokens)
    elif args.mode == CompilerMode::ParseOnly:
        tokens = tokenize(args.main_path, NULL)
        stdlib_path = find_stdlib()
        ast = parse(tokens, stdlib_path)
        ast.print()
        ast.free()
        free(tokens)
        free(stdlib_path)
    elif args.mode == CompilerMode::Compile or args.mode == CompilerMode::CompileAndRun:
        compiler = Compiler{
            argv0 = argv[0],
            verbosity = args.verbosity,
            stdlib_path = find_stdlib(),
            args = &args,
        }
        compiler.determine_automagic_files()
        compiler.parse_all_files()

        compiler.typecheck_stage1_all_files()
        compiler.process_imports_and_exports()
        compiler.typecheck_stage2_all_files()
        compiler.process_imports_and_exports()
        compiler.typecheck_stage3_all_files()

        object_files = compiler.create_object_files()
        executable = compiler.link(object_files)
        for i = 0; object_files[i] != NULL; i++:
            free(object_files[i])
        free(object_files)

        # TODO: make the -o flag work
        if args.mode == CompilerMode::CompileAndRun:
            compiler.run(executable)
        free(executable)
        for i = 0; compiler.automagic_files[i] != NULL; i++:
            free(compiler.automagic_files[i])

    else:
        assert False

    return 0
