import "stdlib/str.jou"
import "stdlib/mem.jou"

enum TypeKind:
    Bool
    SignedInteger
    UnsignedInteger
    Pointer
    VoidPointer
    Class
    OpaqueClass
    Enum

class EnumMembers:
    count: int
    names: byte[100]*

    # Returns -1 for not found
    def find_index(self, name: byte*) -> int:
        for i = 0; i < self->count; i++:
            if strcmp(&self->names[i][0], name) == 0:
                return i
        return -1

class Type:
    name: byte[100]
    kind: TypeKind

    union:
        size_in_bits: int  # SignedInteger, UnsignedInteger
        value_type: Type*  # Pointer
        enum_members: EnumMembers  # Enum

    # Pointers and arrays of a given type live as long as the type itself.
    # To make it possible, we just store them within the type.
    # These are initially NULL and created in dynamically as needed.
    #
    # Do not access these outside this file.
    cached_pointer_type: Type*
    # TODO: arrays

    def is_integer_type(self) -> bool:
        return self->kind == TypeKind::SignedInteger or self->kind == TypeKind::UnsignedInteger

    def is_number_type(self) -> bool:
        # TODO: accept floats/doubles as numbers
        return self->is_integer_type()

    def is_pointer_type(self) -> bool:
        return self->kind == TypeKind::Pointer or self->kind == TypeKind::VoidPointer

    def get_pointer_type(self) -> Type*:
        if self->cached_pointer_type == NULL:
            pointer_name: byte[100]
            snprintf(&pointer_name[0], sizeof pointer_name, "%s*", &self->name[0])

            self->cached_pointer_type = malloc(sizeof *self->cached_pointer_type)
            *self->cached_pointer_type = Type{
                name = pointer_name,
                kind = TypeKind::Pointer,
                value_type = self,
            }

        return self->cached_pointer_type

# Typese are cached into global state, so you can use == between
# pointers to compare them. Also, you don't usually need to copy a
# type, you can just pass around a pointer to it.
global signed_integers: Type[65]  # indexed by size in bits (8, 16, 32, 64)
global unsigned_integers: Type[65]  # indexed by size in bits (8, 16, 32, 64)
global bool_type: Type
global void_ptr_type: Type

# TODO: it seems weird in other files these are pointers but bool_type isn't
global byte_type: Type*
global int_type: Type*
global long_type: Type*

def init_types() -> void:
    strcpy(&void_ptr_type.name[0], "void*")
    void_ptr_type.kind = TypeKind::VoidPointer

    strcpy(&bool_type.name[0], "bool")
    bool_type.kind = TypeKind::Bool

    for size = 8; size <= 64; size *= 2:
        sprintf(&signed_integers[size].name[0], "<%d-bit signed integer>", size)
        sprintf(&unsigned_integers[size].name[0], "<%d-bit unsigned integer>", size)
        signed_integers[size].kind = TypeKind::SignedInteger
        unsigned_integers[size].kind = TypeKind::UnsignedInteger
        signed_integers[size].size_in_bits = size
        unsigned_integers[size].size_in_bits = size

    byte_type = &unsigned_integers[8]
    int_type = &signed_integers[32]
    long_type = &signed_integers[64]

    strcpy(&byte_type->name[0], "byte")
    strcpy(&int_type->name[0], "int")
    strcpy(&long_type->name[0], "long")

def create_opaque_class(name: byte*) -> Type*:
    result: Type* = malloc(sizeof *result)
    *result = Type{kind = TypeKind::OpaqueClass}
    assert strlen(name) < sizeof result->name
    strcpy(&result->name[0], name)
    return result

def create_enum(name: byte*, member_count: int, member_names: byte[100]*) -> Type*:
    copied_member_names: byte[100]* = malloc(member_count * sizeof copied_member_names[0])
    memcpy(copied_member_names, member_names, member_count * sizeof copied_member_names[0])

    result: Type* = malloc(sizeof *result)
    *result = Type{
        kind = TypeKind::Enum,
        enum_members = EnumMembers{count = member_count, names = copied_member_names},
    }
    assert strlen(name) < sizeof result->name
    strcpy(&result->name[0], name)
    return result


class Signature:
    name: byte[100]  # name of function or method, after "def" keyword
    nargs: int
    argnames: byte[100]*
    argtypes: Type**
    takes_varargs: bool  # True for functions like printf()
    return_type: Type*

    def is_method(self) -> bool:
        return False

    def function_or_method(self) -> byte*:
        if self->is_method():
            return "method"
        else:
            return "function"

    def to_string(self, include_return_type: bool) -> byte*:
        result: byte* = malloc(500*(self->nargs + 1))
        strcpy(result, &self->name[0])

        strcat(result, "(")
        for i = 0; i < self->nargs; i++:
            if i != 0:
                strcat(result, ", ")
            strcat(result, &self->argnames[i][0])
            strcat(result, ": ")
            strcat(result, &self->argtypes[i]->name[0])
        if self->takes_varargs:
            if self->nargs != 0:
                strcat(result, ", ")
            strcat(result, "...")
        strcat(result, ")")

        if include_return_type:
            if self->return_type == NULL:
                strcat(result, " -> void")
            else:
                strcat(result, " -> ")
                strcat(result, &self->return_type->name[0])

        return result

    def copy(self) -> Signature:
        result = *self
        result.argnames = malloc(result.nargs * sizeof(result.argnames[0]))
        result.argtypes = malloc(result.nargs * sizeof(result.argtypes[0]))
        memcpy(result.argnames, self->argnames, result.nargs * sizeof(result.argnames[0]))
        memcpy(result.argtypes, self->argtypes, result.nargs * sizeof(result.argtypes[0]))
        return result

    def free(self) -> void:
        free(self->argnames)
        free(self->argtypes)
