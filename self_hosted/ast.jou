from "stdlib/io.jou" import printf, putchar
from "stdlib/str.jou" import snprintf, strcpy
from "stdlib/mem.jou" import free
from "./errors_and_warnings.jou" import Location

# TODO: move to stdlib
declare isprint(b: int) -> int

class AstFile:
    path: byte*  # not owned
    body: AstToplevelStatement*
    body_len: int

    def print(self: AstFile*) -> void:
        printf("===== AST for file \"%s\" =====\n", self->path)
        for i = 0; i < self->body_len; i++:
            (&self->body[i]).print()

    def free(self: AstFile*) -> void:
        for i = 0; i < self->body_len; i++:
            (&self->body[i]).free()
        free(self->body)

enum AstToplevelStatementKind:
    Import
    FunctionDeclaration
    FunctionDefinition
    ClassDefinition
    GlobalVariableDeclaration

class AstToplevelStatement:
    kind: AstToplevelStatementKind
    location: Location

    # TODO: union
    the_import: AstImport
    decl_signature: AstSignature
    funcdef: AstFunctionDef
    classdef: AstClassDef
    global_var: AstNameTypeValue

    def print(self: AstToplevelStatement*) -> void:
        printf("line %d: ", self->location.lineno)
        if self->kind == AstToplevelStatementKind::Import:
            printf("Import \"%s\" from \"%s\".\n", &self->the_import.symbol[0], self->the_import.path)
        elif self->kind == AstToplevelStatementKind::FunctionDeclaration:
            printf("Declare a function: ")
            self->decl_signature.print()
        elif self->kind == AstToplevelStatementKind::FunctionDefinition:
            printf("Define a function: ")
            (&self->funcdef).print()
        elif self->kind == AstToplevelStatementKind::ClassDefinition:
            printf("Define a ")
            (&self->classdef).print()
        elif self->kind == AstToplevelStatementKind::GlobalVariableDeclaration:
            printf("Declare a global variable ")
            (&self->global_var).print()
            printf("\n")
        else:
            printf("????????\n")
        printf("\n")

    def free(self: AstToplevelStatement*) -> void:
        if self->kind == AstToplevelStatementKind::Import:
            (&self->the_import).free()

class AstImport:
    path: byte*
    symbol: byte[100]

    def free(self: AstImport*) -> void:
        free(self->path)

enum AstTypeKind:
    Named
    Pointer
    Array

class AstArrayType:
    membertype: AstType*
    len: int

    def free(self: AstArrayType*) -> void:
        self->membertype.free()
        free(self->membertype)

class AstType:
    kind: AstTypeKind
    location: Location

    # TODO: union
    name: byte[100]     # AstTypeKind::Named
    valuetype: AstType* # AstTypeKind::Pointer
    array: AstArrayType # AstTypeKind::Array

    def print(self: AstType*, show_lineno: bool) -> void:
        if self->kind == AstTypeKind::Named:
            printf("%s", &self->name[0])
        elif self->kind == AstTypeKind::Pointer:
            self->valuetype.print(False)
            printf("*")
        else:
            printf("???")

        if show_lineno:
            printf(" [line %d]", self->location.lineno)

    def free(self: AstType*) -> void:
        if self->kind == AstTypeKind::Pointer:
            self->valuetype.free()
            free(self->valuetype)
        if self->kind == AstTypeKind::Array:
            (&self->array).free()

class AstNameTypeValue:
    # name: type = value
    name: byte[100]
    name_location: Location
    type: AstType
    value: AstExpression*  # can be NULL

    def print(self: AstNameTypeValue*) -> void:
        printf("%s: ", &self->name[0])
        (&self->type).print(True)
        if self->value != NULL:
            # TODO: figure out a good way to print the value (wants a TreePrinter)
            printf(" = <default>")

    def free(self: AstNameTypeValue*) -> void:
        if self->value != NULL:
            self->value.free()
        free(self->value)

class AstSignature:
    funcname_location: Location
    funcname: byte[100]
    args: AstNameTypeValue*
    nargs: int
    takes_varargs: bool  # is there a "..." argument
    return_type: AstType

    def print(self: AstSignature*) -> void:
        printf("%s(", &self->funcname[0])
        for i = 0; i < self->nargs; i++:
            if i != 0:
                printf(", ")
            (&self->args[i]).print()

        if self->takes_varargs:
            if self->nargs != 0:
                printf(", ")
            printf("...")

        printf(") -> ")
        (&self->return_type).print(True)
        printf("\n")

    def free(self: AstSignature*) -> void:
        (&self->return_type).free()

class AstFunctionDef:
    signature: AstSignature
    body: AstBody

    def print(self: AstFunctionDef*) -> void:
        (&self->signature).print()
        (&self->body).print(TreePrinter{})

    def free(self: AstFunctionDef*) -> void:
        (&self->signature).free()
        (&self->body).free()

class AstClassDef:
    name: byte[100]
    name_location: Location
    fields: AstNameTypeValue*
    nfields: int
    methods: AstFunctionDef*
    nmethods: int

    def print(self: AstClassDef*) -> void:
        printf("class \"%s\" with %d fields and %d methods:\n", &self->name[0], self->nfields, self->nmethods)
        for i = 0; i < self->nfields; i++:
            printf("  field ")
            (&self->fields[i]).print()
            printf("\n")
        for i = 0; i < self->nmethods; i++:
            printf("  method ")
            (&self->methods[i].signature).print()
            tp = TreePrinter{}
            strcpy(&tp.prefix[0], "  ")
            (&self->methods[i].body).print(tp)

    def free(self: AstClassDef*) -> void:
        for i = 0; i < self->nfields; i++:
            (&self->fields[i]).free()
        for i = 0; i < self->nmethods; i++:
            (&self->methods[i]).free()

# Statements and expressions can be printed in a tree.
# To see a tree, run:
#
#   $ jou --parse-only examples/hello.jou
#
class TreePrinter:
    prefix: byte[100]

    # Returned subprinter can be used to print elements "inside" the current line.
    def print_prefix(self: TreePrinter, is_last_child: bool) -> TreePrinter:
        subprinter = TreePrinter{}
        if is_last_child:
            printf("%s`--- ", &self.prefix[0])
            snprintf(&subprinter.prefix[0], sizeof subprinter.prefix, "%s  ", &self.prefix[0])
        else:
            printf("%s|--- ", &self.prefix[0])
            snprintf(&subprinter.prefix[0], sizeof subprinter.prefix, "%s| ", &self.prefix[0])
        return subprinter

class AstBody:
    statements: AstStatement*
    nstatements: int

    def print(self: AstBody*, tp: TreePrinter) -> void:
        for i = 0; i < self->nstatements; i++:
            (&self->statements[i]).print(tp.print_prefix(i == self->nstatements - 1))

    def free(self: AstBody*) -> void:
        for i = 0; i < self->nstatements; i++:
            (&self->statements[i]).free()
        free(self->statements)

enum AstStatementKind:
    ExpressionStatement  # Evaluate an expression. Discard the result.
    ReturnWithValue

class AstStatement:
    location: Location
    kind: AstStatementKind

    # TODO: union
    expression: AstExpression       # AstStatementKind::ExpressionStatement
    return_value: AstExpression     # AstStatementKind::ReturnWithValue

    def print(self: AstStatement*, tp: TreePrinter) -> void:
        printf("[line %d] ", self->location.lineno)
        if self->kind == AstStatementKind::ExpressionStatement:
            printf("expression statement\n")
            (&self->expression).print(tp.print_prefix(True))
        elif self->kind == AstStatementKind::ReturnWithValue:
            printf("return a value\n")
            (&self->return_value).print(tp.print_prefix(True))
        else:
            printf("??????\n")

    def free(self: AstStatement*) -> void:
        if self->kind == AstStatementKind::ExpressionStatement:
            (&self->expression).free()
        if self->kind == AstStatementKind::ReturnWithValue:
            (&self->return_value).free()

enum AstExpressionKind:
    String
    Int
    FunctionCall

class AstExpression:
    location: Location
    kind: AstExpressionKind

    # TODO: union
    string: byte*
    int_value: int
    call: AstCall

    def print(self: AstExpression*, tp: TreePrinter) -> void:
        printf("[line %d] ", self->location.lineno)
        if self->kind == AstExpressionKind::String:
            printf("\"")
            for s = self->string; *s != 0; s++:
                if isprint(*s) != 0:
                    putchar(*s)
                elif *s == '\n':
                    printf("\\n")
                else:
                    printf("\\x%02x", *s)
            printf("\"\n")
        elif self->kind == AstExpressionKind::Int:
            printf("%d (32-bit signed)\n", self->int_value)
        elif self->kind == AstExpressionKind::FunctionCall:
            printf("call function \"%s\"\n", &self->call.called_name[0])
            (&self->call).print(tp)
        else:
            printf("?????\n")
            
    def free(self: AstExpression*) -> void:
        if self->kind == AstExpressionKind::FunctionCall:
            (&self->call).free()
        if self->kind == AstExpressionKind::String:
            free(self->string)

class AstCall:
    called_name: byte[100]  # e.g. name of function, name of class to instantiate
    nargs: int
    args: AstExpression*

    def print(self: AstCall*, tp: TreePrinter) -> void:
        for i = 0; i < self->nargs; i++:
            sub = tp.print_prefix(i == self->nargs - 1)
            printf("argument %d: ", i)
            (&self->args[i]).print(sub)

    def free(self: AstCall*) -> void:
        for i = 0; i < self->nargs; i++:
            (&self->args[i]).free()
        free(self->args)
