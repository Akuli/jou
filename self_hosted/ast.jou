from "stdlib/mem.jou" import free
from "./errors_and_warnings.jou" import Location

class AstFile:
    body: AstToplevelStatement*
    body_len: int

    def free(self: AstFile*) -> void:
        for i = 0; i < self->body_len; i++:
            (&self->body[i]).free()
        free(self->body)

enum AstToplevelStatementKind:
    Import
    DefineFunction

class AstToplevelStatement:
    kind: AstToplevelStatementKind

    # TODO: union
    the_import: AstImport
    funcdef: AstFunctionDef

    def free(self: AstToplevelStatement*) -> void:
        if self->kind == AstToplevelStatementKind::Import:
            (&self->the_import).free()

class AstImport:
    filename: byte*
    symbol: byte[100]

    def free(self: AstImport*) -> void:
        free(self->filename)

enum AstTypeKind:
    Named
    Pointer
    Array

class AstArrayType:
    membertype: AstType*
    len: int

    def free(self: AstArrayType*) -> void:
        self->membertype.free()
        free(self->membertype)

class AstType:
    kind: AstTypeKind
    location: Location

    # TODO: union
    name: byte[100]     # AstTypeKind::Named
    valuetype: AstType* # AstTypeKind::Pointer
    array: AstArrayType # AstTypeKind::Array

    def free(self: AstType*) -> void:
        if self->kind == AstTypeKind::Pointer:
            self->valuetype.free()
            free(self->valuetype)
        if self->kind == AstTypeKind::Array:
            (&self->array).free()

class AstSignature:
    funcname_location: Location
    funcname: byte[100]
    returntype: AstType

class AstFunctionDef:
    todo: int
