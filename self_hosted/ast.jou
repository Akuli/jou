import "stdlib/io.jou"
import "stdlib/str.jou"
import "stdlib/mem.jou"
import "./errors_and_warnings.jou"

# TODO: move to stdlib
declare isprint(b: int) -> int

enum AstTypeKind:
    Named
    Pointer
    Array

class AstArrayType:
    member_type: AstType*
    len: int

    def free(self) -> void:
        self->member_type->free()
        free(self->member_type)

class AstType:
    kind: AstTypeKind
    location: Location

    union:
        name: byte[100]     # AstTypeKind::Named
        value_type: AstType* # AstTypeKind::Pointer
        array: AstArrayType # AstTypeKind::Array

    def is_void(self) -> bool:
        return self->kind == AstTypeKind::Named and strcmp(&self->name[0], "void") == 0

    def is_noreturn(self) -> bool:
        return self->kind == AstTypeKind::Named and strcmp(&self->name[0], "noreturn") == 0

    def print(self, show_lineno: bool) -> void:
        if self->kind == AstTypeKind::Named:
            printf("%s", &self->name[0])
        elif self->kind == AstTypeKind::Pointer:
            self->value_type->print(False)
            printf("*")
        else:
            printf("???")

        if show_lineno:
            printf(" [line %d]", self->location.lineno)

    def free(self) -> void:
        if self->kind == AstTypeKind::Pointer:
            self->value_type->free()
            free(self->value_type)
        if self->kind == AstTypeKind::Array:
            self->array.free()

# Statements and expressions can be printed in a tree.
# To see a tree, run:
#
#   $ jou --parse-only examples/hello.jou
#
class TreePrinter:
    prefix: byte[100]

    # Returned subprinter can be used to print elements "inside" the current line.
    def print_prefix(self, is_last_child: bool) -> TreePrinter:
        subprinter = TreePrinter{}
        if is_last_child:
            printf("%s`--- ", &self->prefix[0])
            snprintf(&subprinter.prefix[0], sizeof subprinter.prefix, "%s  ", &self->prefix[0])
        else:
            printf("%s|--- ", &self->prefix[0])
            snprintf(&subprinter.prefix[0], sizeof subprinter.prefix, "%s| ", &self->prefix[0])
        return subprinter

enum AstExpressionKind:
    String
    Int
    Long
    Byte
    Bool
    Null
    FunctionCall
    Instantiate   # MyClass{x=1, y=2}
    Self    # not a variable lookup, so you can't use 'self' as variable name outside a class
    GetVariable
    GetEnumMember
    GetClassField
    As
    # unary operators
    SizeOf      # sizeof x
    AddressOf   # &x
    Dereference # *x
    Negate      # -x
    Not         # not x
    PreIncr     # ++x
    PostIncr    # x++
    PreDecr     # --x
    PostDecr    # x--
    # binary operators
    Add         # x+y
    Subtract    # x-y
    Multiply    # x*y
    Divide      # x/y
    Indexing    # x[y]
    Modulo      # x % y
    Eq          # x == y
    Ne          # x != y
    Gt          # x > y
    Lt          # x < y
    Ge          # x >= y
    Le          # x <= y
    And         # x and y
    Or          # x or y

class AstExpression:
    location: Location
    kind: AstExpressionKind

    union:
        enum_member: AstEnumMember
        class_field: AstClassField
        string: byte*
        int_value: int
        long_value: long
        byte_value: byte
        bool_value: bool
        call: AstCall
        instantiation: AstInstantiation
        as_expression: AstAsExpression*  # Must be pointer, because it contains an AstExpression
        varname: byte[100]
        operands: AstExpression*  # Only for operators. Length is arity, see get_arity()

    def print(self, tp: TreePrinter) -> void:
        printf("[line %d] ", self->location.lineno)
        if self->kind == AstExpressionKind::String:
            printf("\"")
            for s = self->string; *s != 0; s++:
                if isprint(*s) != 0:
                    putchar(*s)
                elif *s == '\n':
                    printf("\\n")
                else:
                    printf("\\x%02x", *s)
            printf("\"\n")
        elif self->kind == AstExpressionKind::Int:
            printf("%d (32-bit signed)\n", self->int_value)
        elif self->kind == AstExpressionKind::Long:
            printf("%lld (64-bit signed)\n", self->long_value)
        elif self->kind == AstExpressionKind::Byte:
            printf("%d (8-bit unsigned)\n", self->byte_value)
        elif self->kind == AstExpressionKind::Bool:
            if self->bool_value:
                printf("True\n")
            else:
                printf("False\n")
        elif self->kind == AstExpressionKind::Null:
            printf("NULL\n")
        elif self->kind == AstExpressionKind::FunctionCall:
            printf("call function \"%s\"\n", &self->call.called_name[0])
            self->call.print(tp)
        elif self->kind == AstExpressionKind::Instantiate:
            printf("instantiate \"%s\"\n", &self->instantiation.class_name[0])
            self->instantiation.print(tp)
        elif self->kind == AstExpressionKind::Self:
            printf("self\n")
        elif self->kind == AstExpressionKind::GetVariable:
            printf("get variable \"%s\"\n", &self->varname[0])
        elif self->kind == AstExpressionKind::GetEnumMember:
            printf(
                "get member \"%s\" from enum \"%s\"\n",
                &self->enum_member.member_name[0],
                &self->enum_member.enum_name[0],
            )
        elif self->kind == AstExpressionKind::GetClassField:
            if self->class_field.uses_arrow_operator:
                printf("dereference and ")
            printf("get class field \"%s\"\n", &self->class_field.field_name[0])
            self->class_field.instance->print(tp.print_prefix(True))
        elif self->kind == AstExpressionKind::As:
            printf("as ")
            self->as_expression->type.print(True)
            printf("\n")
            self->as_expression->value.print(tp.print_prefix(True))
        elif self->kind == AstExpressionKind::SizeOf:
            printf("sizeof\n")
        elif self->kind == AstExpressionKind::AddressOf:
            printf("address of\n")
        elif self->kind == AstExpressionKind::Dereference:
            printf("dereference\n")
        elif self->kind == AstExpressionKind::Negate:
            printf("negate\n")
        elif self->kind == AstExpressionKind::Not:
            printf("not\n")
        elif self->kind == AstExpressionKind::PreIncr:
            printf("pre-increment\n")
        elif self->kind == AstExpressionKind::PostIncr:
            printf("post-increment\n")
        elif self->kind == AstExpressionKind::PreDecr:
            printf("pre-decrement\n")
        elif self->kind == AstExpressionKind::PostDecr:
            printf("post-decrement\n")
        elif self->kind == AstExpressionKind::Add:
            printf("add\n")
        elif self->kind == AstExpressionKind::Subtract:
            printf("sub\n")
        elif self->kind == AstExpressionKind::Multiply:
            printf("mul\n")
        elif self->kind == AstExpressionKind::Divide:
            printf("div\n")
        elif self->kind == AstExpressionKind::Modulo:
            printf("mod\n")
        elif self->kind == AstExpressionKind::Eq:
            printf("eq\n")
        elif self->kind == AstExpressionKind::Ne:
            printf("ne\n")
        elif self->kind == AstExpressionKind::Gt:
            printf("gt\n")
        elif self->kind == AstExpressionKind::Ge:
            printf("ge\n")
        elif self->kind == AstExpressionKind::Lt:
            printf("lt\n")
        elif self->kind == AstExpressionKind::Le:
            printf("le\n")
        elif self->kind == AstExpressionKind::And:
            printf("and\n")
        elif self->kind == AstExpressionKind::Or:
            printf("or\n")
        else:
            printf("?????\n")

        for i = 0; i < self->get_arity(); i++:
            self->operands[i].print(tp.print_prefix(i == self->get_arity()-1))

    def free(self) -> void:
        if self->kind == AstExpressionKind::FunctionCall:
            self->call.free()
        elif self->kind == AstExpressionKind::As:
            self->as_expression->free()
            free(self->as_expression)
        elif self->kind == AstExpressionKind::String:
            free(self->string)

        for i = 0; i < self->get_arity(); i++:
            self->operands[i].free()
        free(self->operands)

    # arity = number of operands, e.g. 2 for a binary operator such as "+"
    def get_arity(self) -> int:
        if (
            self->kind == AstExpressionKind::SizeOf
            or self->kind == AstExpressionKind::AddressOf
            or self->kind == AstExpressionKind::Dereference
            or self->kind == AstExpressionKind::Negate
            or self->kind == AstExpressionKind::Not
            or self->kind == AstExpressionKind::PreIncr
            or self->kind == AstExpressionKind::PreDecr
            or self->kind == AstExpressionKind::PostIncr
            or self->kind == AstExpressionKind::PostDecr
        ):
            return 1
        if (
            self->kind == AstExpressionKind::Add
            or self->kind == AstExpressionKind::Subtract
            or self->kind == AstExpressionKind::Multiply
            or self->kind == AstExpressionKind::Divide
            or self->kind == AstExpressionKind::Indexing
            or self->kind == AstExpressionKind::Modulo
            or self->kind == AstExpressionKind::Eq
            or self->kind == AstExpressionKind::Ne
            or self->kind == AstExpressionKind::Gt
            or self->kind == AstExpressionKind::Lt
            or self->kind == AstExpressionKind::Ge
            or self->kind == AstExpressionKind::Le
            or self->kind == AstExpressionKind::And
            or self->kind == AstExpressionKind::Or
        ):
            return 2
        return 0

    def can_have_side_effects(self) -> bool:
        return (
            self->kind == AstExpressionKind::FunctionCall
            or self->kind == AstExpressionKind::PreIncr
            or self->kind == AstExpressionKind::PreDecr
            or self->kind == AstExpressionKind::PostIncr
            or self->kind == AstExpressionKind::PostDecr
        )

class AstEnumMember:
    enum_name: byte[100]
    member_name: byte[100]

class AstClassField:
    instance: AstExpression*
    uses_arrow_operator: bool  # distinguishes foo.bar and foo->bar
    field_name: byte[100]

class AstAsExpression:
    value: AstExpression
    type: AstType

    def free(self) -> void:
        self->value.free()
        self->type.free()

class AstCall:
    location: Location
    called_name: byte[100]  # e.g. name of function, name of class to instantiate
    nargs: int
    args: AstExpression*

    def print(self, tp: TreePrinter) -> void:
        for i = 0; i < self->nargs; i++:
            sub = tp.print_prefix(i == self->nargs - 1)
            printf("argument %d: ", i)
            self->args[i].print(sub)

    def free(self) -> void:
        for i = 0; i < self->nargs; i++:
            self->args[i].free()
        free(self->args)

class AstInstantiation:
    class_name_location: Location
    class_name: byte[100]
    nfields: int
    field_names: byte[100]*
    field_values: AstExpression*

    def print(self, tp: TreePrinter) -> void:
        for i = 0; i < self->nfields; i++:
            sub = tp.print_prefix(i == self->nfields - 1)
            printf("field \"%s\": ", &self->field_names[i][0])
            self->field_values[i].print(sub)

    def free(self) -> void:
        for i = 0; i < self->nfields; i++:
            self->field_values[i].free()
        free(self->field_names)
        free(self->field_values)

enum AstStatementKind:
    ExpressionStatement  # Evaluate an expression. Discard the result.
    Assert
    Return
    If
    WhileLoop
    ForLoop
    Break
    Continue
    DeclareLocalVar # x: SomeType = y (the "= y" is optional)
    Assign          # x = y
    InPlaceAdd      # x += y
    InPlaceSubtract # x -= y
    InPlaceMultiply # x *= y
    InPlaceDivide   # x /= y
    InPlaceModulo   # x %= y

class AstStatement:
    location: Location
    kind: AstStatementKind

    union:
        expression: AstExpression       # ExpressionStatement, Assert
        if_statement: AstIfStatement
        while_loop: AstConditionAndBody
        for_loop: AstForLoop
        return_value: AstExpression*     # can be NULL
        assignment: AstAssignment
        var_declaration: AstNameTypeValue  # DeclareLocalVar

    def print(self, tp: TreePrinter) -> void:
        printf("[line %d] ", self->location.lineno)
        if self->kind == AstStatementKind::ExpressionStatement:
            printf("expression statement\n")
            self->expression.print(tp.print_prefix(True))
        elif self->kind == AstStatementKind::Assert:
            printf("assert\n")
            self->expression.print(tp.print_prefix(True))
        elif self->kind == AstStatementKind::Return:
            printf("return\n")
            if self->return_value != NULL:
                self->return_value->print(tp.print_prefix(True))
        elif self->kind == AstStatementKind::If:
            printf("if\n")
            self->if_statement.print(tp)
        elif self->kind == AstStatementKind::ForLoop:
            printf("for loop\n")
            self->for_loop.print(tp)
        elif self->kind == AstStatementKind::WhileLoop:
            printf("while loop\n")
            self->while_loop.print(tp, True)
        elif self->kind == AstStatementKind::Break:
            printf("break\n")
        elif self->kind == AstStatementKind::Continue:
            printf("continue\n")
        elif self->kind == AstStatementKind::DeclareLocalVar:
            printf("declare local var ")
            self->var_declaration.print(&tp)
        elif self->kind == AstStatementKind::Assign:
            printf("assign\n")
            self->assignment.print(tp)
        elif self->kind == AstStatementKind::InPlaceAdd:
            printf("in-place add\n")
            self->assignment.print(tp)
        elif self->kind == AstStatementKind::InPlaceSubtract:
            printf("in-place sub\n")
            self->assignment.print(tp)
        elif self->kind == AstStatementKind::InPlaceMultiply:
            printf("in-place mul\n")
            self->assignment.print(tp)
        elif self->kind == AstStatementKind::InPlaceDivide:
            printf("in-place div\n")
            self->assignment.print(tp)
        elif self->kind == AstStatementKind::InPlaceModulo:
            printf("in-place mod\n")
            self->assignment.print(tp)
        else:
            printf("??????\n")

    def free(self) -> void:
        if self->kind == AstStatementKind::ExpressionStatement:
            self->expression.free()
        if self->kind == AstStatementKind::Return and self->return_value != NULL:
            self->return_value->free()
            free(self->return_value)
        if self->kind == AstStatementKind::If:
            self->if_statement.free()
        if self->kind == AstStatementKind::ForLoop:
            self->for_loop.free()

# Useful for e.g. "while condition: body", "if condition: body"
class AstConditionAndBody:
    condition: AstExpression
    body: AstBody

    def print(self, tp: TreePrinter, body_is_last_sub_item: bool) -> void:
        sub = tp.print_prefix(False)
        printf("condition: ")
        self->condition.print(sub)

        sub = tp.print_prefix(body_is_last_sub_item)
        printf("body:\n")
        self->body.print(sub)

    def free(self) -> void:
        self->condition.free()
        self->body.free()

class AstAssignment:
    target: AstExpression
    value: AstExpression

    def print(self, tp: TreePrinter) -> void:
        self->target.print(tp.print_prefix(False))
        self->value.print(tp.print_prefix(True))

class AstIfStatement:
    if_and_elifs: AstConditionAndBody*
    n_if_and_elifs: int  # At least 1 (the if statement). The rest, if any, are elifs.
    else_body: AstBody    # Empty if there is no else

    def print(self, tp: TreePrinter) -> void:
        for i = 0; i < self->n_if_and_elifs; i++:
            self->if_and_elifs[i].print(tp, i == self->n_if_and_elifs - 1 and self->else_body.nstatements == 0)

        if self->else_body.nstatements > 0:
            sub = tp.print_prefix(True)
            printf("else body:\n")
            self->else_body.print(sub)

    def free(self) -> void:
        for i = 0; i < self->n_if_and_elifs; i++:
            self->if_and_elifs[i].free()
        free(self->if_and_elifs)
        self->else_body.free()

class AstForLoop:
    # for init; cond; incr:
    #     ...body...
    #
    # init and incr must be pointers because this struct goes inside AstStatement.
    init: AstStatement*
    cond: AstExpression
    incr: AstStatement*
    body: AstBody

    def print(self, tp: TreePrinter) -> void:
        sub = tp.print_prefix(False)
        printf("init: ")
        self->init->print(sub)

        sub = tp.print_prefix(False)
        printf("cond: ")
        self->cond.print(sub)

        sub = tp.print_prefix(False)
        printf("incr: ")
        self->incr->print(sub)

        sub = tp.print_prefix(True)
        printf("body:\n")
        self->body.print(sub)

    def free(self) -> void:
        self->init->free()
        free(self->init)
        self->cond.free()
        self->incr->free()
        free(self->incr)
        self->body.free()

class AstNameTypeValue:
    # name: type = value
    name: byte[100]
    name_location: Location
    type: AstType
    value: AstExpression*  # can be NULL

    # tp can be set to NULL, in that case no trailing newline is printed
    def print(self, tp: TreePrinter*) -> void:
        printf("%s: ", &self->name[0])
        self->type.print(True)
        if tp == NULL:
            assert self->value == NULL
        else:
            printf("\n")
            if self->value != NULL:
                sub = tp->print_prefix(True)
                printf("initial value: ")
                self->value->print(sub)

    def free(self) -> void:
        if self->value != NULL:
            self->value->free()
        free(self->value)

class AstBody:
    statements: AstStatement*
    nstatements: int

    def print(self, tp: TreePrinter) -> void:
        for i = 0; i < self->nstatements; i++:
            self->statements[i].print(tp.print_prefix(i == self->nstatements - 1))

    def free(self) -> void:
        for i = 0; i < self->nstatements; i++:
            self->statements[i].free()
        free(self->statements)

class AstSignature:
    name_location: Location
    name: byte[100]  # name of function or method, after "def" keyword
    args: AstNameTypeValue*
    nargs: int
    takes_varargs: bool  # True for functions like printf()
    return_type: AstType

    def print(self) -> void:
        printf("%s(", &self->name[0])
        for i = 0; i < self->nargs; i++:
            if i != 0:
                printf(", ")
            self->args[i].print(NULL)

        if self->takes_varargs:
            if self->nargs != 0:
                printf(", ")
            printf("...")

        printf(") -> ")
        self->return_type.print(True)
        printf("\n")

    def free(self) -> void:
        self->return_type.free()

class AstImport:
    specified_path: byte*  # Path in jou code e.g. "stdlib/io.jou"
    resolved_path: byte*  # Absolute path or relative to current working directory e.g. "/home/akuli/jou/stdlib/io.jou"

    def free(self) -> void:
        free(self->specified_path)
        free(self->resolved_path)

enum AstToplevelStatementKind:
    Import
    Function
    Class
    Enum
    GlobalVariableDeclaration

class AstToplevelStatement:
    union:
        the_import: AstImport   # must be placed in the beginning of the class
        function: AstFunction
        classdef: AstClassDef
        enumdef: AstEnumDef
        global_var: AstNameTypeValue

    kind: AstToplevelStatementKind
    location: Location

    def print(self) -> void:
        printf("line %d: ", self->location.lineno)
        if self->kind == AstToplevelStatementKind::Import:
            printf(
                "Import \"%s\", which resolves to \"%s\".\n",
                self->the_import.specified_path,
                self->the_import.resolved_path,
            )
        elif self->kind == AstToplevelStatementKind::Function:
            if self->function.body.nstatements == 0:
                printf("Declare a function: ")
            else:
                printf("Define a function: ")
            self->function.print()
        elif self->kind == AstToplevelStatementKind::Class:
            printf("Define a ")
            self->classdef.print()
        elif self->kind == AstToplevelStatementKind::Enum:
            printf("Define ")
            self->enumdef.print()
        elif self->kind == AstToplevelStatementKind::GlobalVariableDeclaration:
            printf("Declare a global variable ")
            self->global_var.print(NULL)
            printf("\n")
        else:
            printf("????????\n")
        printf("\n")

    def free(self) -> void:
        if self->kind == AstToplevelStatementKind::Import:
            self->the_import.free()
        if self->kind == AstToplevelStatementKind::Enum:
            self->enumdef.free()

class AstFile:
    path: byte*  # not owned
    body: AstToplevelStatement*
    body_len: int

    # Iterating over imports:
    #   imp: AstImport* = NULL
    #   while file->next_import(&imp):
    #       ...
    def next_import(self, imp: AstImport**) -> bool:
        # Get the corresponding AstToplevelStatement.
        ts = *imp as AstToplevelStatement*
        assert &ts->the_import as void* == ts  # TODO: offsetof() or similar

        # Assume all imports are in the beginning of the file.
        if ts == NULL:
            ts = &self->body[0]
        else:
            ts++

        if ts == &self->body[self->body_len] or ts->kind != AstToplevelStatementKind::Import:
            return False
        *imp = &ts->the_import
        return True

    def print(self) -> void:
        printf("===== AST for file \"%s\" =====\n", self->path)
        for i = 0; i < self->body_len; i++:
            self->body[i].print()

    def free(self) -> void:
        for i = 0; i < self->body_len; i++:
            self->body[i].free()
        free(self->body)

class AstFunction:  # TODO: rename to AstFunctionOrMethod
    signature: AstSignature
    body: AstBody  # empty body means declaration, otherwise it's a definition

    def print(self) -> void:
        self->signature.print()
        self->body.print(TreePrinter{})

    def free(self) -> void:
        self->signature.free()
        self->body.free()

enum AstClassMemberKind:
    Field
    Union
    Method

class AstUnionFields:
    fields: AstNameTypeValue*
    nfields: int

    def print(self) -> void:
        for i = 0; i < self->nfields; i++:
            printf("    ")
            self->fields[i].print(NULL)
            printf("\n")

    def free(self) -> void:
        for i = 0; i < self->nfields; i++:
            self->fields[i].free()
        free(self->fields)

class AstClassMember:
    kind: AstClassMemberKind
    union:
        field: AstNameTypeValue
        union_fields: AstUnionFields
        method: AstFunction

    def print(self) -> void:
        if self->kind == AstClassMemberKind::Field:
            printf("  field ")
            self->field.print(NULL)
            printf("\n")
        elif self->kind == AstClassMemberKind::Union:
            printf("  union:\n")
            self->union_fields.print()
        elif self->kind == AstClassMemberKind::Method:
            printf("  method ")
            self->method.signature.print()
            tp = TreePrinter{}
            strcpy(&tp.prefix[0], "  ")
            self->method.body.print(tp)
        else:
            assert False

    def free(self) -> void:
        if self->kind == AstClassMemberKind::Field:
            self->field.free()
        elif self->kind == AstClassMemberKind::Union:
            self->union_fields.free()
        elif self->kind == AstClassMemberKind::Method:
            self->method.free()
        else:
            assert False

class AstClassDef:
    name: byte[100]
    name_location: Location
    members: AstClassMember*
    nmembers: int

    def print(self) -> void:
        printf("class \"%s\" with %d members:\n", &self->name[0], self->nmembers)
        for i = 0; i < self->nmembers; i++:
            self->members[i].print()

    def free(self) -> void:
        for i = 0; i < self->nmembers; i++:
            self->members[i].free()

class AstEnumDef:
    name: byte[100]
    member_count: int
    member_names: byte[100]*

    def print(self) -> void:
        printf("enum \"%s\" with %d members:\n", &self->name[0], self->member_count)
        for i = 0; i < self->member_count; i++:
            printf("  %s\n", &self->member_names[i][0])

    def free(self) -> void:
        free(self->member_names)
