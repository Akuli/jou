from "stdlib/io.jou" import printf, putchar
from "stdlib/str.jou" import snprintf, strcpy
from "stdlib/mem.jou" import free
from "./errors_and_warnings.jou" import Location, assert

# TODO: move to stdlib
declare isprint(b: int) -> int

enum AstTypeKind:
    Named
    Pointer
    Array

class AstArrayType:
    member_type: AstType*
    len: int

    def free(self) -> void:
        self->member_type->free()
        free(self->member_type)

class AstType:
    kind: AstTypeKind
    location: Location

    # TODO: union
    name: byte[100]     # AstTypeKind::Named
    value_type: AstType* # AstTypeKind::Pointer
    array: AstArrayType # AstTypeKind::Array

    def print(self, show_lineno: bool) -> void:
        if self->kind == AstTypeKind::Named:
            printf("%s", &self->name[0])
        elif self->kind == AstTypeKind::Pointer:
            self->value_type->print(False)
            printf("*")
        else:
            printf("???")

        if show_lineno:
            printf(" [line %d]", self->location.lineno)

    def free(self) -> void:
        if self->kind == AstTypeKind::Pointer:
            self->value_type->free()
            free(self->value_type)
        if self->kind == AstTypeKind::Array:
            self->array.free()

# Statements and expressions can be printed in a tree.
# To see a tree, run:
#
#   $ jou --parse-only examples/hello.jou
#
class TreePrinter:
    prefix: byte[100]

    # Returned subprinter can be used to print elements "inside" the current line.
    def print_prefix(self, is_last_child: bool) -> TreePrinter:
        subprinter = TreePrinter{}
        if is_last_child:
            printf("%s`--- ", &self->prefix[0])
            snprintf(&subprinter.prefix[0], sizeof subprinter.prefix, "%s  ", &self->prefix[0])
        else:
            printf("%s|--- ", &self->prefix[0])
            snprintf(&subprinter.prefix[0], sizeof subprinter.prefix, "%s| ", &self->prefix[0])
        return subprinter

enum AstExpressionKind:
    String
    Int
    Bool
    FunctionCall
    GetVariable
    # unary operators
    AddressOf   # -x
    Dereference # *x
    Negate      # &x
    Not         # not x
    # binary operators
    Add         # x+y
    Subtract    # x-y
    Multiply    # x*y
    Divide      # x/y
    Indexing    # x[y]
    Modulo      # x % y
    Eq          # x == y
    Ne          # x != y
    Gt          # x > y
    Lt          # x < y
    Ge          # x >= y
    Le          # x <= y
    And         # x and y
    Or          # x or y

class AstExpression:
    location: Location
    kind: AstExpressionKind

    # TODO: union
    string: byte*
    int_value: int
    bool_value: bool
    call: AstCall
    varname: byte[100]
    operands: AstExpression*  # Only for operators. Length is arity, see get_arity()

    def print(self, tp: TreePrinter) -> void:
        printf("[line %d] ", self->location.lineno)
        if self->kind == AstExpressionKind::String:
            printf("\"")
            for s = self->string; *s != 0; s++:
                if isprint(*s) != 0:
                    putchar(*s)
                elif *s == '\n':
                    printf("\\n")
                else:
                    printf("\\x%02x", *s)
            printf("\"\n")
        elif self->kind == AstExpressionKind::Int:
            printf("%d (32-bit signed)\n", self->int_value)
        elif self->kind == AstExpressionKind::Bool:
            if self->bool_value:
                printf("True\n")
            else:
                printf("False\n")
        elif self->kind == AstExpressionKind::FunctionCall:
            printf("call function \"%s\"\n", &self->call.called_name[0])
            self->call.print(tp)
        elif self->kind == AstExpressionKind::GetVariable:
            printf("get variable \"%s\"\n", &self->varname[0])
        elif self->kind == AstExpressionKind::Add:
            printf("add\n")
        elif self->kind == AstExpressionKind::Subtract:
            printf("sub\n")
        elif self->kind == AstExpressionKind::Multiply:
            printf("mul\n")
        elif self->kind == AstExpressionKind::Divide:
            printf("div\n")
        elif self->kind == AstExpressionKind::Eq:
            printf("eq\n")
        elif self->kind == AstExpressionKind::Ne:
            printf("ne\n")
        elif self->kind == AstExpressionKind::Gt:
            printf("gt\n")
        elif self->kind == AstExpressionKind::Ge:
            printf("ge\n")
        elif self->kind == AstExpressionKind::Lt:
            printf("lt\n")
        elif self->kind == AstExpressionKind::Le:
            printf("le\n")
        else:
            printf("?????\n")

        for i = 0; i < self->get_arity(); i++:
            self->operands[i].print(tp.print_prefix(i == self->get_arity()-1))

    def free(self) -> void:
        if self->kind == AstExpressionKind::FunctionCall:
            self->call.free()
        if self->kind == AstExpressionKind::String:
            free(self->string)

    # arity = number of operands, e.g. 2 for a binary operator such as "+"
    def get_arity(self) -> int:
        if (
            self->kind == AstExpressionKind::AddressOf
            or self->kind == AstExpressionKind::Dereference
            or self->kind == AstExpressionKind::Negate
            or self->kind == AstExpressionKind::Not
        ):
            return 1
        if (
            self->kind == AstExpressionKind::Add
            or self->kind == AstExpressionKind::Subtract
            or self->kind == AstExpressionKind::Multiply
            or self->kind == AstExpressionKind::Divide
            or self->kind == AstExpressionKind::Indexing
            or self->kind == AstExpressionKind::Modulo
            or self->kind == AstExpressionKind::Eq
            or self->kind == AstExpressionKind::Ne
            or self->kind == AstExpressionKind::Gt
            or self->kind == AstExpressionKind::Lt
            or self->kind == AstExpressionKind::Ge
            or self->kind == AstExpressionKind::Le
            or self->kind == AstExpressionKind::And
            or self->kind == AstExpressionKind::Or
        ):
            return 2
        return 0

class AstCall:
    location: Location
    called_name: byte[100]  # e.g. name of function, name of class to instantiate
    nargs: int
    args: AstExpression*

    def print(self, tp: TreePrinter) -> void:
        for i = 0; i < self->nargs; i++:
            sub = tp.print_prefix(i == self->nargs - 1)
            printf("argument %d: ", i)
            self->args[i].print(sub)

    def free(self) -> void:
        for i = 0; i < self->nargs; i++:
            self->args[i].free()
        free(self->args)

enum AstStatementKind:
    ExpressionStatement  # Evaluate an expression. Discard the result.
    ReturnWithValue
    If

class AstStatement:
    location: Location
    kind: AstStatementKind

    # TODO: union
    expression: AstExpression       # AstStatementKind::ExpressionStatement
    if_statement: AstIfStatement
    return_value: AstExpression     # AstStatementKind::ReturnWithValue

    def print(self, tp: TreePrinter) -> void:
        printf("[line %d] ", self->location.lineno)
        if self->kind == AstStatementKind::ExpressionStatement:
            printf("expression statement\n")
            self->expression.print(tp.print_prefix(True))
        elif self->kind == AstStatementKind::ReturnWithValue:
            printf("return a value\n")
            self->return_value.print(tp.print_prefix(True))
        elif self->kind == AstStatementKind::If:
            printf("if\n")
            self->if_statement.print(tp)
        else:
            printf("??????\n")

    def free(self) -> void:
        if self->kind == AstStatementKind::ExpressionStatement:
            self->expression.free()
        if self->kind == AstStatementKind::ReturnWithValue:
            self->return_value.free()

class AstBody:
    statements: AstStatement*
    nstatements: int

    def print(self, tp: TreePrinter) -> void:
        for i = 0; i < self->nstatements; i++:
            self->statements[i].print(tp.print_prefix(i == self->nstatements - 1))

    def free(self) -> void:
        for i = 0; i < self->nstatements; i++:
            self->statements[i].free()
        free(self->statements)

# Useful for e.g. "while condition: body", "if condition: body"
class AstConditionAndBody:
    condition: AstExpression
    body: AstBody

class AstIfStatement:
    if_and_elifs: AstConditionAndBody*
    n_if_and_elifs: int  # At least 1 (the if statement). The rest, if any, are elifs.
    else_body: AstBody    # Empty if there is no else

    def print(self, tp: TreePrinter) -> void:
        for i = 0; i < self->n_if_and_elifs; i++:
            sub = tp.print_prefix(False)
            printf("condition: ")
            self->if_and_elifs[i].condition.print(sub)

            is_last_row = i == self->n_if_and_elifs - 1 and self->else_body.nstatements == 0
            sub = tp.print_prefix(is_last_row)
            printf("body:\n")
            self->if_and_elifs[i].body.print(sub)

        if self->else_body.nstatements > 0:
            sub = tp.print_prefix(True)
            printf("else body:\n")
            self->else_body.print(sub)

class AstNameTypeValue:
    # name: type = value
    name: byte[100]
    name_location: Location
    type: AstType
    value: AstExpression*  # can be NULL

    def print(self) -> void:
        printf("%s: ", &self->name[0])
        self->type.print(True)
        if self->value != NULL:
            # TODO: figure out a good way to print the value (wants a TreePrinter)
            printf(" = <default>")

    def free(self) -> void:
        if self->value != NULL:
            self->value->free()
        free(self->value)

class AstSignature:
    name_location: Location
    name: byte[100]  # name of function or method, after "def" keyword
    args: AstNameTypeValue*
    nargs: int
    takes_varargs: bool  # True for functions like printf()
    return_type: AstType

    def print(self) -> void:
        printf("%s(", &self->name[0])
        for i = 0; i < self->nargs; i++:
            if i != 0:
                printf(", ")
            self->args[i].print()

        if self->takes_varargs:
            if self->nargs != 0:
                printf(", ")
            printf("...")

        printf(") -> ")
        self->return_type.print(True)
        printf("\n")

    def free(self) -> void:
        self->return_type.free()

class AstImport:
    path: byte*  # is owned
    symbol: byte[100]

    def free(self) -> void:
        free(self->path)

enum AstToplevelStatementKind:
    Import
    FunctionDeclaration
    FunctionDefinition
    ClassDefinition
    GlobalVariableDeclaration

class AstToplevelStatement:
    # TODO: union
    the_import: AstImport   # must be first
    decl_signature: AstSignature
    funcdef: AstFunctionDef
    classdef: AstClassDef
    global_var: AstNameTypeValue

    kind: AstToplevelStatementKind
    location: Location

    def print(self) -> void:
        printf("line %d: ", self->location.lineno)
        if self->kind == AstToplevelStatementKind::Import:
            printf("Import \"%s\" from \"%s\".\n", &self->the_import.symbol[0], self->the_import.path)
        elif self->kind == AstToplevelStatementKind::FunctionDeclaration:
            printf("Declare a function: ")
            self->decl_signature.print()
        elif self->kind == AstToplevelStatementKind::FunctionDefinition:
            printf("Define a function: ")
            self->funcdef.print()
        elif self->kind == AstToplevelStatementKind::ClassDefinition:
            printf("Define a ")
            self->classdef.print()
        elif self->kind == AstToplevelStatementKind::GlobalVariableDeclaration:
            printf("Declare a global variable ")
            self->global_var.print()
            printf("\n")
        else:
            printf("????????\n")
        printf("\n")

    def free(self) -> void:
        if self->kind == AstToplevelStatementKind::Import:
            self->the_import.free()

class AstFile:
    path: byte*  # not owned
    body: AstToplevelStatement*
    body_len: int

    # Iterating over imports:
    #   imp: AstImport* = NULL
    #   while file->next_import(&imp):
    #       ...
    def next_import(self, imp: AstImport**) -> bool:
        # Get the corresponding AstToplevelStatement.
        ts = *imp as AstToplevelStatement*
        assert(&ts->the_import as void* == ts)  # TODO: offsetof() or similar

        # Assume all imports are in the beginning of the file.
        if ts == NULL:
            ts = &self->body[0]
        else:
            ts++

        if ts == &self->body[self->body_len] or ts->kind != AstToplevelStatementKind::Import:
            return False
        *imp = &ts->the_import
        return True

    def print(self) -> void:
        printf("===== AST for file \"%s\" =====\n", self->path)
        for i = 0; i < self->body_len; i++:
            self->body[i].print()

    def free(self) -> void:
        for i = 0; i < self->body_len; i++:
            self->body[i].free()
        free(self->body)

class AstFunctionDef:
    signature: AstSignature
    body: AstBody

    def print(self) -> void:
        self->signature.print()
        self->body.print(TreePrinter{})

    def free(self) -> void:
        self->signature.free()
        self->body.free()

class AstClassDef:
    name: byte[100]
    name_location: Location
    fields: AstNameTypeValue*
    nfields: int
    methods: AstFunctionDef*
    nmethods: int

    def print(self) -> void:
        printf("class \"%s\" with %d fields and %d methods:\n", &self->name[0], self->nfields, self->nmethods)
        for i = 0; i < self->nfields; i++:
            printf("  field ")
            self->fields[i].print()
            printf("\n")
        for i = 0; i < self->nmethods; i++:
            printf("  method ")
            self->methods[i].signature.print()
            tp = TreePrinter{}
            strcpy(&tp.prefix[0], "  ")
            self->methods[i].body.print(tp)

    def free(self) -> void:
        for i = 0; i < self->nfields; i++:
            self->fields[i].free()
        for i = 0; i < self->nmethods; i++:
            self->methods[i].free()
