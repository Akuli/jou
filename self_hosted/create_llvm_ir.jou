# This file turns type-checked AST into LLVM IR. It produces an LLVMModule for each Jou file.
import "./llvm.jou"
import "./typecheck.jou"
import "./types.jou"
import "./ast.jou"
import "./target.jou"
import "stdlib/io.jou"
import "stdlib/mem.jou"
import "stdlib/str.jou"


def build_signed_mod(builder: LLVMBuilder*, lhs: LLVMValue*, rhs: LLVMValue*) -> LLVMValue*:
    # Jou's % operator ensures that a%b has same sign as b:
    # jou_mod(a, b) = llvm_mod(llvm_mod(a, b) + b, b)
    llvm_mod = LLVMBuildSRem(builder, lhs, rhs, "smod_tmp")
    sum = LLVMBuildAdd(builder, llvm_mod, rhs, "smod_tmp")
    return LLVMBuildSRem(builder, sum, rhs, "smod")

def build_signed_div(builder: LLVMBuilder*, lhs: LLVMValue*, rhs: LLVMValue*) -> LLVMValue*:
    # LLVM's provides two divisions. One truncates, the other is an "exact div"
    # that requires there is no remainder. Jou uses floor division which is
    # neither of the two, but is quite easy to implement:
    #
    #    floordiv(a, b) = exact_div(a - jou_mod(a, b), b)
    top = LLVMBuildSub(builder, lhs, build_signed_mod(builder, lhs, rhs), "sdiv_tmp")
    return LLVMBuildExactSDiv(builder, top, rhs, "sdiv")


def lmax(a: long, b: long) -> long:
    if a > b:
        return a
    return b

# LLVM doesn't have a built-in union type, and you're supposed to abuse other types for that:
# https://mapping-high-level-constructs-to-llvm-ir.readthedocs.io/en/latest/basic-constructs/unions.html
#
# My first idea was to use an array of bytes that is big enough to fit anything.
# However, that might not be aligned properly.
#
# Then I tried choosing the member type that has the biggest align, and making a large enough array of it.
# Because the align is always a power of two, the memory will be suitably aligned for all member types.
# But it didn't work for some reason I still don't understand.
#
# Then I figured out how clang does it and did it the same way.
# We make a struct that contains:
#   - the most aligned type as chosen before
#   - array of i8 as padding to make it the right size.
# But for some reason that didn't work either.
#
# As a "last resort" I just use an array of i64 large enough and hope it's aligned as needed.
def build_union_type(types: LLVMType**, ntypes: int) -> LLVMType*:
    # TODO: in the other compiler I found it compiles faster without this. How about here?
    if ntypes == 1:
        return types[0]

    size_needed: long = 0
    for i = 0; i < ntypes; i++:
        # There are two functions to compute size and I don't know what the difference is.
        size1 = LLVMABISizeOfType(target.target_data, types[i])
        size2 = LLVMStoreSizeOfType(target.target_data, types[i])
        assert size1 == size2
        size_needed = lmax(size_needed, size1)

    return LLVMArrayType(LLVMInt64Type(), ((size_needed + 7) / 8) as int)  # ceil division

def build_class_type(fields: ClassField*, nfields: int) -> LLVMType*:
    elem_types: LLVMType** = malloc(nfields * sizeof elem_types[0])
    for i = 0; i < nfields; i++:
        # Store all pointers in structs as i8*, so that a struct can contain a pointer to itself for example.
        if fields[i].type->kind == TypeKind::Pointer:
            elem_types[i] = LLVMPointerType(LLVMInt8Type(), 0)
        else:
            elem_types[i] = do_type(fields[i].type)

    # Combine together fields of the same union.
    combined_len = 0
    end: int
    for start = 0; start < nfields; start = end:
        end = start + 1
        while end < nfields and fields[start].union_id == fields[end].union_id:
            end++
        elem_types[combined_len++] = build_union_type(&elem_types[start], end-start)

    result = LLVMStructType(elem_types, combined_len, False)
    free(elem_types)
    return result

def do_type(type: Type*) -> LLVMType*:
    if type->is_integer_type():
        return LLVMIntType(type->size_in_bits)
    if type->kind == TypeKind::Pointer:
        return LLVMPointerType(do_type(type->value_type), 0)
    if type->kind == TypeKind::VoidPointer:
        return LLVMPointerType(LLVMInt8Type(), 0)
    if type->kind == TypeKind::Enum:
        return LLVMInt32Type()
    if type->kind == TypeKind::Class:
        return build_class_type(type->class_members.fields, type->class_members.nfields)
    printf("asd-Asd., %s\n", &type->name)
    assert False


class LocalVarNameAndPointer:
    name: byte[100]
    pointer: LLVMValue*

class AstToIR:
    module: LLVMModule*
    builder: LLVMBuilder*
    file_types: FileTypes*  # Results of type-checking

    # Function/method specific fields
    function_or_method_types: FunctionOrMethodTypes*
    llvm_function: LLVMValue*
    local_vars: LocalVarNameAndPointer*
    n_local_vars: int

    def get_local_var_pointer(self, name: byte*) -> LLVMValue*:
        for i = 0; i < self->n_local_vars; i++:
            if strcmp(&self->local_vars[i].name[0], name) == 0:
                return self->local_vars[i].pointer
        assert False

    def declare_function(self, sig: Signature*) -> LLVMValue*:
        # Make it so that this can be called many times without issue
        func = LLVMGetNamedFunction(self->module, &sig->name[0])
        if func != NULL:
            return func

        argtypes: LLVMType** = malloc(sig->nargs * sizeof argtypes[0])
        for i = 0; i < sig->nargs; i++:
            argtypes[i] = do_type(sig->argtypes[i])

        # TODO: tell llvm if we know a function is noreturn
        if sig->return_type == NULL:  # "-> noreturn" or "-> void"
            return_type = LLVMVoidType()
        else:
            return_type = do_type(sig->return_type)

        function_type = LLVMFunctionType(return_type, argtypes, sig->nargs, sig->takes_varargs)
        free(argtypes)

        return LLVMAddFunction(self->module, &sig->name[0], function_type)

    def new_block(self, name_hint: byte*) -> void:
        assert self->llvm_function != NULL
        block = LLVMAppendBasicBlock(self->llvm_function, name_hint)
        LLVMPositionBuilderAtEnd(self->builder, block)

    def make_a_string_constant(self, s: byte*) -> LLVMValue*:
        array = LLVMConstString(s, strlen(s) as int, False)
        global_var = LLVMAddGlobal(self->module, LLVMTypeOf(array), "string_literal")
        LLVMSetLinkage(global_var, LLVMLinkage::Private)  # This makes it a static global variable
        LLVMSetInitializer(global_var, array)

        string_type = LLVMPointerType(LLVMInt8Type(), 0)
        return LLVMBuildBitCast(self->builder, global_var, string_type, "string_ptr")

    def do_cast(self, obj: LLVMValue*, from: Type*, to: Type*) -> LLVMValue*:
        # Treat enums as just integers
        if from->kind == TypeKind::Enum:
            from = int_type
        if to->kind == TypeKind::Enum:
            to = int_type

        if from == to:
            return obj

        if from->is_pointer_type() and to->is_pointer_type():
            return LLVMBuildBitCast(self->builder, obj, do_type(to), "cast_ptr")

        if from->is_integer_type() and to->is_integer_type():
            # Examples:
            #   signed 8-bit 0xFF (-1) --> 16-bit 0xFFFF (-1 or max value)
            #   unsigned 8-bit 0xFF (255) --> 16-bit 0x00FF (255)
            return LLVMBuildIntCast2(self->builder, obj, do_type(to), from->kind == TypeKind::SignedInteger, "cast_int")

        # TODO: float/double <--> integer, float <--> double

        if from == &bool_type and to->is_integer_type():
            # True --> 1, False --> 0
            return LLVMBuildZExt(self->builder, obj, do_type(to), "cast_bool_to_int")

        printf("unimplemented cast: %s --> %s\n", &from->name[0], &to->name[0])
        assert False

    def do_binop(
        self,
        op: AstExpressionKind,
        lhs: LLVMValue*,
        lhs_type: Type*,
        rhs: LLVMValue*,
        rhs_type: Type*,
    ) -> LLVMValue*:
        if lhs_type->kind == TypeKind::Enum:
            lhs_type = int_type
        if rhs_type->kind == TypeKind::Enum:
            rhs_type = int_type

        got_numbers = lhs_type->is_number_type() and rhs_type->is_number_type()
        got_pointers = lhs_type->is_pointer_type() and rhs_type->is_pointer_type()
        assert got_numbers or got_pointers

#        if lhs_type->kind == TYPE_FLOATING_POINT and rhstype->kind == TYPE_FLOATING_POINT:
#            if op == AstExpressionKind::Add:
#                return LLVMBuildFAdd(self->builder, lhs, rhs, "add")
#            if op == AstExpressionKind::Subtract:
#                return LLVMBuildFSub(self->builder, lhs, rhs, "sub")
#            if op == AstExpressionKind::Multiply:
#                return LLVMBuildFMul(self->builder, lhs, rhs, "mul")
#            if op == AstExpressionKind::Divide:
#                return LLVMBuildFDiv(self->builder, lhs, rhs, "div")
#            if op == AstExpressionKind::MOD:
#                return LLVMBuildFRem(self->builder, lhs, rhs, "mod")
#            if op == AstExpressionKind::Eq:
#                return LLVMBuildFCmp(self->builder, LLVMRealOEQ, lhs, rhs, "eq")
#            if op == AstExpressionKind::Ne:
#                return LLVMBuildFCmp(self->builder, LLVMRealONE, lhs, rhs, "ne")
#            if op == AstExpressionKind::Gt:
#                return LLVMBuildFCmp(self->builder, LLVMRealOGT, lhs, rhs, "gt")
#            if op == AstExpressionKind::Ge:
#                return LLVMBuildFCmp(self->builder, LLVMRealOGE, lhs, rhs, "ge")
#            if op == AstExpressionKind::Lt:
#                return LLVMBuildFCmp(self->builder, LLVMRealOLT, lhs, rhs, "lt")
#            if op == AstExpressionKind::Le:
#                return LLVMBuildFCmp(self->builder, LLVMRealOLE, lhs, rhs, "le")
#            assert False

        if lhs_type->is_integer_type() and rhs_type->is_integer_type():
            is_signed = lhs_type->kind == TypeKind::SignedInteger and rhs_type->kind == TypeKind::SignedInteger
            if op == AstExpressionKind::Add:
                return LLVMBuildAdd(self->builder, lhs, rhs, "add")
            if op == AstExpressionKind::Subtract:
                return LLVMBuildSub(self->builder, lhs, rhs, "sub")
            if op == AstExpressionKind::Multiply:
                return LLVMBuildMul(self->builder, lhs, rhs, "mul")
            if op == AstExpressionKind::Divide:
                if is_signed:
                    return build_signed_div(self->builder, lhs, rhs)
                else:
                    return LLVMBuildUDiv(self->builder, lhs, rhs, "div")
            if op == AstExpressionKind::Modulo:
                if is_signed:
                    return build_signed_mod(self->builder, lhs, rhs)
                else:
                    return LLVMBuildURem(self->builder, lhs, rhs, "mod")
            if op == AstExpressionKind::Eq:
                return LLVMBuildICmp(self->builder, LLVMIntPredicate::EQ, lhs, rhs, "eq")
            if op == AstExpressionKind::Ne:
                return LLVMBuildICmp(self->builder, LLVMIntPredicate::NE, lhs, rhs, "ne")
            if op == AstExpressionKind::Gt:
                if is_signed:
                    return LLVMBuildICmp(self->builder, LLVMIntPredicate::SGT, lhs, rhs, "gt")
                else:
                    return LLVMBuildICmp(self->builder, LLVMIntPredicate::UGT, lhs, rhs, "gt")
            if op == AstExpressionKind::Ge:
                if is_signed:
                    return LLVMBuildICmp(self->builder, LLVMIntPredicate::SGE, lhs, rhs, "ge")
                else:
                    return LLVMBuildICmp(self->builder, LLVMIntPredicate::UGE, lhs, rhs, "ge")
            if op == AstExpressionKind::Lt:
                if is_signed:
                    return LLVMBuildICmp(self->builder, LLVMIntPredicate::SLT, lhs, rhs, "lt")
                else:
                    return LLVMBuildICmp(self->builder, LLVMIntPredicate::ULT, lhs, rhs, "lt")
            if op == AstExpressionKind::Le:
                if is_signed:
                    return LLVMBuildICmp(self->builder, LLVMIntPredicate::SLE, lhs, rhs, "le")
                else:
                    return LLVMBuildICmp(self->builder, LLVMIntPredicate::ULE, lhs, rhs, "le")
            assert False

        if lhs_type->is_pointer_type() and rhs_type->is_pointer_type():
            lhs_int = LLVMBuildPtrToInt(self->builder, lhs, LLVMInt64Type(), "ptreq_lhs")
            rhs_int = LLVMBuildPtrToInt(self->builder, rhs, LLVMInt64Type(), "ptreq_rhs")
            if op == AstExpressionKind::Eq:
                return LLVMBuildICmp(self->builder, LLVMIntPredicate::EQ, lhs_int, rhs_int, "ptreq")
            if op == AstExpressionKind::Ne:
                return LLVMBuildICmp(self->builder, LLVMIntPredicate::NE, lhs_int, rhs_int, "ptreq")
            assert False

        printf("%s %d %s\n", &lhs_type->name[0], op, &rhs_type->name[0])
        assert False

    def do_assert(self, condition: LLVMValue*) -> void:
        true_block = LLVMAppendBasicBlock(self->llvm_function, "assert_true")
        false_block = LLVMAppendBasicBlock(self->llvm_function, "assert_false")
        LLVMBuildCondBr(self->builder, condition, true_block, false_block)

        LLVMPositionBuilderAtEnd(self->builder, false_block)

        argtypes = [LLVMPointerType(LLVMInt8Type(), 0), LLVMPointerType(LLVMInt8Type(), 0), LLVMInt32Type()]
        assert_fail_func_type = LLVMFunctionType(LLVMVoidType(), &argtypes[0], 3, False)
        assert_fail_func = LLVMGetNamedFunction(self->module, "_jou_assert_fail")
        if assert_fail_func == NULL:
            assert_fail_func = LLVMAddFunction(self->module, "_jou_assert_fail", assert_fail_func_type)
        assert assert_fail_func != NULL

        args = [
            self->make_a_string_constant("foo"),
            self->make_a_string_constant("bar"),
            LLVMConstInt(LLVMInt32Type(), 123, False),
        ]

        LLVMBuildCall2(self->builder, assert_fail_func_type, assert_fail_func, &args[0], 3, "")
        LLVMPositionBuilderAtEnd(self->builder, true_block)

    def do_incr_decr(self, value_expression: AstExpression*, diff: int) -> LLVMValue*[2]:
        assert diff == 1 or diff == -1
        value_type = self->function_or_method_types->get_expression_types(value_expression)->original_type
        pointer = self->do_address_of_expression(value_expression)

        old_value = LLVMBuildLoad(self->builder, pointer, "old_value")
        if value_type->is_integer_type():
            diff_object = LLVMConstInt(do_type(value_type), diff, True)
            new_value = LLVMBuildAdd(self->builder, old_value, diff_object, "new_value")
        else:
            assert value_type->is_pointer_type()
            diff_object = LLVMConstInt(LLVMInt64Type(), diff, True)
            new_value = LLVMBuildGEP(self->builder, old_value, &diff_object, 1, "new_value")

        LLVMBuildStore(self->builder, new_value, pointer)
        return [old_value, new_value]

    def do_address_of_expression(self, ast: AstExpression*) -> LLVMValue*:
        if ast->kind == AstExpressionKind::GetVariable:
            return self->get_local_var_pointer(&ast->varname[0])
        if ast->kind == AstExpressionKind::GetClassField:
            lhs_type = self->function_or_method_types->get_expression_types(ast->class_field.instance)->original_type

            if ast->class_field.uses_arrow_operator:
                # &foo->bar = foo + some offset
                instance_pointer = self->do_expression(ast->class_field.instance)
                assert lhs_type->kind == TypeKind::Pointer
                class_type = lhs_type->value_type
            else:
                # &foo.bar = &foo + some offset
                instance_pointer = self->do_address_of_expression(ast->class_field.instance)
                class_type = lhs_type

            field = class_type->class_members.find_field(&ast->class_field.field_name[0])
            assert field != NULL
            field_pointer = LLVMBuildStructGEP2(
                self->builder,
                do_type(class_type), instance_pointer,
                field->union_id,
                &field->name[0],
            )

            # This cast is needed for two reasons two cases:
            #   * All pointers are i8* in structs so we can do self-referencing classes.
            #   * This is how unions work.
            return LLVMBuildBitCast(
                self->builder,
                field_pointer, LLVMPointerType(do_type(field->type),0),
                "struct_member_cast",
            )

        printf("kind: %d\n", ast->kind)
        assert False

    def do_expression(self, ast: AstExpression*) -> LLVMValue*:
        type = self->function_or_method_types->get_expression_types(ast)->original_type

        if ast->kind == AstExpressionKind::String:
            result = self->make_a_string_constant(ast->string)
        elif ast->kind == AstExpressionKind::Byte:
            result = LLVMConstInt(LLVMInt8Type(), ast->byte_value, False)
        elif ast->kind == AstExpressionKind::Int:
            result = LLVMConstInt(LLVMInt32Type(), ast->int_value, False)
        elif ast->kind == AstExpressionKind::Long:
            result = LLVMConstInt(LLVMInt64Type(), ast->long_value, False)
        elif ast->kind == AstExpressionKind::Null:
            result = LLVMConstNull(do_type(type))

        elif ast->kind == AstExpressionKind::FunctionCall:
            sig = self->file_types->find_function(&ast->call.called_name[0])
            assert sig != NULL
            function = self->declare_function(sig)
            assert LLVMGetTypeKind(LLVMTypeOf(function)) == LLVMTypeKind::Pointer
            function_type = LLVMGetElementType(LLVMTypeOf(function))
            assert LLVMGetTypeKind(function_type) == LLVMTypeKind::Function

            args: LLVMValue** = malloc(sizeof args[0] * ast->call.nargs)
            for i = 0; i < ast->call.nargs; i++:
                args[i] = self->do_expression(&ast->call.args[i])

            name_hint: byte[100]
            if sig->return_type == NULL:
                strcpy(&name_hint[0], "")
            else:
                sprintf(&name_hint[0], "%.20s_return_value", &sig->name[0])

            result = LLVMBuildCall2(self->builder, function_type, function, args, ast->call.nargs, &name_hint[0])
            free(args)
            if sig->return_type == NULL:
                return NULL

        elif ast->kind == AstExpressionKind::GetEnumMember:
            enum_type = self->file_types->find_type(&ast->enum_member.enum_name[0])
            assert enum_type != NULL
            i = enum_type->enum_members.find_index(&ast->enum_member.member_name[0])
            assert i != -1
            result = LLVMConstInt(LLVMInt32Type(), i, False)
        elif ast->kind == AstExpressionKind::As:
            value = self->do_expression(&ast->as_expression->value)
            type_before_cast = self->function_or_method_types->get_expression_types(&ast->as_expression->value)->original_type
            type_after_cast = self->function_or_method_types->get_expression_types(ast)->original_type
            result = self->do_cast(value, type_before_cast, type_after_cast)

        elif ast->kind == AstExpressionKind::Negate:
            value = self->do_expression(&ast->operands[0])
            result = LLVMBuildNeg(self->builder, value, "negate")

        elif ast->kind == AstExpressionKind::PreIncr:
            old_and_new = self->do_incr_decr(&ast->operands[0], 1)
            result = old_and_new[1]
        elif ast->kind == AstExpressionKind::PostIncr:
            old_and_new = self->do_incr_decr(&ast->operands[0], 1)
            result = old_and_new[0]
        elif ast->kind == AstExpressionKind::PreDecr:
            old_and_new = self->do_incr_decr(&ast->operands[0], -1)
            result = old_and_new[1]
        elif ast->kind == AstExpressionKind::PostDecr:
            old_and_new = self->do_incr_decr(&ast->operands[0], -1)
            result = old_and_new[0]

        elif ast->kind == AstExpressionKind::Instantiate:
            instance_type = self->function_or_method_types->get_expression_types(ast)->original_type
            assert instance_type->kind == TypeKind::Class

            result = LLVMConstNull(do_type(instance_type))

            for i = 0; i < ast->instantiation.nfields; i++:
                field = instance_type->class_members.find_field(&ast->instantiation.field_names[i][0])
                assert field != NULL
                value = self->do_expression(&ast->instantiation.field_values[i])
                result = LLVMBuildInsertValue(self->builder, result, value, field->union_id, "instance")

        elif ast->kind == AstExpressionKind::GetClassField:
            instance = self->do_expression(ast->class_field.instance)
            instance_type = self->function_or_method_types->get_expression_types(ast->class_field.instance)->original_type

            if ast->class_field.uses_arrow_operator:
                instance = LLVMBuildLoad(self->builder, instance, "instance")
                assert instance_type->kind == TypeKind::Class
                instance_type = instance_type->value_type

            field = instance_type->class_members.find_field(&ast->class_field.field_name[0])
            assert field != NULL
            result = LLVMBuildExtractValue(self->builder, instance, field->union_id, &field->name[0])

        elif ast->kind == AstExpressionKind::GetVariable:
            pointer = self->do_address_of_expression(ast)
            result = LLVMBuildLoad(self->builder, pointer, "class_field")

        elif ast->kind == AstExpressionKind::AddressOf:
            result = self->do_address_of_expression(&ast->operands[0])

        elif (
            ast->kind == AstExpressionKind::Add
            or ast->kind == AstExpressionKind::Subtract
            or ast->kind == AstExpressionKind::Multiply
            or ast->kind == AstExpressionKind::Divide
            or ast->kind == AstExpressionKind::Modulo
            or ast->kind == AstExpressionKind::Eq
            or ast->kind == AstExpressionKind::Ne
            or ast->kind == AstExpressionKind::Gt
            or ast->kind == AstExpressionKind::Ge
            or ast->kind == AstExpressionKind::Lt
            or ast->kind == AstExpressionKind::Le
        ):
            lhs = self->do_expression(&ast->operands[0])
            rhs = self->do_expression(&ast->operands[1])
            lhs_type = self->function_or_method_types->get_expression_types(&ast->operands[0])->original_type
            rhs_type = self->function_or_method_types->get_expression_types(&ast->operands[1])->original_type
            result = self->do_binop(ast->kind, lhs, lhs_type, rhs, rhs_type)

        else:
            printf("create_llvm_ir: unknown expression kind %d...\n", ast->kind)
            assert False

        types = self->function_or_method_types->get_expression_types(ast)
        if types->implicit_cast_type == NULL:
            return result
        return self->do_cast(result, types->original_type, types->implicit_cast_type)

    def do_statement(self, ast: AstStatement*) -> void:
        if ast->kind == AstStatementKind::ExpressionStatement:
            self->do_expression(&ast->expression)
        elif ast->kind == AstStatementKind::Return:
            if ast->return_value != NULL:
                return_value = self->do_expression(ast->return_value)
                LLVMBuildRet(self->builder, return_value)
            else:
                LLVMBuildRetVoid(self->builder)
            # If more code follows, place it into a new block that never actually runs
            self->new_block("after_return")
        elif ast->kind == AstStatementKind::Assert:
            condition = self->do_expression(&ast->expression)
            self->do_assert(condition)
        elif ast->kind == AstStatementKind::Assign:
            target_pointer = self->do_address_of_expression(&ast->assignment.target)
            value = self->do_expression(&ast->assignment.value)
            LLVMBuildStore(self->builder, value, target_pointer)
        elif ast->kind == AstStatementKind::DeclareLocalVar:
            if ast->var_declaration.value != NULL:
                target_pointer = self->get_local_var_pointer(&ast->var_declaration.name[0])
                value = self->do_expression(ast->var_declaration.value)
                LLVMBuildStore(self->builder, value, target_pointer)
        elif ast->kind == AstStatementKind::If:
            # TODO: do this properly...
            assert ast->if_statement.n_if_and_elifs == 1
            assert ast->if_statement.else_body.nstatements == 0

            condition = self->do_expression(&ast->if_statement.if_and_elifs[0].condition)
            true_block = LLVMAppendBasicBlock(self->llvm_function, "then")
            done_block = LLVMAppendBasicBlock(self->llvm_function, "if_done")
            LLVMBuildCondBr(self->builder, condition, true_block, done_block)
            LLVMPositionBuilderAtEnd(self->builder, true_block)
            self->do_body(&ast->if_statement.if_and_elifs[0].body)
            LLVMBuildBr(self->builder, done_block)
            LLVMPositionBuilderAtEnd(self->builder, done_block)
        else:
            printf("create_llvm_ir: unknown statement kind %d...\n", ast->kind)
            assert False

    def do_body(self, body: AstBody*) -> void:
        for i = 0; i < body->nstatements; i++:
            self->do_statement(&body->statements[i])

    # The function must already be declared.
    def define_function(self, funcdef: AstFunction*) -> void:
        assert self->function_or_method_types == NULL
        self->function_or_method_types = self->file_types->find_defined_function(&funcdef->signature.name[0])
        assert self->function_or_method_types != NULL

        assert self->llvm_function == NULL
        sig = &self->function_or_method_types->signature
        self->llvm_function = self->declare_function(sig)
        self->new_block("start")

        # Allocate all local variables at the start of the function.
        assert self->n_local_vars == 0
        assert self->local_vars == NULL
        for v = self->function_or_method_types->local_vars; v != NULL; v = v->next:
            self->n_local_vars++
        self->local_vars = malloc(self->n_local_vars * sizeof self->local_vars[0])
        i = 0
        for v = self->function_or_method_types->local_vars; v != NULL; v = v->next:
            self->local_vars[i++] = LocalVarNameAndPointer{
                name = v->name,
                pointer = LLVMBuildAlloca(self->builder, do_type(v->type), &v->name[0]),
            }

        # Place arguments into the first n local variables.
        for i = 0; i < sig->nargs; i++:
            LLVMBuildStore(self->builder, LLVMGetParam(self->llvm_function, i), self->local_vars[i].pointer)

        assert funcdef->body.nstatements > 0  # it is a definition
        self->do_body(&funcdef->body)

        if sig->return_type == NULL:
            LLVMBuildRetVoid(self->builder)
        else:
            LLVMBuildUnreachable(self->builder)

        free(self->local_vars)
        self->local_vars = NULL
        self->n_local_vars = 0
        self->llvm_function = NULL
        self->function_or_method_types = NULL


def create_llvm_ir(ast: AstFile*, ft: FileTypes*) -> LLVMModule*:
    module = LLVMModuleCreateWithName(ast->path)
    LLVMSetTarget(module, &target.triple[0])
    LLVMSetDataLayout(module, &target.data_layout[0])

    a2i = AstToIR{
        module = module,
        builder = LLVMCreateBuilder(),
        file_types = ft
    }

    for i = 0; i < ast->body_len; i++:
        if ast->body[i].kind == AstToplevelStatementKind::Function and ast->body[i].function.body.nstatements > 0:
            a2i.define_function(&ast->body[i].function)

    LLVMDisposeBuilder(a2i.builder)
    return module
