# LLVM makes a mess of how to define what kind of computer will run the
# compiled programs. Sometimes it wants a target triple, sometimes a
# data layout. Sometimes it wants a string, sometimes an object
# representing the thing.
#
# This file aims to provide everything you may ever need. Hopefully it
# will make the mess slightly less miserable to you. Just use the global
# "target" variable, it contains everything you will ever need.

from "./llvm.jou" import (
    LLVMTarget,
    LLVMTargetMachine,
    LLVMTargetData,
    LLVMInitializeX86TargetInfo,
    LLVMInitializeX86Target,
    LLVMInitializeX86TargetMC,
    LLVMInitializeX86AsmParser,
    LLVMInitializeX86AsmPrinter,
    LLVMGetDefaultTargetTriple,
    LLVMGetTargetFromTriple,
    LLVMDisposeMessage,
    LLVMCreateTargetMachine,
    LLVMCodeModel,
    LLVMCodeGenOptLevel,
    LLVMRelocMode,
    LLVMCreateTargetDataLayout,
    LLVMCopyStringRepOfTargetData,
)
from "./find_jou_installation.jou" import is_windows
from "./errors_and_warnings.jou" import assert
from "stdlib/str.jou" import strcpy, strlen
from "stdlib/io.jou" import fprintf, stderr
from "stdlib/process.jou" import exit

class Target:
    triple: byte[100]
    data_layout: byte[500]
    target: LLVMTarget*
    target_machine: LLVMTargetMachine*
    target_data: LLVMTargetData*

global target: Target

# TODO: run this with atexit() once we have function pointers
#def cleanup() -> void:
#    LLVMDisposeTargetMachine(target.target_machine)
#    LLVMDisposeTargetData(target.target_data)

def init_target() -> void:
    LLVMInitializeX86TargetInfo()
    LLVMInitializeX86Target()
    LLVMInitializeX86TargetMC()
    LLVMInitializeX86AsmParser()
    LLVMInitializeX86AsmPrinter()

    if is_windows():
        # LLVM's default is x86_64-pc-windows-msvc
        strcpy(&target.triple[0], "x86_64-pc-windows-gnu")
    else:
        triple = LLVMGetDefaultTargetTriple()
        assert(strlen(triple) < sizeof target.triple)
        strcpy(&target.triple[0], triple)
        LLVMDisposeMessage(triple)

    error: byte* = NULL
    if LLVMGetTargetFromTriple(&target.triple[0], &target.target, &error):
        assert(error != NULL)
        fprintf(stderr, "LLVMGetTargetFromTriple(\"%s\") failed: %s\n", &target.triple[0], error)
        exit(1)
    assert(error == NULL)
    assert(target.target != NULL)

    target.target_machine = LLVMCreateTargetMachine(
        target.target,
        &target.triple[0],
        "x86-64",
        "",
        LLVMCodeGenOptLevel::Default,
        LLVMRelocMode::Default,
        LLVMCodeModel::Default,
    )
    assert(target.target_machine != NULL)

    target.target_data = LLVMCreateTargetDataLayout(target.target_machine)
    assert(target.target_data != NULL)

    tmp = LLVMCopyStringRepOfTargetData(target.target_data)
    assert(strlen(tmp) < sizeof target.data_layout)
    strcpy(&target.data_layout[0], tmp)
    LLVMDisposeMessage(tmp)
