import "stdlib/str.jou"
import "stdlib/mem.jou"
import "./token.jou"
import "./ast.jou"
import "./errors_and_warnings.jou"
import "./paths.jou"

def parse_type(tokens: Token**) -> AstType:
    if not (
        (*tokens)->kind == TokenKind::Name
        or (*tokens)->is_keyword("int")
        or (*tokens)->is_keyword("long")
        or (*tokens)->is_keyword("bool")
        or (*tokens)->is_keyword("byte")
        or (*tokens)->is_keyword("void")
        or (*tokens)->is_keyword("noreturn")
    ):
        (*tokens)->fail_expected_got("a type")

    result = AstType{
        kind = AstTypeKind::Named,
        location = (*tokens)->location,
        name = (*tokens)->short_string,
    }
    ++*tokens

    while (*tokens)->is_operator("*"):
        p: AstType* = malloc(sizeof *p)
        *p = result
        result = AstType{
            location = ((*tokens)++)->location,  # TODO: shouldn't need all the parentheses
            kind = AstTypeKind::Pointer,
            value_type = p,
        }

    return result

def parse_name_type_value(tokens: Token**, expected_what_for_name: byte*) -> AstNameTypeValue:
    if (*tokens)->kind != TokenKind::Name:
        assert expected_what_for_name != NULL
        (*tokens)->fail_expected_got(expected_what_for_name)

    result = AstNameTypeValue{name = (*tokens)->short_string, name_location = (*tokens)->location}
    ++*tokens

    if not (*tokens)->is_operator(":"):
        (*tokens)->fail_expected_got("':' and a type after it (example: \"foo: int\")")
    ++*tokens
    result.type = parse_type(tokens)

    if (*tokens)->is_operator("="):
        ++*tokens
        p: AstExpression* = malloc(sizeof *p)
        *p = parse_expression(tokens)
        result.value = p

    return result

def parse_function_or_method_signature(tokens: Token**, is_method: bool) -> AstSignature:
    # TODO: change error messages to say method, when it is a method (#243)
    if (*tokens)->kind != TokenKind::Name:
        (*tokens)->fail_expected_got("a function name")

    result = AstSignature{
        name_location = (*tokens)->location,
        name = (*tokens)->short_string,
    }
    ++*tokens

    if not (*tokens)->is_operator("("):
        (*tokens)->fail_expected_got("a '(' to denote the start of function arguments")
    ++*tokens

    while not (*tokens)->is_operator(")"):
        if result.takes_varargs:
            fail((*tokens)->location, "if '...' is used, it must be the last parameter")

        if (*tokens)->is_operator("..."):
            result.takes_varargs = True
            ++*tokens

        elif (*tokens)->is_keyword("self"):
            the_self: byte[100]
            strcpy(&the_self[0], "self")
            result.args = realloc(result.args, sizeof result.args[0] * (result.nargs+1))
            result.args[result.nargs++] = AstNameTypeValue{
                name = the_self,
                name_location = (*tokens)->location,
            }
            ++*tokens

        else:
            arg = parse_name_type_value(tokens, "an argument name")
            if arg.value != NULL:
                fail(arg.value->location, "arguments cannot have default values")

            for i = 0; i < result.nargs; i++:
                if strcmp(&result.args[i].name[0], &arg.name[0]) == 0:
                    message: byte[200]
                    snprintf(
                        &message[0], sizeof message,
                        "there are multiple arguments named '%s'",
                        &arg.name[0])
                    fail(arg.name_location, &message[0])

            result.args = realloc(result.args, sizeof result.args[0] * (result.nargs+1))
            result.args[result.nargs++] = arg

        if not (*tokens)->is_operator(","):
            break
        ++*tokens

    if not (*tokens)->is_operator(")"):
        (*tokens)->fail_expected_got("a ')'")
    ++*tokens

    # TODO:
    #   * If is_method, ensure that self parameter exists and is first
    #   * Else, ensure that self parameter does not exists

    # Special case for common typo:   def foo():
    if (*tokens)->is_operator(":"):
        fail((*tokens)->location, "return type must be specified with '->', or with '-> void' if the function doesn't return anything")
    if not (*tokens)->is_operator("->"):
        (*tokens)->fail_expected_got("a '->'")
    ++*tokens

    result.return_type = parse_type(tokens)
    return result

def parse_import_path(path_token: Token*, stdlib_path: byte*) -> AstImport:
    if path_token->kind != TokenKind::String:
        path_token->fail_expected_got("a string to specify the file name")

    if starts_with(path_token->long_string, "stdlib/"):
        # Starts with stdlib --> import from where stdlib actually is
        tmp = NULL
        part1 = stdlib_path
        part2 = &path_token->long_string[7]
    elif starts_with(path_token->long_string, "."):
        # Relative to directory where the file is
        tmp = strdup(path_token->location.path)
        part1 = dirname(tmp)
        part2 = path_token->long_string
    else:
        fail(
            path_token->location,
            "import path must start with 'stdlib/' (standard-library import) or a dot (relative import)"
        )

    # 1 for slash, 1 for \0, 1 for fun
    path = malloc(strlen(part1) + strlen(part2) + 3)
    sprintf(path, "%s/%s", part1, part2)
    free(tmp)

    simplify_path(path)
    return AstImport{
        specified_path = strdup(path_token->long_string),
        resolved_path = path,
    }

def parse_call(tokens: Token**) -> AstCall:
    assert (*tokens)->kind == TokenKind::Name  # must be checked when calling this function
    result = AstCall{location = (*tokens)->location, called_name = (*tokens)->short_string}
    ++*tokens
    assert (*tokens)->is_operator("(")
    ++*tokens

    while not (*tokens)->is_operator(")"):
        result.args = realloc(result.args, sizeof result.args[0] * (result.nargs+1))
        result.args[result.nargs++] = parse_expression(tokens)
        if not (*tokens)->is_operator(","):
            break
        ++*tokens

    if not (*tokens)->is_operator(")"):
        (*tokens)->fail_expected_got("a ')'")
    ++*tokens

    return result

def parse_instantiation(tokens: Token**) -> AstInstantiation:
    assert (*tokens)->kind == TokenKind::Name  # must be checked when calling this function
    result = AstInstantiation{class_name_location = (*tokens)->location, class_name = (*tokens)->short_string}
    ++*tokens
    assert (*tokens)->is_operator("{")
    ++*tokens

    while not (*tokens)->is_operator("}"):
        if (*tokens)->kind != TokenKind::Name:
            (*tokens)->fail_expected_got("a field name")
        field_name = (*tokens)->short_string
        for i = 0; i < result.nfields; i++:
            if strcmp(&result.field_names[i][0], &field_name[0]) == 0:
                error: byte[500]
                snprintf(&error[0], sizeof error, "multiple values were given for field '%s'", &field_name[0])
                fail((*tokens)->location, &error[0])
        result.field_names = realloc(result.field_names, (result.nfields + 1) * sizeof result.field_names[0])
        result.field_names[result.nfields] = field_name
        ++*tokens

        if not (*tokens)->is_operator("="):
            msg: byte[300]
            snprintf(&msg[0], sizeof msg, "'=' followed by a value for field '%s'", &field_name[0])
            (*tokens)->fail_expected_got(&msg[0])
        ++*tokens

        result.field_values = realloc(result.field_values, sizeof result.field_values[0] * (result.nfields+1))
        result.field_values[result.nfields] = parse_expression(tokens)

        result.nfields++
        if not (*tokens)->is_operator(","):
            break
        ++*tokens

    if not (*tokens)->is_operator("}"):
        (*tokens)->fail_expected_got("a '}'")
    ++*tokens

    return result

def parse_elementary_expression(tokens: Token**) -> AstExpression:
    expr = AstExpression{location = (*tokens)->location}

    if (*tokens)->kind == TokenKind::Int:
        expr.kind = AstExpressionKind::Int
        expr.int_value = (*tokens)->int_value
        ++*tokens
    elif (*tokens)->kind == TokenKind::Long:
        expr.kind = AstExpressionKind::Long
        expr.long_value = (*tokens)->long_value
        ++*tokens
    elif (*tokens)->kind == TokenKind::Byte:
        expr.kind = AstExpressionKind::Byte
        expr.byte_value = (*tokens)->byte_value
        ++*tokens
    elif (*tokens)->kind == TokenKind::String:
        expr.kind = AstExpressionKind::String
        expr.string = strdup((*tokens)->long_string)
        ++*tokens
    elif (*tokens)->is_keyword("True"):
        expr.kind = AstExpressionKind::Bool
        expr.bool_value = True
        ++*tokens
    elif (*tokens)->is_keyword("False"):
        expr.kind = AstExpressionKind::Bool
        expr.bool_value = False
        ++*tokens
    elif (*tokens)->is_keyword("NULL"):
        expr.kind = AstExpressionKind::Null
        ++*tokens
    elif (*tokens)->is_keyword("self"):
        expr.kind = AstExpressionKind::Self
        ++*tokens
    elif (*tokens)->kind == TokenKind::Name:
        if (*tokens)[1].is_operator("("):
            expr.kind = AstExpressionKind::FunctionCall
            expr.call = parse_call(tokens)
        elif (*tokens)[1].is_operator("{"):
            expr.kind = AstExpressionKind::Instantiate
            expr.instantiation = parse_instantiation(tokens)
        elif (*tokens)[1].is_operator("::") and (*tokens)[2].kind == TokenKind::Name:
            expr.kind = AstExpressionKind::GetEnumMember
            expr.enum_member = AstEnumMember{
                enum_name = (*tokens)->short_string,
                member_name = (*tokens)[2].short_string,
            }
            ++*tokens
            ++*tokens
            ++*tokens
        else:
            expr.kind = AstExpressionKind::GetVariable
            expr.varname = (*tokens)->short_string
            ++*tokens
    elif (*tokens)->is_operator("("):
        ++*tokens
        expr = parse_expression(tokens)
        if not (*tokens)->is_operator(")"):
            (*tokens)->fail_expected_got("a ')'")
        ++*tokens
    else:
        (*tokens)->fail_expected_got("an expression")

    return expr

def parse_expression_with_fields_and_methods_and_indexing(tokens: Token**) -> AstExpression:
    result = parse_elementary_expression(tokens)

    # TODO: indexing foo[bar]
    while (*tokens)->is_operator(".") or (*tokens)->is_operator("->"):
        start_op = (*tokens)++
        if (*tokens)->kind != TokenKind::Name:
            (*tokens)->fail_expected_got("a field or method name")

        assert not (*tokens)[1].is_operator("(")  # TODO

        instance: AstExpression* = malloc(sizeof *instance)
        *instance = result
        result = AstExpression{
            location = (*tokens)->location,
            kind = AstExpressionKind::GetClassField,
            class_field = AstClassField{
                instance = instance,
                uses_arrow_operator = start_op->is_operator("->"),
                field_name = (*tokens)->short_string,
            },
        }
        ++*tokens

    return result

# arity = number of operands, e.g. 2 for a binary operator such as "+"
#
# This cannot be used for ++ and --, because with them we can't know the kind from
# just the token (e.g. ++ could mean pre-increment or post-increment).
def build_operator_expression(t: Token*, arity: int, operands: AstExpression*) -> AstExpression:
    assert arity == 1 or arity == 2
    nbytes = arity * sizeof operands[0]
    ptr = malloc(nbytes)
    memcpy(ptr, operands, nbytes)

    result = AstExpression{location = t->location, operands = ptr}

    if t->is_operator("&"):
        assert arity == 1
        result.kind = AstExpressionKind::AddressOf
    elif t->is_operator("["):
        assert arity == 2
        result.kind = AstExpressionKind::Indexing
    elif t->is_operator("=="):
        assert arity == 2
        result.kind = AstExpressionKind::Eq
    elif t->is_operator("!="):
        assert arity == 2
        result.kind = AstExpressionKind::Ne
    elif t->is_operator(">"):
        assert arity == 2
        result.kind = AstExpressionKind::Gt
    elif t->is_operator(">="):
        assert arity == 2
        result.kind = AstExpressionKind::Ge
    elif t->is_operator("<"):
        assert arity == 2
        result.kind = AstExpressionKind::Lt
    elif t->is_operator("<="):
        assert arity == 2
        result.kind = AstExpressionKind::Le
    elif t->is_operator("+"):
        assert arity == 2
        result.kind = AstExpressionKind::Add
    elif t->is_operator("-"):
        if arity == 2:
            result.kind = AstExpressionKind::Subtract
        else:
            result.kind = AstExpressionKind::Negate
    elif t->is_operator("*"):
        if arity == 2:
            result.kind = AstExpressionKind::Multiply
        else:
            result.kind = AstExpressionKind::Dereference
    elif t->is_operator("/"):
        assert arity == 2
        result.kind = AstExpressionKind::Divide
    elif t->is_operator("%"):
        assert arity == 2
        result.kind = AstExpressionKind::Modulo
    elif t->is_keyword("and"):
        assert arity == 2
        result.kind = AstExpressionKind::And
    elif t->is_keyword("or"):
        assert arity == 2
        result.kind = AstExpressionKind::Or
    elif t->is_keyword("not"):
        assert arity == 1
        result.kind = AstExpressionKind::Not
    else:
        assert False

    assert result.get_arity() == arity
    return result

def parse_expression_with_unary_operators(tokens: Token**) -> AstExpression:
    # prefix = sequneces of 0 or more unary operator tokens: start,start+1,...,end-1
    prefix_start = *tokens
    while (
        (*tokens)->is_operator("++")
        or (*tokens)->is_operator("--")
        or (*tokens)->is_operator("&")
        or (*tokens)->is_operator("*")
        or (*tokens)->is_keyword("sizeof")
    ):
        ++*tokens
    prefix_end = *tokens

    result = parse_expression_with_fields_and_methods_and_indexing(tokens)

    suffix_start = *tokens
    while (*tokens)->is_operator("++") or (*tokens)->is_operator("--"):
        ++*tokens
    suffix_end = *tokens

    while prefix_start != prefix_end or suffix_start != suffix_end:
        # ++ and -- "bind tighter", so *foo++ is equivalent to *(foo++)
        # It is implemented by always consuming ++/-- prefixes and suffixes when they exist.
        if prefix_start != prefix_end and prefix_end[-1].is_operator("++"):
            token = --prefix_end
            kind = AstExpressionKind::PreIncr
        elif prefix_start != prefix_end and prefix_end[-1].is_operator("--"):
            token = --prefix_end
            kind = AstExpressionKind::PreDecr
        elif suffix_start != suffix_end and suffix_start[0].is_operator("++"):
            token = suffix_start++
            kind = AstExpressionKind::PostIncr
        elif suffix_start != suffix_end and suffix_start[0].is_operator("--"):
            token = suffix_start++
            kind = AstExpressionKind::PostDecr
        else:
            # We don't have ++ or --, so it must be something in the prefix
            assert prefix_start != prefix_end and suffix_start == suffix_end
            token = --prefix_end
            if token->is_operator("*"):
                kind = AstExpressionKind::Dereference
            elif token->is_operator("&"):
                kind = AstExpressionKind::AddressOf
            elif token->is_keyword("sizeof"):
                kind = AstExpressionKind::SizeOf
            else:
                assert False

        p: AstExpression* = malloc(sizeof(*p))
        *p = result
        result = AstExpression{location = token->location, kind = kind, operands = p}

    return result

def parse_expression_with_mul_and_div(tokens: Token**) -> AstExpression:
    result = parse_expression_with_unary_operators(tokens)
    while (*tokens)->is_operator("*") or (*tokens)->is_operator("/") or (*tokens)->is_operator("%"):
        t = (*tokens)++
        lhs_rhs = [result, parse_expression_with_unary_operators(tokens)]
        result = build_operator_expression(t, 2, &lhs_rhs[0])
    return result

def parse_expression_with_add(tokens: Token**) -> AstExpression:
    if (*tokens)->is_operator("-"):
        minus = (*tokens)++
    else:
        minus = NULL

    result = parse_expression_with_mul_and_div(tokens)
    if minus != NULL:
        result = build_operator_expression(minus, 1, &result)

    while (*tokens)->is_operator("+") or (*tokens)->is_operator("-"):
        t = (*tokens)++
        lhs_rhs = [result, parse_expression_with_mul_and_div(tokens)]
        result = build_operator_expression(t, 2, &lhs_rhs[0])

    return result

# "as" operator has somewhat low precedence, so that "1+2 as float" works as expected
def parse_expression_with_as(tokens: Token**) -> AstExpression:
    result = parse_expression_with_add(tokens)
    while (*tokens)->is_keyword("as"):
        as_location = ((*tokens)++)->location  # TODO: shouldn't need so many parentheses
        p: AstAsExpression* = malloc(sizeof(*p))
        *p = AstAsExpression{type = parse_type(tokens), value = result}
        result = AstExpression{
            location = as_location,
            kind = AstExpressionKind::As,
            as_expression = p,
        }
    return result

def parse_expression_with_comparisons(tokens: Token**) -> AstExpression:
    result = parse_expression_with_as(tokens)
    if (*tokens)->is_comparison():
        t = (*tokens)++
        lhs_rhs = [result, parse_expression_with_as(tokens)]
        result = build_operator_expression(t, 2, &lhs_rhs[0])
    if (*tokens)->is_comparison():
        fail((*tokens)->location, "comparisons cannot be chained")
    return result

def parse_expression_with_not(tokens: Token**) -> AstExpression:
    if (*tokens)->is_keyword("not"):
        not_token = *tokens
        ++*tokens
    else:
        not_token = NULL

    if (*tokens)->is_keyword("not"):
        fail((*tokens)->location, "'not' cannot be repeated")

    result = parse_expression_with_comparisons(tokens)
    if not_token != NULL:
        result = build_operator_expression(not_token, 1, &result)
    return result

def parse_expression_with_and_or(tokens: Token**) -> AstExpression:
    result = parse_expression_with_not(tokens)
    got_and = False
    got_or = False

    while True:
        if (*tokens)->is_keyword("and"):
            got_and = True
        elif (*tokens)->is_keyword("or"):
            got_or = True
        else:
            break
        if got_and and got_or:
            fail((*tokens)->location, "'and' cannot be chained with 'or', you need more parentheses")

        t = (*tokens)++
        lhs_rhs = [result, parse_expression_with_not(tokens)]
        result = build_operator_expression(t, 2, &lhs_rhs[0])

    return result

def parse_expression(tokens: Token**) -> AstExpression:
    return parse_expression_with_and_or(tokens)

# reverse code golfing: https://xkcd.com/1960/
def determine_the_kind_of_a_statement_that_starts_with_an_expression(
    this_token_is_after_that_initial_expression: Token*
) -> AstStatementKind:
    if this_token_is_after_that_initial_expression->is_operator("="):
        return AstStatementKind::Assign
    if this_token_is_after_that_initial_expression->is_operator("+="):
        return AstStatementKind::InPlaceAdd
    if this_token_is_after_that_initial_expression->is_operator("-="):
        return AstStatementKind::InPlaceSubtract
    if this_token_is_after_that_initial_expression->is_operator("*="):
        return AstStatementKind::InPlaceMultiply
    if this_token_is_after_that_initial_expression->is_operator("/="):
        return AstStatementKind::InPlaceDivide
    if this_token_is_after_that_initial_expression->is_operator("%="):
        return AstStatementKind::InPlaceModulo
    return AstStatementKind::ExpressionStatement

# does not eat a trailing newline
def parse_oneline_statement(tokens: Token**) -> AstStatement:
    result = AstStatement{ location = (*tokens)->location }
    if (*tokens)->is_keyword("return"):
        ++*tokens
        result.kind = AstStatementKind::Return
        if (*tokens)->kind != TokenKind::Newline:
            result.return_value = malloc(sizeof *result.return_value)
            *result.return_value = parse_expression(tokens)
    elif (*tokens)->is_keyword("assert"):
        ++*tokens
        result.kind = AstStatementKind::Assert
        result.expression = parse_expression(tokens)
    elif (*tokens)->is_keyword("break"):
        ++*tokens
        result.kind = AstStatementKind::Break
    elif (*tokens)->is_keyword("continue"):
        ++*tokens
        result.kind = AstStatementKind::Continue
    elif (*tokens)->kind == TokenKind::Name and (*tokens)[1].is_operator(":"):
        # "foo: int" creates a variable "foo" of type "int"
        result.kind = AstStatementKind::DeclareLocalVar
        result.var_declaration = parse_name_type_value(tokens, NULL)
    else:
        expr = parse_expression(tokens)
        result.kind = determine_the_kind_of_a_statement_that_starts_with_an_expression(*tokens)
        if result.kind == AstStatementKind::ExpressionStatement:
            if not expr.can_have_side_effects():
                fail(expr.location, "not a valid statement")
            result.expression = expr
        else:
            ++*tokens
            result.assignment = AstAssignment{target = expr, value = parse_expression(tokens)}
            if (*tokens)->is_operator("="):
                # Would fail elsewhere anyway, but let's make the error message clear
                fail((*tokens)->location, "only one variable can be assigned at a time")

    return result

def parse_if_statement(tokens: Token**) -> AstIfStatement:
    ifs_and_elifs: AstConditionAndBody* = NULL
    n = 0

    assert (*tokens)->is_keyword("if")
    while True:
        ++*tokens
        cond = parse_expression(tokens)
        body = parse_body(tokens)
        ifs_and_elifs = realloc(ifs_and_elifs, sizeof ifs_and_elifs[0] * (n+1))
        ifs_and_elifs[n++] = AstConditionAndBody{condition = cond, body = body}
        if not (*tokens)->is_keyword("elif"):
            break

    if (*tokens)->is_keyword("else"):
        ++*tokens
        else_body = parse_body(tokens)
    else:
        else_body = AstBody{}

    return AstIfStatement{
        if_and_elifs = ifs_and_elifs,
        n_if_and_elifs = n,
        else_body = else_body,
    }

def parse_while_loop(tokens: Token**) -> AstConditionAndBody:
    assert (*tokens)->is_keyword("while")
    ++*tokens
    cond = parse_expression(tokens)
    body = parse_body(tokens)
    return AstConditionAndBody{condition = cond, body = body}

def parse_for_loop(tokens: Token**) -> AstForLoop:
    assert (*tokens)->is_keyword("for")
    ++*tokens

    init: AstStatement* = malloc(sizeof *init)
    incr: AstStatement* = malloc(sizeof *incr)

    *init = parse_oneline_statement(tokens)
    if not (*tokens)->is_operator(";"):
        (*tokens)->fail_expected_got("a ';'")
    ++*tokens
    cond = parse_expression(tokens)
    if not (*tokens)->is_operator(";"):
        (*tokens)->fail_expected_got("a ';'")
    ++*tokens
    *incr = parse_oneline_statement(tokens)

    return AstForLoop{
        init = init,
        cond = cond,
        incr = incr,
        body = parse_body(tokens),
    }

def eat_newline(tokens: Token**) -> void:
    if (*tokens)->kind != TokenKind::Newline:
        (*tokens)->fail_expected_got("end of line")
    ++*tokens

def parse_statement(tokens: Token**) -> AstStatement:
    if (*tokens)->is_keyword("if"):
        return AstStatement{
            location = (*tokens)->location,
            kind = AstStatementKind::If,
            if_statement = parse_if_statement(tokens),
        }
    if (*tokens)->is_keyword("for"):
        return AstStatement{
            location = (*tokens)->location,
            kind = AstStatementKind::ForLoop,
            for_loop = parse_for_loop(tokens),
        }
    if (*tokens)->is_keyword("while"):
        return AstStatement{
            location = (*tokens)->location,
            kind = AstStatementKind::WhileLoop,
            while_loop = parse_while_loop(tokens),
        }
    result = parse_oneline_statement(tokens)
    eat_newline(tokens)
    return result

def parse_start_of_body(tokens: Token**) -> void:
    if not (*tokens)->is_operator(":"):
        (*tokens)->fail_expected_got("':' followed by a new line with more indentation")
    ++*tokens

    if (*tokens)->kind != TokenKind::Newline:
        (*tokens)->fail_expected_got("a new line with more indentation after ':'")
    ++*tokens

    if (*tokens)->kind != TokenKind::Indent:
        (*tokens)->fail_expected_got("more indentation after ':'")
    ++*tokens

def parse_body(tokens: Token**) -> AstBody:
    parse_start_of_body(tokens)

    result: AstStatement* = NULL
    n = 0
    while (*tokens)->kind != TokenKind::Dedent:
        result = realloc(result, sizeof result[0] * (n+1))
        result[n++] = parse_statement(tokens)
    ++*tokens

    return AstBody{ statements = result, nstatements = n }

def parse_function_or_method(tokens: Token**, is_method: bool) -> AstFunctionOrMethod:
    assert (*tokens)->is_keyword("def")
    ++*tokens

    signature = parse_function_or_method_signature(tokens, is_method)
    if signature.takes_varargs:
        fail((*tokens)->location, "functions with variadic arguments cannot be defined yet")

    return AstFunctionOrMethod{
        signature = signature,
        body = parse_body(tokens),
    }

class MemberInfo:
    kind: byte*
    name: byte[100]
    name_location: Location

def check_class_for_duplicate_names(classdef: AstClassDef*) -> void:
    n = 0
    for i = 0; i < classdef->nmembers; i++:
        member = &classdef->members[i]
        # We will make a separate MemberInfo for each union field
        if member->kind == AstClassMemberKind::Union:
            n += member->union_fields.nfields
        else:
            n++

    infos: MemberInfo* = malloc(n * sizeof infos[0] * 1000)
    destptr: MemberInfo* = infos

    for i = 0; i < classdef->nmembers; i++:
        member = &classdef->members[i]
        if member->kind == AstClassMemberKind::Field:
            *destptr++ = MemberInfo{
                kind = "a field",
                name = member->field.name,
                name_location = member->field.name_location,
            }
        elif member->kind == AstClassMemberKind::Union:
            for k = 0; k < member->union_fields.nfields; k++:
                *destptr++ = MemberInfo{
                    kind = "a union member",
                    name = member->union_fields.fields[k].name,
                    name_location = member->union_fields.fields[k].name_location,
                }
        elif member->kind == AstClassMemberKind::Method:
            *destptr++ = MemberInfo{
                kind = "a method",
                name = member->method.signature.name,
                name_location = member->method.signature.name_location,
            }
        else:
            assert False

    assert destptr == &infos[n]

    for p1 = infos; p1 != destptr; p1++:
        for p2 = &p1[1]; p2 != destptr; p2++:
            if strcmp(&p1->name[0], &p2->name[0]) == 0:
                message: byte[500]
                snprintf(
                    &message[0], sizeof message,
                    "class %s already has %s named '%s'",
                    &classdef->name[0], p1->kind, &p1->name[0],
                )
                fail(p2->name_location, &message[0])

def parse_class(tokens: Token**) -> AstClassDef:
    assert (*tokens)->is_keyword("class")
    ++*tokens

    if (*tokens)->kind != TokenKind::Name:
        (*tokens)->fail_expected_got("a name for the class")

    result = AstClassDef{name = ((*tokens)++)->short_string}

    parse_start_of_body(tokens)
    while (*tokens)->kind != TokenKind::Dedent:
        if (*tokens)->is_keyword("def"):
            new_member = AstClassMember{
                kind = AstClassMemberKind::Method,
                method = parse_function_or_method(tokens, True),
            }

        elif (*tokens)->is_keyword("union"):
            union_keyword_location = ((*tokens)++)->location
            parse_start_of_body(tokens)

            union_fields = AstUnionFields{}
            while (*tokens)->kind != TokenKind::Dedent:
                field = parse_name_type_value(tokens, "a union member")
                if field.value != NULL:
                    fail(field.value->location, "union members cannot have default values")

                union_fields.fields = realloc(union_fields.fields, (union_fields.nfields + 1) * sizeof union_fields.fields[0])
                union_fields.fields[union_fields.nfields++] = field
                eat_newline(tokens)

            ++*tokens

            if union_fields.nfields < 2:
                fail(union_keyword_location, "unions must have at least 2 members")

            new_member = AstClassMember{
                kind = AstClassMemberKind::Union,
                union_fields = union_fields,
            }

        else:
            field = parse_name_type_value(tokens, "a method, a field or a union")
            if field.value != NULL:
                fail(field.value->location, "class fields cannot have default values")
            new_member = AstClassMember{
                kind = AstClassMemberKind::Field,
                field = field,
            }
            eat_newline(tokens)

        result.members = realloc(result.members, (result.nmembers + 1) * sizeof result.members[0])
        result.members[result.nmembers++] = new_member

    ++*tokens
    check_class_for_duplicate_names(&result)
    return result

def parse_enum(tokens: Token**) -> AstEnumDef:
    assert (*tokens)->is_keyword("enum")
    ++*tokens

    if (*tokens)->kind != TokenKind::Name:
        (*tokens)->fail_expected_got("a name for the enum")

    result = AstEnumDef{name = ((*tokens)++)->short_string}

    parse_start_of_body(tokens)
    while (*tokens)->kind != TokenKind::Dedent:
        if (*tokens)->kind != TokenKind::Name:
            (*tokens)->fail_expected_got("a name for an enum member")
        result.member_names = realloc(result.member_names, sizeof result.member_names[0] * (result.member_count + 1))
        result.member_names[result.member_count++] = (*tokens)->short_string
        ++*tokens
        eat_newline(tokens)

    ++*tokens
    return result

def parse_toplevel_node(tokens: Token**, stdlib_path: byte*) -> AstToplevelStatement:
    ts = AstToplevelStatement{location = (*tokens)->location}

    if (*tokens)->is_keyword("import"):
        ++*tokens
        ts.the_import = parse_import_path(*tokens, stdlib_path)
        ++*tokens
        eat_newline(tokens)

    elif (*tokens)->is_keyword("def"):
        ts.kind = AstToplevelStatementKind::Function
        ts.function = parse_function_or_method(tokens, False)

    elif (*tokens)->is_keyword("declare"):
        ++*tokens
        if (*tokens)->is_keyword("global"):
            ++*tokens
            ts.kind = AstToplevelStatementKind::GlobalVariableDeclaration
            ts.global_var = parse_name_type_value(tokens, "a variable name")
            if ts.global_var.value != NULL:
                fail(
                    ts.global_var.value->location,
                    "a value cannot be given when declaring a global variable",
                )
        else:
            ts.kind = AstToplevelStatementKind::Function
            ts.function.signature = parse_function_or_method_signature(tokens, False)
        eat_newline(tokens)

    elif (*tokens)->is_keyword("class"):
        ts.kind = AstToplevelStatementKind::Class
        ts.classdef = parse_class(tokens)

    elif (*tokens)->is_keyword("enum"):
        ts.kind = AstToplevelStatementKind::Enum
        ts.enumdef = parse_enum(tokens)

    else:
        (*tokens)->fail_expected_got("a definition or declaration")

    return ts

def parse(tokens: Token*, stdlib_path: byte*) -> AstFile:
    result = AstFile{path = tokens[0].location.path}
    while tokens->kind != TokenKind::EndOfFile:
        result.body = realloc(result.body, sizeof result.body[0] * (result.body_len + 1))
        result.body[result.body_len++] = parse_toplevel_node(&tokens, stdlib_path)

    # This simplifies the compiler: it's easy to loop through all imports of the file.
    for p = &result.body[1]; p != &result.body[result.body_len]; p++:
        if p[-1].kind != AstToplevelStatementKind::Import and p->kind == AstToplevelStatementKind::Import:
            fail(p->location, "imports must be in the beginning of the file")

    return result
