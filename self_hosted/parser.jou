from "stdlib/str.jou" import strlen, sprintf, strdup, starts_with
from "stdlib/mem.jou" import malloc, realloc
from "./token.jou" import Token, TokenKind
from "./ast.jou" import (
    AstType, AstTypeKind, AstNameTypeValue, AstSignature,
    AstCall,
    AstExpression, AstExpressionKind,
    AstStatement, AstStatementKind, AstBody,
    AstFunctionDef, AstClassDef,
    AstToplevelStatement, AstToplevelStatementKind,
    AstFile,
)
from "./errors_and_warnings.jou" import assert, fail

def parse_type(tokens: Token**) -> AstType:
    if not (
        (*tokens)->kind == TokenKind::Name
        or (*tokens)->is_keyword("int")
        or (*tokens)->is_keyword("long")
        or (*tokens)->is_keyword("bool")
        or (*tokens)->is_keyword("byte")
        or (*tokens)->is_keyword("void")
    ):
        (*tokens)->fail_expected_got("a type")

    result = AstType{
        kind = AstTypeKind::Named,
        location = (*tokens)->location,
        name = (*tokens)->short_string,
    }
    ++*tokens

    while (*tokens)->is_operator("*"):
        p: AstType*
        p = malloc(sizeof *p)
        *p = result
        result = AstType{
            location = ((*tokens)++)->location,  # TODO: shouldn't need all the parentheses
            kind = AstTypeKind::Pointer,
            value_type = p,
        }

    return result

def parse_name_type_value(tokens: Token**, expected_what_for_name: byte*) -> AstNameTypeValue:
    if (*tokens)->kind != TokenKind::Name:
        assert(expected_what_for_name != NULL)
        (*tokens)->fail_expected_got(expected_what_for_name)

    result = AstNameTypeValue{name = (*tokens)->short_string, name_location = (*tokens)->location}
    ++*tokens

    if not (*tokens)->is_operator(":"):
        (*tokens)->fail_expected_got("':' and a type after it (example: \"foo: int\")")
    ++*tokens
    result.type = parse_type(tokens)

    if (*tokens)->is_operator("="):
        ++*tokens
        p: AstExpression*
        p = malloc(sizeof *p)
        *p = parse_expression(tokens)
        result.value = p

    return result

def parse_function_signature(tokens: Token**) -> AstSignature:
    if (*tokens)->kind != TokenKind::Name:
        (*tokens)->fail_expected_got("a function name")

    result = AstSignature{
        name_location = (*tokens)->location,
        name = (*tokens)->short_string,
    }
    ++*tokens

    if not (*tokens)->is_operator("("):
        (*tokens)->fail_expected_got("a '(' to denote the start of function arguments")
    ++*tokens

    while not (*tokens)->is_operator(")"):
        if result.takes_varargs:
            fail((*tokens)->location, "if '...' is used, it must be the last parameter")

        if (*tokens)->is_operator("..."):
            result.takes_varargs = True
            ++*tokens
        else:
            arg = parse_name_type_value(tokens, "an argument name")
            if arg.value != NULL:
                fail(arg.value->location, "arguments cannot have default values")

            result.args = realloc(result.args, sizeof result.args[0] * (result.nargs+1))
            result.args[result.nargs++] = arg

        if not (*tokens)->is_operator(","):
            break
        ++*tokens

    if not (*tokens)->is_operator(")"):
        (*tokens)->fail_expected_got("a ')'")
    ++*tokens

    # Special case for common typo:   def foo():
    if (*tokens)->is_operator(":"):
        fail((*tokens)->location, "return type must be specified with '->', or with '-> void' if the function doesn't return anything")
    if not (*tokens)->is_operator("->"):
        (*tokens)->fail_expected_got("a '->'")
    ++*tokens

    result.return_type = parse_type(tokens)
    return result

def get_actual_import_path(path_token: Token*, stdlib_path: byte*) -> byte*:
    assert(path_token->kind == TokenKind::String)
    assert(starts_with(path_token->long_string, "stdlib/"))

    path = malloc(strlen(path_token->long_string) + 100)
    sprintf(path, "%s/%s", stdlib_path, &path_token->long_string[7])
    return path

def parse_call(tokens: Token**, open_paren: byte*, close_paren: byte*) -> AstCall:
    assert((*tokens)->kind == TokenKind::Name)  # must be checked when calling this function
    result = AstCall{location = (*tokens)->location, called_name = (*tokens)->short_string}
    ++*tokens

    if not (*tokens)->is_operator(open_paren):
        expected = malloc(100)
        sprintf(expected, "a '%c' to denote the start of arguments", open_paren)
        (*tokens)->fail_expected_got(expected)
    ++*tokens

    while not (*tokens)->is_operator(close_paren):
        result.args = realloc(result.args, sizeof result.args[0] * (result.nargs+1))
        result.args[result.nargs++] = parse_expression(tokens)
        if not (*tokens)->is_operator(","):
            break
        ++*tokens

    if not (*tokens)->is_operator(close_paren):
        expected = malloc(100)
        sprintf(expected, "a '%c'", close_paren)
        (*tokens)->fail_expected_got(expected)
    ++*tokens

    return result

def parse_expression(tokens: Token**) -> AstExpression:
    expr = AstExpression{location = (*tokens)->location}

    if (*tokens)->kind == TokenKind::Int:
        expr.kind = AstExpressionKind::Int
        expr.int_value = (*tokens)->int_value
        ++*tokens
    elif (*tokens)->kind == TokenKind::String:
        expr.kind = AstExpressionKind::String
        expr.string = strdup((*tokens)->long_string)
        ++*tokens
    elif (*tokens)->kind == TokenKind::Name and (&(*tokens)[1])->is_operator("("):
        expr.kind = AstExpressionKind::FunctionCall
        expr.call = parse_call(tokens, "(", ")")
    else:
        (*tokens)->fail_expected_got("an expression")

    return expr

# does not eat a trailing newline
def parse_oneline_statement(tokens: Token**) -> AstStatement:
    result = AstStatement{ location = (*tokens)->location }
    if (*tokens)->is_keyword("return"):
        ++*tokens
        result.kind = AstStatementKind::ReturnWithValue
        result.return_value = parse_expression(tokens)
    else:
        expr = parse_expression(tokens)
        if expr.kind != AstExpressionKind::FunctionCall:
            fail(expr.location, "not a valid statement")
        result.kind = AstStatementKind::ExpressionStatement
        result.expression = expr
    return result

def eat_newline(tokens: Token**) -> void:
    if (*tokens)->kind != TokenKind::Newline:
        (*tokens)->fail_expected_got("end of line")
    ++*tokens

def parse_statement(tokens: Token**) -> AstStatement:
    result = parse_oneline_statement(tokens)
    eat_newline(tokens)
    return result

def parse_start_of_body(tokens: Token**) -> void:
    if not (*tokens)->is_operator(":"):
        (*tokens)->fail_expected_got("':' followed by a new line with more indentation")
    ++*tokens

    if (*tokens)->kind != TokenKind::Newline:
        (*tokens)->fail_expected_got("a new line with more indentation after ':'")
    ++*tokens

    if (*tokens)->kind != TokenKind::Indent:
        (*tokens)->fail_expected_got("more indentation after ':'")
    ++*tokens

def parse_body(tokens: Token**) -> AstBody:
    parse_start_of_body(tokens)

    result: AstStatement* = NULL
    n = 0
    while (*tokens)->kind != TokenKind::Dedent:
        result = realloc(result, sizeof result[0] * (n+1))
        result[n++] = parse_statement(tokens)
    ++*tokens

    return AstBody{ statements = result, nstatements = n }

def parse_funcdef(tokens: Token**) -> AstFunctionDef:
    return AstFunctionDef{
        signature = parse_function_signature(tokens),
        body = parse_body(tokens),
    }

def parse_classdef(tokens: Token**) -> AstClassDef:
    if (*tokens)->kind != TokenKind::Name:
        (*tokens)->fail_expected_got("a name for the class")

    result = AstClassDef{name = ((*tokens)++)->short_string}

    parse_start_of_body(tokens)
    while (*tokens)->kind != TokenKind::Dedent:
        if (*tokens)->is_keyword("def"):
            result.methods = realloc(result.methods, sizeof result.methods[0] * (result.nmethods + 1))
            result.methods[result.nmethods++] = parse_funcdef(tokens)
        else:
            field = parse_name_type_value(tokens, "a method or a class field")
            if field.value != NULL:
                fail(field.value->location, "class fields cannot have default values")
            result.fields = realloc(result.fields, sizeof result.fields[0] * (result.nfields + 1))
            result.fields[result.nfields++] = field
            eat_newline(tokens)

    ++*tokens
    return result

def parse_toplevel_node(dest: AstFile*, tokens: Token**, stdlib_path: byte*) -> void:
    ts = AstToplevelStatement{location = (*tokens)->location}

    if (*tokens)->is_keyword("from"):
        ++*tokens
        ts.the_import.path = get_actual_import_path((*tokens)++, stdlib_path)
        if not (*tokens)->is_keyword("import"):
            (*tokens)->fail_expected_got("the 'import' keyword")
        ++*tokens
        if (*tokens)->kind != TokenKind::Name:
            (*tokens)->fail_expected_got("the name of a symbol to import")
        ts.the_import.symbol = (*tokens)->short_string
        ++*tokens
        eat_newline(tokens)

    elif (*tokens)->is_keyword("def"):
        ++*tokens
        ts.kind = AstToplevelStatementKind::FunctionDefinition
        ts.funcdef = parse_funcdef(tokens)

    elif (*tokens)->is_keyword("declare"):
        ++*tokens
        if (*tokens)->is_keyword("global"):
            ++*tokens
            ts.kind = AstToplevelStatementKind::GlobalVariableDeclaration
            ts.global_var = parse_name_type_value(tokens, "a variable name")
            if ts.global_var.value != NULL:
                fail(
                    ts.global_var.value->location,
                    "a value cannot be given when declaring a global variable",
                )
        else:
            ts.kind = AstToplevelStatementKind::FunctionDeclaration
            ts.decl_signature = parse_function_signature(tokens)
        eat_newline(tokens)

    elif (*tokens)->is_keyword("class"):
        ++*tokens
        ts.kind = AstToplevelStatementKind::ClassDefinition
        ts.classdef = parse_classdef(tokens)

    else:
        (*tokens)->fail_expected_got("a definition or declaration")

    dest->body = realloc(dest->body, sizeof dest->body[0] * (dest->body_len + 1))
    dest->body[dest->body_len++] = ts

def parse(tokens: Token*, stdlib_path: byte*) -> AstFile:
    result = AstFile{path = tokens[0].location.path}
    while tokens->kind != TokenKind::EndOfFile:
        parse_toplevel_node(&result, &tokens, stdlib_path)
    return result
