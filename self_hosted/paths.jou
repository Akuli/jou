import "stdlib/mem.jou"
import "stdlib/str.jou"
import "stdlib/io.jou"
import "stdlib/process.jou"

declare GetModuleFileNameA(hModule: void*, lpFilename: byte*, nSize: int) -> int
declare readlink(linkpath: byte*, result: byte*, result_size: long) -> long
declare _mkdir(path: byte*) -> int  # windows
declare mkdir(path: byte*, mode: int) -> int  # posix
declare dirname(path: byte*) -> byte*
declare stat(path: byte*, buf: byte[1000]*) -> int  # lol

def is_windows() -> bool:
    # TODO: this is just weird...
    return getenv("OS") != NULL and strstr(getenv("OS"), "Windows") != NULL

# Return a path to the currently running program. Return value must be free()d.
def find_current_executable() -> byte*:
    buf = NULL
    for size = 2L; True; size *= 2:
        buf = realloc(buf, size)
        memset(buf, 0, size)

        if is_windows():
            ret: long = GetModuleFileNameA(NULL, buf, size as int)
        else:
            ret = readlink("/proc/self/exe", buf, size)

        if ret <= 0:
            # TODO: include os error message (GetLastError / errno)
            fprintf(stderr, "error: cannot locate currently running executable, needed for finding the Jou standard library\n")
            exit(1)
        if ret < size:
            # buffer is big enough, it fits
            return buf

def find_installation_directory() -> byte*:
    exe = find_current_executable()
    result = strdup(dirname(exe))
    free(exe)
    return result

def find_stdlib() -> byte*:
    checked: byte*[3]
    memset(&checked, 0, sizeof checked)

    exedir = find_current_executable()
    while is_windows() and strstr(exedir, "\\") != NULL:
        *strstr(exedir, "\\") = '/'

    for i = 0; i < sizeof checked / sizeof checked[0]; i++:
        tmp = strdup(dirname(exedir))
        free(exedir)
        exedir = tmp

        if strlen(exedir) <= 3:
            # give up, seems like we reached root of file system (e.g. "C:/" or "/")
            break

        path = malloc(strlen(exedir) + 10)
        sprintf(path, "%s/stdlib", exedir)

        iojou: byte* = malloc(strlen(path) + 10)
        sprintf(iojou, "%s/io.jou", path)
        buf: byte[1000]
        stat_result = stat(iojou, &buf)
        free(iojou)

        if stat_result == 0:
            free(exedir)
            return path

        checked[i] = path

    # TODO: test this
    fprintf(stderr, "error: cannot find the Jou standard library in any of the following locations:\n")
    for i = 0; i < sizeof checked / sizeof checked[0] and checked[i] != NULL; i++:
        fprintf(stderr, "  %s\n", checked[i])
    exit(1)

def my_mkdir(path: byte*) -> void:
    # Ignoring return values, because there's currently no way to check errno.
    # We need to ignore the error when directory exists already (EEXIST).
    # Ideally we wouldn't ignore any other errors.
    if is_windows():
        _mkdir(path)
    else:
        mkdir(path, 0o777)  # this is what mkdir in bash does according to strace

def get_path_to_file_in_jou_compiled(filename: byte*) -> byte*:
    # TODO: is placing jou_compiled to current working directory a good idea?
    my_mkdir("jou_compiled")
    my_mkdir("jou_compiled/self_hosted")

    result: byte* = malloc(strlen(filename) + 100)
    sprintf(result, "jou_compiled/self_hosted/%s", filename)
    return result

# TODO: put this to stdlib? or does it do too much for a stdlib function?
def delete_slice(start: byte*, end: byte*) -> void:
    memmove(start, end, strlen(end) + 1)

def simplify_path(path: byte*) -> void:
    if is_windows():
        # Backslash to forward slash.
        for p = path; *p != '\0'; p++:
            if *p == '\\':
                *p = '/'

    # Delete "." components.
    while starts_with(path, "./"):
        delete_slice(path, &path[2])
    while True:
        p = strstr(path, "/./")
        if p == NULL:
            break  # TODO: walrus operator  p := strstr(...)
        delete_slice(p, &p[2])

    # Delete unnecessary ".." components.
    while True:
        p = strstr(path, "/../")
        if p == NULL:
            break  # TODO: walrus operator  p := strstr(...)

        start_of_previous_component = p
        while start_of_previous_component != path and start_of_previous_component[-1] != '/':
            start_of_previous_component--
        delete_slice(start_of_previous_component, &p[4])
