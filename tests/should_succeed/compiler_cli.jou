from "stdlib/str.jou" import sprintf, strstr
from "stdlib/mem.jou" import malloc, free
from "stdlib/process.jou" import system, getenv
from "stdlib/io.jou" import printf

def is_windows() -> bool:
    return getenv("OS") != NULL and strstr(getenv("OS"), "Windows") != NULL

def run_jou(command: byte*) -> void:
    if is_windows():
        jou_exe = "jou.exe"
    else:
        jou_exe = "./jou"

    full_command = malloc(1000 as size_t)
    sprintf(full_command, "%s %s", jou_exe, command)
    system(full_command)
    free(full_command)

def main() -> int:
    run_jou("")  # Output: <jouexe>: missing Jou file name (try "<jouexe> --help")
    run_jou("--update -O3")  # Output: <jouexe>: "--update" cannot be used with other arguments (try "<jouexe> --help")
    run_jou("--verbose")  # Output: <jouexe>: missing Jou file name (try "<jouexe> --help")
    run_jou("x.jou y.jou")  # Output: <jouexe>: you can only pass one Jou file (try "<jouexe> --help")
    run_jou("examples/hello.jou")  # Output: Hello World
    run_jou("-o")  # Output: <jouexe>: there must be a file name after -o (try "<jouexe> --help")
    run_jou("-o examples/hello.jou")  # Output: <jouexe>: the filename after -o should be an executable, not a Jou file (try "<jouexe> --help")
    run_jou("-O8 examples/hello.jou")  # Output: <jouexe>: unknown argument "-O8" (try "<jouexe> --help")
    run_jou("--lolwat")  # Output: <jouexe>: unknown argument "--lolwat" (try "<jouexe> --help")
    run_jou("lolwat.jou")  # Output: compiler error in file "lolwat.jou": cannot open file: No such file or directory
    run_jou("--linker-flags")  # Output: <jouexe>: there must be a string of flags after --linker-flags (try "<jouexe> --help")
    run_jou("--linker-flags x --linker-flags y")  # Output: <jouexe>: --linker-flags cannot be given multiple times (try "<jouexe> --help")
    run_jou("--tokenize-only -O1 examples/hello.jou")  # Output: <jouexe>: --tokenize-only cannot be used together with other flags (try "<jouexe> --help")

    # Output: Usage:
    # Output:   <jouexe> [-o OUTFILE] [-O0|-O1|-O2|-O3] [--verbose] [--linker-flags "..."] FILENAME
    # Output:   <jouexe> --help       # This message
    # Output:   <jouexe> --update     # Download and install the latest Jou
    # Output:
    # Output: Options:
    # Output:   -o OUTFILE       output an executable file, don't run the code
    # Output:   -O0/-O1/-O2/-O3  set optimization level (0 = default, 3 = runs fastest)
    # Output:   -v / --verbose   display some progress information
    # Output:   -vv              display a lot of information about all compilation steps
    # Output:   --tokenize-only  display only the output of the tokenizer, don't do anything else
    # Output:   --parse-only     display only the AST (parse tree), don't do anything else
    # Output:   --linker-flags   appended to the linker command, so you can use external libraries
    run_jou("--help")

    # Test that double-verbose kinda works, without asserting the output in too much detail.
    # See README for an explanation of why CFG is twice.
    # TODO: shouldn't need to hide stdlib/io.jou or _windows_startup stuff, ideally it would be precompiled
    run_jou("-vv examples/hello.jou | grep === | grep -v stdlib/io.jou | grep -v stdlib/_windows_startup.jou")
    # Output: ===== Tokens for file "examples/hello.jou" =====
    # Output: ===== AST for file "examples/hello.jou" =====
    # Output: ===== Control Flow Graphs for file "examples/hello.jou" =====
    # Output: ===== Control Flow Graphs for file "examples/hello.jou" =====
    # Output: ===== Unoptimized LLVM IR for file "examples/hello.jou" =====
    # Output: ===== Optimized LLVM IR for file "examples/hello.jou" =====

    # With optimizations disabled, we don't see the optimized LLVM IR.
    run_jou("-vv -O0 examples/hello.jou | grep 'LLVM IR for file' | grep -v stdlib/_windows_startup.jou")
    # Output: ===== Unoptimized LLVM IR for file "examples/hello.jou" =====
    # Output: ===== Unoptimized LLVM IR for file "<joudir>/stdlib/io.jou" =====

    # Different working directory.
    # Output: Hello World
    if is_windows():
        system("cd tests & ..\\jou.exe ../examples/hello.jou")
    else:
        system("cd tests && ../jou ../examples/hello.jou")

    # Compile to an executable.
    # Output: Hello World
    run_jou("-o tmp/tests/hello.exe examples/hello.jou")
    if is_windows():
        system("tmp\\tests\\hello.exe")
    else:
        system("tmp/tests/hello.exe")

    # Compiler in weird place
    # Output: error: cannot find the Jou standard library in <joudir>/tmp/tests/stdlib
    if is_windows():
        system("copy jou.exe tmp\\tests\\jou_executable.exe >nul")
        system("tmp\\tests\\jou_executable.exe")
    else:
        system("cp jou tmp/tests/jou_executable")
        system("tmp/tests/jou_executable")

    # Compile a GUI program
    if not is_windows():
        ret = system("./jou -o /dev/null --linker-flags \"-lX11\" examples/x11_window.jou")
        if ret != 0:
            printf("Compiling failed???\n")

    return 0
