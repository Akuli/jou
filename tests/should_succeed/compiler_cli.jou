import "stdlib/str.jou"
import "stdlib/mem.jou"
import "stdlib/process.jou"
import "stdlib/io.jou"


def run_jou(command: byte*) -> None:
    if WINDOWS:
        jou_exe = "jou.exe"
    else:
        jou_exe = "./jou"

    full_command = malloc(1000)
    sprintf(full_command, "%s %s", jou_exe, command)
    system(full_command)
    free(full_command)

def main() -> int:
    run_jou("")  # Output: <jouexe>: missing Jou file name (try "<jouexe> --help")
    run_jou("--update -O3")  # Output: <jouexe>: "--update" cannot be used with other arguments (try "<jouexe> --help")
    run_jou("--verbose")  # Output: <jouexe>: missing Jou file name (try "<jouexe> --help")
    run_jou("x.jou y.jou")  # Output: <jouexe>: you can only pass one Jou file (try "<jouexe> --help")
    run_jou("examples/hello.jou")  # Output: Hello World
    run_jou("-o")  # Output: <jouexe>: there must be a file name after -o (try "<jouexe> --help")
    run_jou("-o examples/hello.jou")  # Output: <jouexe>: the filename after -o should be an executable, not a Jou file (try "<jouexe> --help")
    run_jou("-O8 examples/hello.jou")  # Output: <jouexe>: unknown argument "-O8" (try "<jouexe> --help")
    run_jou("--lolwat")  # Output: <jouexe>: unknown argument "--lolwat" (try "<jouexe> --help")
    run_jou("lolwat.jou")  # Output: compiler error in file "lolwat.jou": cannot open file: No such file or directory
    run_jou("--linker-flags")  # Output: <jouexe>: there must be a string of flags after --linker-flags (try "<jouexe> --help")
    run_jou("--linker-flags x --linker-flags y")  # Output: <jouexe>: --linker-flags cannot be given multiple times (try "<jouexe> --help")
    run_jou("--tokenize-only -O1 examples/hello.jou")  # Output: <jouexe>: --tokenize-only cannot be used together with other flags (try "<jouexe> --help")

    # Output: Usage:
    # Output:   <jouexe> [-o OUTFILE] [-O0|-O1|-O2|-O3] [--verbose] [--linker-flags "..."] FILENAME
    # Output:   <jouexe> --help       # This message
    # Output:   <jouexe> --update     # Download and install the latest Jou
    # Output:
    # Output: Options:
    # Output:   -o OUTFILE       output an executable file, don't run the code
    # Output:   -O0/-O1/-O2/-O3  set optimization level (0 = no optimization, 1 = default, 3 = runs fastest)
    # Output:   -v / --verbose   display some progress information
    # Output:   -vv              display a lot of information about all compilation steps
    # Output:   --valgrind       use valgrind when running the code
    # Output:   --linker-flags   appended to the linker command, just like 'link' statements in code
    # Output:   --tokenize-only  display the output of the tokenizer, do not compile further
    # Output:   --parse-only     display the AST (parse tree), do not compile further
    # Output:   --uvg-only       display Undefined Value Graphs, do not compile further
    run_jou("--help")

    # Test that double-verbose kinda works, without asserting the output in too much detail.
    # Usually stdlib/_... files are compiled, but not necessarily, so hide them.
    # Showing LLVM IR is not consistent because of caching compiled files.
    run_jou("-vv examples/hello.jou | grep === | grep -v stdlib/io.jou | grep -v stdlib/_ | grep -v jou_startup | grep -v \"LLVM IR\"")
    # Output: ===== Tokens for file "examples/hello.jou" =====
    # Output: ===== AST for file "examples/hello.jou" =====
    # Output: ===== UVG for _jou_assert_fail(assertion: byte*, path: byte*, lineno: int) -> noreturn =====
    # Output: ===== UVG for main() -> int =====

    # Different working directory.
    # Output: Hello World
    if WINDOWS:
        system("cd tests & ..\\jou.exe ../examples/hello.jou")
    else:
        system("cd tests && ../jou ../examples/hello.jou")

    # Compile to an executable.
    # Output: Hello World
    run_jou("-o tmp/tests/hello.exe examples/hello.jou")
    if WINDOWS:
        system("tmp\\tests\\hello.exe")
    else:
        system("tmp/tests/hello.exe")

    # Compiler in weird place
    # TODO: make this test work with new (more robust) standard library finding logic?
    #if WINDOWS:
    #    system("copy jou.exe tmp\\tests\\jou_executable.exe >nul")
    #    system("tmp\\tests\\jou_executable.exe")
    #else:
    #    system("cp jou tmp/tests/jou_executable")
    #    system("tmp/tests/jou_executable")

    # Compile a GUI program. Doesn't work on GitHub Actions because X11 isn't installed.
    if not WINDOWS and not MACOS and getenv("GITHUB_ACTIONS") == NULL:
        if NETBSD:
            ret = system("./jou -o /dev/null --linker-flags \"-L/usr/X11R7/lib -lX11\" examples/x11_window.jou")
        else:
            ret = system("./jou -o /dev/null --linker-flags \"-lX11\" examples/x11_window.jou")
        assert ret == 0

    # Compile a program with a memory leak.
    # Output: 100 bytes in 1 blocks are definitely lost in loss record 1 of 1
    if WINDOWS or system("which valgrind >/dev/null 2>/dev/null") != 0:
        # valgrind not available --> produce some fake output to pass the test
        puts("100 bytes in 1 blocks are definitely lost in loss record 1 of 1")
    else:
        ret = system("./jou --valgrind examples/memory_leak.jou 2>&1 | grep 'definitely lost' | cut -d' ' -f2-")
        assert ret == 0

    return 0
