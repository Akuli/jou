import "stdlib/io.jou"
import "stdlib/process.jou"

def after_return() -> None:
    puts("hey1")  # Output: hey1
    return
    puts("hey2")  # Warning: this code will never run

@public  # cannot be called in tests, silences unused function warning
def after_infinite_loop() -> None:
    while True:
        puts("hi")
    puts("yooooo wat")  # Warning: this code will never run

@public  # cannot be called in tests, silences unused function warning
def after_infinite_loop_with_variable() -> None:
    flag = True
    while flag:
        puts("hi")
    # TODO: can we warn in this case by improving UVGs or substituting constants?
    puts("yooooo wat")

@public  # cannot be called in tests, silences unused function warning
def after_infinite_loop_with_variable_set_after_loop() -> None:
    flag = True
    while flag:
        puts("hi")
    # TODO: can we warn in this case by improving UVGs or substituting constants?
    flag = False

@public  # cannot be called in tests, silences unused function warning
def noreturn_function_called() -> None:
    abort()
    x = 1  # Warning: this code will never run
    y = 2

class Aborter:
    def abort_the_process(self) -> noreturn:
        abort()
        x = 1  # Warning: this code will never run
        y = 2

# There was a bug where noreturn functions worked but methods didn't
@public  # cannot be called in tests, silences unused function warning
def noreturn_method_called() -> None:
    a = Aborter{}
    a.abort_the_process()
    x = 1  # Warning: this code will never run
    y = 2

# https://github.com/Akuli/jou/issues/18
def lots_of_unreachable_code() -> None:
    return
    i = 0  # Warning: this code will never run
    while True:
        if i == 3:
            break
            puts("yooooooo")
        puts("blah")
        i = i+1

def not_true() -> None:
    # This if statement is evaluated before UVGs, similarly to e.g. "if WINDOWS:".
    # So we don't get a warning here.
    if not True:
        puts("Hello")

    # Compile-time evaluation doesn't apply to loops
    while not True:
        puts("Hello")  # Warning: this code will never run

def unreachable_loop_increment() -> None:
    # In this loop, i++ will never run. Compiler shouldn't complain, because
    # the same line contains other code that does run.
    for i = 0; i < 10; i++:
        return

def main() -> int:
    after_return()
    lots_of_unreachable_code()
    not_true()
    unreachable_loop_increment()
    # Can't run infinite loops (test script redirects output to file)
    return 0
