import "stdlib/io.jou"
import "stdlib/mem.jou"
import "stdlib/list.jou"


def test_empty_list() -> None:
    list = List[int]{}
    assert list.end() == NULL
    for i = 0; i < list.len; i++:
        printf("This does not run.\n")
    for p = list.ptr; p < list.end(); p++:
        printf("This does not run either.\n")


def test_grow() -> None:
    list = List[int]{}

    list.grow(3, sizeof(list.ptr[0]))
    list.ptr[0] = 1
    list.ptr[1] = 2
    list.ptr[2] = 3
    list.len = 3

    # Make sure that nothing breaks if we append after growing
    for i = 4; i < 10; i++:
        list.append(i)

    # Output: 123456789
    for p = list.ptr; p < list.end(); p++:
        printf("%d", *p)
    printf("\n")

    free(list.ptr)


def test_extend() -> None:
    list = List[int]{}
    list.append(1)

    # Extend from pointer
    arr = [2, 3, 4, 5]
    list.extend_from_ptr(arr, 4, sizeof(arr[0]))

    # Extend from another list
    list2 = List[int]{}
    for i = 11; i <= 99; i += 11:
        list2.append(i)
    list.extend(list2)
    free(list2.ptr)

    # Output: 1,2,3,4,5,11,22,33,44,55,66,77,88,99
    for p = list.ptr; p < list.end(); p++:
        if p > list.ptr:
            printf(",")
        printf("%d", *p)
    printf("\n")

    free(list.ptr)


def test_pop() -> None:
    list = List[int]{}
    for i = 11; i <= 44; i += 11:
        list.append(i)

    # Output: 4 items
    # Output: pop() -> 44
    # Output: 3 items
    # Output: pop() -> 33
    # Output: 2 items
    # Output: pop() -> 22
    # Output: 1 items
    # Output: pop() -> 11
    # Output: 0 items
    while True:
        printf("%lld items\n", list.len)
        if list.len == 0:
            break
        printf("pop() -> %d\n", list.pop())

    # The items are still in the list, only the length changed.
    # This is important for some tricks that can be done with pop().
    # Output: post-pop [11,22,33,44]
    assert list.ptr != NULL
    printf("post-pop [%d,%d,%d,%d]\n", list.ptr[0], list.ptr[1], list.ptr[2], list.ptr[3])

    # Same memory will be reused
    list.append(1)
    list.append(2)
    list.append(3)
    # Output: len=3 [1,2,3]
    printf("len=%lld [%d,%d,%d]\n", list.len, list.ptr[0], list.ptr[1], list.ptr[2])

    free(list.ptr)


def main() -> int:
    test_empty_list()
    test_grow()
    test_extend()
    test_pop()
    return 0
