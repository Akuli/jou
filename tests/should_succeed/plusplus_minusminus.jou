import "stdlib/io.jou"

def main() -> int:
    n = 7

    # Unlike in C, the evaluation order of arguments is guaranteed to be left to right.
    printf("%d n=%d\n", n++, n)  # Output: 7 n=8
    printf("%d n=%d\n", n--, n)  # Output: 8 n=7
    printf("%d n=%d\n", ++n, n)  # Output: 8 n=8
    printf("%d n=%d\n", --n, n)  # Output: 7 n=7

    # Test operator precedence.
    printf("%d n=%d\n", 10 + ++n, n)  # Output: 18 n=8
    printf("%d n=%d\n", 10 + --n, n)  # Output: 17 n=7
    printf("%d n=%d\n", n++ + 10, n)  # Output: 17 n=8
    printf("%d n=%d\n", n-- + 10, n)  # Output: 18 n=7

    x = 100
    xptr = &x
    (*xptr)++
    ++(*xptr)
    ++*xptr
    printf("%d\n", x)  # Output: 103

    c = 'a'
    printf("%c%c%c%c%c\n", c++, c++, c--, c--, c)    # Output: abcba

    # A bug in the compiler previously caused this to output "1 1".
    # The problem was that even though arguments were evaluated
    # left-to-right as they should be, the value of the variable
    # was not looked up until all arguments were evaluated.
    n = 0
    printf("%d %d\n", n, ++n)  # Output: 0 1

    # float
    f = 1.23f
    printf("%.2f f=%.2f\n", f++, f)  # Output: 1.23 f=2.23
    printf("%.2f f=%.2f\n", f--, f)  # Output: 2.23 f=1.23
    printf("%.2f f=%.2f\n", ++f, f)  # Output: 2.23 f=2.23
    printf("%.2f f=%.2f\n", --f, f)  # Output: 1.23 f=1.23

    # double
    d = 1.23
    printf("%.2f d=%.2f\n", d++, d)  # Output: 1.23 d=2.23
    printf("%.2f d=%.2f\n", d--, d)  # Output: 2.23 d=1.23
    printf("%.2f d=%.2f\n", ++d, d)  # Output: 2.23 d=2.23
    printf("%.2f d=%.2f\n", --d, d)  # Output: 1.23 d=1.23

    return 0
