# I don't like unit tests for various reasons, but they're great when some part
# of the code is really hard to get right.

import "stdlib/io.jou"
import "stdlib/str.jou"
import "stdlib/mem.jou"
import "../../compiler/hash.jou"
import "../../compiler/paths.jou"


if WINDOWS:
    def replace(s: byte*, old: byte, new: byte) -> None:
        for i = 0; s[i] != '\0'; i++:
            if s[i] == old:
                s[i] = new


def test_link_statement_path_rewriting() -> None:
    # Output: '-L/home/akuli/my folder/./foo/' '-L/home/akuli/my folder/../foo/' '-L/home/akuli/my folder/../../foo/'
    s = handle_relative_paths_in_linker_flags("-L./foo/ -L../foo/ -L../../foo/", "/home/akuli/my folder/file.jou")
    if WINDOWS:
        replace(s, '"', '\'')  # not possible to do platform-specific output for Jou tests yet
    puts(s)
    free(s)

    # Output: '/my folder/./'
    s = handle_relative_paths_in_linker_flags("./", "/my folder/file.jou")
    if WINDOWS:
        replace(s, '"', '\'')  # not possible to do platform-specific output for Jou tests yet
    puts(s)
    free(s)

    # Quotes are always added, even if they are unnecessary. This might change later.
    # Output: '/myfolder/./'
    s = handle_relative_paths_in_linker_flags("./", "/myfolder/file.jou")
    if WINDOWS:
        replace(s, '"', '\'')  # not possible to do platform-specific output for Jou tests yet
    puts(s)
    free(s)

    # Output: /this/is/absolute/path
    s = handle_relative_paths_in_linker_flags("/this/is/absolute/path", "/folder/file.jou")
    if WINDOWS:
        replace(s, '"', '\'')  # not possible to do platform-specific output for Jou tests yet
    puts(s)
    free(s)


def test_fnv1a_hash() -> None:
    tests = [
        "",             # Output: CBF29CE484222325
        "a",            # Output: AF63DC4C8601EC8C
        "foobar",       # Output: 85944171F73967E8
        "FNV",          # Output: F32BBE199CF22F39
        "HashFunction", # Output: FC11AA668104F0B5
    ]

    for i = 0; i < sizeof(tests)/sizeof(tests[0]); i++:
        h = new_hash()
        h.add_string(tests[i])
        printf("%llX\n", h.hash)


def main() -> int:
    test_link_statement_path_rewriting()
    test_fnv1a_hash()
    return 0
