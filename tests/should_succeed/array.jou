declare printf(fmt: byte*, ...) -> int

# c can't do this
def make_array() -> int[3]:
    #return [4, 5, 6]
    result: int[3]
    result[0] = 4
    result[1] = 5
    result[2] = 6
    return result

# Arrays are passed by value.
def do_nothing(a: int[3]) -> void:
    a[0] = a[0] + 7

# Use a pointer instead if you want to modify the array.
def increment(a: int*) -> void:
    a[0] = a[0] + 7

def main() -> int:
    #foo = int[3]{1, 2, 3}
    foo: int[3]
    foo[0] = 1
    foo[1] = 2
    foo[2] = 3

    printf("%d %d %d\n", foo[0], foo[1], foo[2])  # Output: 1 2 3

    foo = make_array()
    printf("%d %d %d\n", foo[0], foo[1], foo[2])  # Output: 4 5 6

    do_nothing(foo)
    printf("%d %d %d\n", foo[0], foo[1], foo[2])  # Output: 4 5 6

    increment(&foo[0])  # Needs explicit &foo[0], doesn't convert implicitly like in C.
    printf("%d %d %d\n", foo[0], foo[1], foo[2])  # Output: 11 5 6

    return 0
