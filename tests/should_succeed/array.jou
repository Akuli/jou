declare printf(fmt: byte*, ...) -> int

# c can't do this
def make_array() -> int[3]:
    return [4, 5, 6]

# Arrays are passed by value.
def do_nothing(a: int[3]) -> void:
    ++a[0]

# Use a pointer instead if you want to modify the array.
def increment(a: int*) -> void:
    ++a[0]

def main() -> int:
    foo: int[3]
    foo[0] = 1
    foo[1] = 2
    foo[2] = 3

    printf("%d %d %d\n", foo[0], foo[1], foo[2])  # Output: 1 2 3

    foo = make_array()
    printf("%d %d %d\n", foo[0], foo[1], foo[2])  # Output: 4 5 6

    foo = [
        4,
        '\x05',  # converts to int
        6,
    ]
    printf("%d %d %d\n", foo[0], foo[1], foo[2])  # Output: 4 5 6

    do_nothing(foo)
    printf("%d %d %d\n", foo[0], foo[1], foo[2])  # Output: 4 5 6

    increment(&foo[0])
    printf("%d %d %d\n", foo[0], foo[1], foo[2])  # Output: 5 5 6

    increment(foo)  # foo casts implicitly to &foo[0]
    printf("%d %d %d\n", foo[0], foo[1], foo[2])  # Output: 6 5 6

    return 0
