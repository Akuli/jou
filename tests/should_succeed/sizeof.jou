import "stdlib/io.jou"
import "stdlib/mem.jou"

def side_effect() -> int:
    printf("Side Effect !!!!!\n")
    return 123

class Foo:
    a: int
    b: long
    c: byte

# See issue #224.
def ensure_sizeof_isnt_too_small_in_a_weird_corner_case() -> None:
    value = Foo{a=1, b=2, c='x'}
    # We need the heap allocation, because otherwise the optimizer happens to make things work.
    ptr = malloc(50) as Foo*
    memcpy(ptr, &value, sizeof value)
    # If sizeof is too small, this prints garbage.
    printf("%c\n", ptr->c)  # Output: x
    free(ptr)

def main() -> int:
    ensure_sizeof_isnt_too_small_in_a_weird_corner_case()

    bo: bool
    by: byte
    n: int
    m: long
    printf("%lld %lld %lld %lld\n", sizeof bo, sizeof by, sizeof n, sizeof m)  # Output: 1 1 4 8

    # test that operator precedence works
    printf("%lld\n", sizeof by + sizeof n + sizeof m)  # Output: 13

    arr: long[100]
    printf("%lld\n", sizeof arr)  # Output: 800

    # The "array length trick"
    printf("%lld\n", sizeof arr / sizeof arr[0])  # Output: 100

    # Evaluating a sizeof has no side effects.
    printf("%lld\n", sizeof side_effect())  # Output: 4

    # Size of strings. Size of byte* is 8 on 64-bit system.
    # Output: 6 100 8
    printf(
        "%lld %lld %lld\n",
        sizeof("hello"),
        sizeof("hello" as byte[100]),
        sizeof("hello" as byte*),  # Warning: unnecessary cast from byte* to byte*
    )

    return 0
