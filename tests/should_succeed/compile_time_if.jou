import "stdlib/io.jou"
import "stdlib/process.jou"

if WINDOWS:
    declare CreateDirectoryA(lpPathName: byte*, lpSecurityAttributes: void*) -> int
else:
    declare mkdir(pathname: byte*, mode: int) -> int


# Test and,or,not operators
if WINDOWS:
    def bar1() -> None:
        printf("One")

if MACOS:
    def bar1() -> None:
        printf("One")

if WINDOWS or MACOS:
    def bar2() -> None:
        printf("Two\n")

if not WINDOWS and not MACOS:
    def bar1() -> None:
        printf("OneTwo\n")
    def bar2() -> None:
        pass


# No unused function warning for "if False", it acts as commenting out
if False:
    def blahblah() -> None:
        pass


if True:
    def main() -> int:
        if WINDOWS:
            CreateDirectoryA("tmp\\tests\\foo", NULL)
        else:
            # python uses 777 as default perms, see help(os.mkdir)
            mkdir("tmp/tests/foo", 0o777)

        f = fopen("tmp/tests/foo/bar", "w")
        if f != NULL:
            if True:
                puts("ok")  # Output: ok
            fclose(f)

        # Output: OneTwo
        bar1()
        bar2()

        # No unreachable code warning for "if False", it acts as commenting out
        if False:
            totally(not valid, at.all)

        # Corner case: compile-time if statement inside a runtime if statement.
        # Should not produce any unreachable code warnings.
        # Output: Foo
        if getenv("does_not_exist") == NULL:
            if WINDOWS:
                printf("Foo\n")
            else:
                printf("Foo\n")

        return 0
