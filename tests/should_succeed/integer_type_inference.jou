import "stdlib/io.jou"


def print_byte(b: byte) -> None:
    printf("%c\n", b)


def main() -> int:
    # Type of 250 is inferred to be byte
    b: byte = 100
    printf("size %lld\n", sizeof(b))  # Output: size 1

    # If type inference is not available, defaults to int (32-bit signed)
    n = 100
    printf("%lld bytes\n", sizeof(n))  # Output: 4 bytes

    # Types of the numbers here are inferred as byte
    print_byte(74)   # Output: J
    print_byte(111)  # Output: o
    print_byte(117)  # Output: u

    # Types of numbers on the right are inferred as byte.
    # Otherwise we would get an error about wrong types.
    b *= 2
    b += 5
    b -= 4
    b /= 3
    printf("%d\n", b)  # Output: 67

    # Type inference inside an array
    # Output: 6 bytes 123
    arr: int16[3] = [1, 2, 3]
    printf("%lld bytes %d%d%d\n", sizeof(arr), arr[0], arr[1], arr[2])

    return 0
