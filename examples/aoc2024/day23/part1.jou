import "stdlib/str.jou"
import "stdlib/mem.jou"
import "stdlib/io.jou"


class Computer:
    name: byte[3]
    connections: void*[100]  # TODO: should be Computer*[100], can't be due to compiler bug

    def connect(self, other: Computer*) -> None:
        assert other != NULL

        for i = 0; i < sizeof(self->connections)/sizeof(self->connections[0]); i++:
            if self->connections[i] == NULL:
                self->connections[i] = other
                return

        # array is full
        assert False

    def is_connected(self, other: Computer*) -> bool:
        for i = 0; i < sizeof(self->connections)/sizeof(self->connections[0]); i++:
            if self->connections[i] == other:
                return True
        return False


def find_or_create_computer(computers: Computer*, ncomputers: int*, name: byte*) -> Computer*:
    for i = 0; i < *ncomputers; i++:
        if strcmp(computers[i].name, name) == 0:
            return &computers[i]

    c = &computers[*ncomputers]
    assert strlen(name) == 2
    strcpy(c->name, name)
    memset(c->connections, 0, sizeof(c->connections))

    ++*ncomputers
    return c


def main() -> int:
    computers: Computer* = malloc(sizeof(computers[0]) * 5000)
    assert computers != NULL
    ncomputers = 0

    f = fopen("sampleinput.txt", "r")
    assert f != NULL
    name1: byte[3]
    name2: byte[3]

    while fscanf(f, "%2s-%2s\n", name1, name2) == 2:
        assert ncomputers < 5000
        c1 = find_or_create_computer(computers, &ncomputers, name1)
        assert ncomputers < 5000
        c2 = find_or_create_computer(computers, &ncomputers, name2)
        c1->connect(c2)
        c2->connect(c1)

    fclose(f)
    printf("Got %d computers\n", ncomputers)  # Output: Got 16 computers

    n = 0
    for i = 0; i < ncomputers; i++:
        for j = i+1; j < ncomputers; j++:
            if i == j or not computers[i].is_connected(&computers[j]):
                continue

            for k = j+1; k < ncomputers; k++:
                if (
                    k == i
                    or k == j
                    or not computers[k].is_connected(&computers[i])
                    or not computers[k].is_connected(&computers[j])
                ):
                    continue

                if (
                    computers[i].name[0] == 't'
                    or computers[j].name[0] == 't'
                    or computers[k].name[0] == 't'
                ):
                    # Found 3 connected
                    n++

    printf("%d\n", n)  # Output: 7

    free(computers)
    return 0
