import "stdlib/io.jou"
import "stdlib/mem.jou"
import "stdlib/math.jou"
import "stdlib/str.jou"
import "stdlib/ascii.jou"


class Report:
    data: int*
    len: int

    def free(self) -> None:
        free(self.data)

    def is_safe(self) -> bool:
        inc = True
        dec = True

        for i = 0; i < self.len - 1; i++:
            d = self.data[i+1] - self.data[i]

            if d <= 0:
                inc = False
            if d >= 0:
                dec = False

            if not (1 <= abs(d) and abs(d) <= 3):
                return False

        return inc or dec


# mutates the line in-place through split_by_ascii_whitespace()
def parse_report(line: byte*) -> Report:
    words = split_by_ascii_whitespace(line)

    report = Report{len=words.len as int}
    report.data = malloc(sizeof(report.data[0]) * words.len)
    for i = 0; i < words.len; i++:
        report.data[i] = atoi(words.ptr[i])

    free(words.ptr)
    return report


def main() -> int:
    f = fopen("sampleinput.txt", "r")
    assert f != NULL

    num_safe = 0

    line: byte[1024]
    while fgets(line, sizeof(line) as int, f) != NULL:
        report = parse_report(line)
        if report.is_safe():
            num_safe++
        report.free()

    printf("%d\n", num_safe)  # Output: 2

    fclose(f)
    return 0
