import "stdlib/io.jou"
import "stdlib/list.jou"
import "stdlib/mem.jou"
import "stdlib/str.jou"


def do_combo_op(n: int, regs: int64[3]) -> int64:
    assert 0 <= n and n <= 6
    if n >= 4:
        return regs[n - 4]
    else:
        return n


# Return value is between 0 and 7 (3 bits), or -1 if the program doesn't output anything.
def get_first_output(code: int*, reg_a: int64) -> int:
    regs = [reg_a, 0 as int64, 0 as int64]
    ip = &code[0]

    while *ip != -1:
        opcode = *ip++
        operand = *ip++

        if opcode == 0:  # adv = A DiVision
            regs[0] >>= do_combo_op(operand, regs)
        elif opcode == 1:  # bxl = B bitwise Xor with Literal
            regs[1] ^= operand
        elif opcode == 2:  # bst = B Set value and Truncate to 3 bits
            regs[1] = do_combo_op(operand, regs) & 0b111
        elif opcode == 3:  # jnz = Jump if NonZero
            if regs[0] != 0:
                ip = &code[operand]
        elif opcode == 4:  # bxc = B Xor C
            regs[1] ^= regs[2]
        elif opcode == 5:  # out = OUTput value
            return do_combo_op(operand, regs) & 0b111
        elif opcode == 6:  # bdv = B DiVision
            regs[1] = regs[0] >> do_combo_op(operand, regs)
        elif opcode == 7:  # cdv = C DiVision
            regs[2] = regs[0] >> do_combo_op(operand, regs)

    return -1  # no output


# My input looked like this, as printed by code in part 1:
#
#    Registers: A=... B=0 C=0
#       0  B = A % 8
#       2  B ^= 1
#       4  C = A / 2**B
#       6  B ^= 5
#       8  B ^= C
#      10  A /= 2**3
#      12  output B % 8
#      14  if A != 0: jump to 0
#
# The output depends only on the last 10 bits of A, because line 4 shifts away
# no more than 7 bits (7 = 111 binary), and the last 3 bits of C are used in
# the output. This means that we can do a simple depth-first search.
#
# This function finds all such x that:
#   - when machine runs on x, it outputs the desired output
#   - last 7 bits of x are as given (-1 means anything will do).
def find_matching_inputs(code: int*, desired_output: int*, desired_output_len: int, last7: int) -> List[int64]:
    assert desired_output_len >= 0
    results = List[int64]{}

    if desired_output_len == 0:
        # Ensure the code does nothing, imagining that the loop condition is at
        # start of loop rather than end.
        if last7 == -1 or last7 == 0:
            # The input can actually be zero. It's not banned by the required
            # last 7 bits.
            results.append(0)
    else:
        for last10 = 0; last10 < 1024; last10++:  # all 10 bit numbers
            if (
                (last7 == -1 or (last10 & 0b111_1111) == last7)
                and get_first_output(code, last10) == desired_output[0]
            ):
                # Recursively find more bits.
                last7_before = last10 >> 3
                new_results = find_matching_inputs(code, &desired_output[1], desired_output_len - 1, last7_before)
                for p = new_results.ptr; p < new_results.end(); p++:
                    x = *p
                    x <<= 3
                    x |= last10 & 0b111
                    assert x & 0b11_1111_1111 == last10
                    results.append(x)
                free(new_results.ptr)

    return results


def main() -> int:
    f = fopen("sampleinput2.txt", "r")
    assert f != NULL

    line: byte[1000]
    code: int[100]
    code_len = 0

    while fgets(line, sizeof(line) as int, f) != NULL:
        if starts_with(line, "Program: "):
            p = &line[9]
            while True:
                number = *p++
                assert '0' <= number and number <= '7'
                assert code_len < sizeof(code)/sizeof(code[0])
                code[code_len++] = number - '0'
                if *p++ != ',':
                    break
            # Terminate with many halt instructions to reduce risk of overflow :)
            assert code_len + 10 <= sizeof(code)/sizeof(code[0])
            for i = 0; i < 10; i++:
                code[code_len + i] = -1

    fclose(f)

    results = find_matching_inputs(code, code, code_len, -1)

    best = results.ptr[0]
    for i = 0; i < results.len; i++:
        if results.ptr[i] < best:
            best = results.ptr[i]
    printf("%lld\n", best)  # Output: 117440

    free(results.ptr)
    return 0
