import "stdlib/io.jou"
import "stdlib/str.jou"
import "stdlib/mem.jou"


# TODO: belongs to stdlib
declare memcmp(a: void*, b: void*, n: long) -> int


def xor(a: long, b: long) -> long:
    assert a >= 0
    assert b >= 0

    result = 0L
    power_of_two = 1L

    while a != 0 or b != 0:
        if a % 2 != b % 2:
            result += power_of_two
        a /= 2
        b /= 2
        power_of_two *= 2

    return result


def next_num(n: long) -> long:
    n = xor(n, n * 64) % 16777216
    n = xor(n, n / 32) % 16777216
    n = xor(n, n * 2048) % 16777216
    return n


def compute_deltas_and_last_digits(state: long, deltas: int*, last_digits: int*) -> None:
    result: int[2000]
    for i = 0; i < 2000; i++:
        old = (state % 10) as int
        state = next_num(state)
        new = (state % 10) as int
        deltas[i] = new - old
        last_digits[i] = new


def num_bananas_from_buyer(deltas: int*, last_digits: int*, diff_seq: int[4]) -> int:
    for i = 3; i < 2000; i++:
        if (
            diff_seq[0] == deltas[i-3]
            and diff_seq[1] == deltas[i-2]
            and diff_seq[2] == deltas[i-1]
            and diff_seq[3] == deltas[i]
        ):
            return last_digits[i]
    return 0


def main() -> int:
    inputs: long[3000]
    ninputs = 0

    f = fopen("sampleinput2.txt", "r")
#    f = fopen("input", "r")
    assert f != NULL

    line: byte[100]
    while fgets(line, sizeof(line) as int, f) != NULL:
        assert ninputs < sizeof(inputs)/sizeof(inputs[0])
        inputs[ninputs++] = atoll(line)

    fclose(f)

    # Precompute sequence of deltas for each input to speed up
    deltas: int[2000]* = malloc(sizeof(deltas[0]) * ninputs)
    last_digits: int[2000]* = malloc(sizeof(last_digits[0]) * ninputs)

    assert deltas != NULL
    assert last_digits != NULL

    for i = 0; i < ninputs; i++:
        compute_deltas_and_last_digits(inputs[i], deltas[i], last_digits[i])

    best = -1

    for a = -9; a <= 9; a++:
        for b = -9; b <= 9; b++:
            for c = -9; c <= 9; c++:
                for d = -9; d <= 9; d++:
                    result = 0
                    for i = 0; i < ninputs; i++:
                        result += num_bananas_from_buyer(deltas[i], last_digits[i], [a, b, c, d])

                    if result > best:
                        printf("best = %d bananas for [%d,%d,%d,%d]\n", result, a, b, c, d)
                        fflush(stdout)
                        best = result

    printf("%d\n", best)  # Output: 23

    return 0
