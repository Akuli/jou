# The following commands can be used to create asd.png, which contains a nice
# picture of the input as a graph:
#
#   echo 'digraph G {' > asd.txt
#   grep -- '->' sampleinput.txt | awk '{print $1 "->" $5 " [label="$2"]\n"$3"->"$5" [label="$2"]"}' >> asd.txt
#   echo '}' >> asd.txt
#   dot -Tpng -o asd.png asd.txt

import "stdlib/str.jou"
import "stdlib/mem.jou"
import "stdlib/ascii.jou"
import "stdlib/io.jou"


# The sum calculator consists of 45 adders and outputs 46 bits z00,z01,...,z45.
# Each adder (except the first and last) consists of the following 5 logic gates.
enum GateType:
    # Inputs: xnn, ynn (e.g. x05 and y05)
    # Output: 1 if inputs are 1,0 or 0,1
    #         0 if inputs are 1,1 or 0,0
    # Purpose: Used for both output and overflow checking
    InputXor

    # Inputs: xnn, ynn
    # Output: 1 if inputs are 1,1
    #         0 if inputs are anything else
    # Purpose: Used to detect overflow
    InputAnd

    # Inputs: result of InputXor, overflow/carry bit from previous level
    # Output: value of znn (the output bit of x+y)
    # Purpose: Calculates the sum of the two numbers
    OutputXor

    # Inputs: result of InputXor, overflow/carry bit from previous level
    # Output: 1 if we overflow when adding bits 1,0 or 0,1 due to carrying
    #         0 if there's no overflow, or the overflow happens due to input 1,1
    # Purpose: Creates intermediate value used when calculating overflow/carry
    OverflowAnd

    # Inputs: result of InputAnd, result of OverflowAnd
    # Output: 1 if we overflow in any way, due to input 1,1 or carrying
    #         0 if there is no overflow
    # Purpose: This is the overflow/carry bit sent to the next adder
    OverflowOr

# Special cases:
#
#   - First adder doesn't need to handle overflow/carry from previous adders,
#     so it only has InputXor and InputAnd. Result of InputXor is used for
#     output and result of InputAnd is used for carry.
#
#   - Last adder's OverflowOr outputs to the last output bit (z45). In other
#     adders, it goes to the next adder's OutputXor and OverflowAnd.


class Gate:
    inputs: byte[4][2]
    output: byte[4]
    gtype: GateType


# By design, every gate uses the inputs somehow.
# We can use this to determine a somewhat reasonable ordering for the gates.
#
# Specifically, if x30 and y30 affect a gate, and inputs x31,y31,x32,y32,...
# don't, we assign it number 30, and then sort by affected values.
def sort_gates(gates: Gate*, ngates: int) -> None:
    assert ngates < 250
    sort_values: int[250]
    memset(sort_values, 0, sizeof(sort_values))

    maxlen = 400
    todo: byte[4][400]
    done: byte[4][400]

    for inputnum = 0; inputnum < 45; inputnum++:
        sprintf(todo[0], "x%02d", inputnum)  # e.g. x06
        sprintf(todo[1], "y%02d", inputnum)  # e.g. y06
        todo_len = 2
        done_len = 0

        while todo_len > 0:
            name: byte[4] = todo[--todo_len]
            assert strlen(name) == 3

            found = False
            for i = 0; i < done_len; i++:
                if strcmp(done[i], name) == 0:
                    found = True
            if found:
                continue

            for i = 0; i < ngates; i++:
                if strcmp(gates[i].inputs[0], name) == 0 or strcmp(gates[i].inputs[1], name) == 0:
                    sort_values[i] = inputnum + 1  # never zero
                    assert todo_len < maxlen
                    todo[todo_len++] = gates[i].output

            assert done_len < maxlen
            done[done_len++] = name

    # stupid sort algorithm
    while True:
        did_something = False
        for i = 1; i < ngates; i++:
            if sort_values[i-1] > sort_values[i]:
                memswap(&sort_values[i-1], &sort_values[i], sizeof(sort_values[0]))
                memswap(&gates[i-1], &gates[i], sizeof(gates[0]))
                did_something = True
        if not did_something:
            break


def sort_strings(strings: byte**, nstrings: int) -> None:
    # stupid sort algorithm
    while True:
        did_something = False
        for i = 1; i < nstrings; i++:
            if strcmp(strings[i-1], strings[i]) > 0:
                memswap(&strings[i-1], &strings[i], sizeof(strings[0]))
                did_something = True
        if not did_something:
            break


# Returns number of errors: 1 if connection is wrong, 0 if it is correct.
# g2g = gate to gate
def check_g2g(from: Gate*, to: Gate*) -> int:
    if strcmp(from->output, to->inputs[0]) == 0 or strcmp(from->output, to->inputs[1]) == 0:
        return 0
    else:
        return 1


# Returns number of errors: 1 if connection is wrong, 0 if it is correct.
# g2o = gate to output
def check_g2o(from: Gate*, znum: int) -> int:
    znn: byte[10]  # e.g. z05
    sprintf(znn, "z%02d", znum)
    if strcmp(from->output, znn) == 0:
        return 0
    else:
        return 1


# Determines how badly the sum machine seems to be wired.
# Zero is a machine that is working as expected.
def count_errors(orig_gates: Gate*, ngates: int) -> int:
    # Make copy of input to avoid surprises. Can mess up indexing in surprising
    # ways if we don't do this.
    assert ngates <= 250
    gates: Gate[250]
    memcpy(gates, orig_gates, ngates * sizeof(gates[0]))

    # Sort copy, not original.
    sort_gates(gates, ngates)

    gate_arrays: Gate[45][5]
    counts = [0, 0, 0, 0, 0]
    for i = 0; i < ngates; i++:
        type_index = gates[i].gtype as int
        assert counts[type_index] < 45
        gate_arrays[type_index][counts[type_index]++] = gates[i]

    ixor = GateType::InputXor as int
    iand = GateType::InputAnd as int
    oxor = GateType::OutputXor as int
    oand = GateType::OverflowAnd as int
    oor = GateType::OverflowOr as int

    # With real input, there are 45 adders, but the first adder is simpler than others.
    # It only has two gates: InputXor for output, InputAnd for overflow/carry.
    num_adders = ngates/5 + 1
    assert counts[ixor] == num_adders
    assert counts[iand] == num_adders
    assert counts[oxor] == num_adders - 1
    assert counts[oand] == num_adders - 1
    assert counts[oor] == num_adders - 1

    error_count = 0

    # First adder: InputXor for output
    error_count += check_g2o(&gate_arrays[ixor][0], 0)

    # First adder: carry into next OutputXor and OverflowAnd
    error_count += check_g2g(&gate_arrays[iand][0], &gate_arrays[oxor][0])
    error_count += check_g2g(&gate_arrays[iand][0], &gate_arrays[oand][0])

    for i = 1; i < num_adders; i++:
        # Remaining adders: InputXor goes to OutputXor and OverflowAnd
        error_count += check_g2g(&gate_arrays[ixor][i], &gate_arrays[oxor][i-1])
        error_count += check_g2g(&gate_arrays[ixor][i], &gate_arrays[oand][i-1])

        # Remaining adders: InputAnd goes to OverflowOr
        error_count += check_g2g(&gate_arrays[iand][i], &gate_arrays[oor][i-1])

        # Remaining adders: OutputXor computes the result
        error_count += check_g2o(&gate_arrays[oxor][i-1], i)

        # Remaining adders: OverflowAnd goes to OverflowOr
        error_count += check_g2g(&gate_arrays[oand][i-1], &gate_arrays[oor][i-1])

        if i != num_adders-1:
            # Remaining adders except last: OverflowOr goes to next adder's
            # OutputXor and OverflowAnd
            error_count += check_g2g(&gate_arrays[oor][i-1], &gate_arrays[oxor][i])
            error_count += check_g2g(&gate_arrays[oor][i-1], &gate_arrays[oand][i])

    # Last adder: OverflowOr goes to last output (z45 with real input)
    error_count += check_g2o(&gate_arrays[oor][num_adders-2], num_adders)

    return error_count


def read_gates(filename: byte*, ngates: int*) -> Gate[250]:
    gates: Gate[250]
    memset(gates, 0, sizeof(gates))  # TODO: why is this needed to prevent compiler warning?
    *ngates = 0

    f = fopen(filename, "r")
    assert f != NULL

    line: byte[100]
    while fgets(line, sizeof(line) as int, f) != NULL:
        # Remove comments, if any. I wrote test file by hand.
        if strstr(line, "#") != NULL:
            *strstr(line, "#") = '\0'

        trim_ascii_whitespace(line)

        # ignore blanks and comment-only lines
        if line[0] == '\0':
            continue

        # AoC input files have unnecessary lines at start, e.g. "x01: 1"
        if strstr(line, ":") != NULL:
            continue

        g: Gate
        op: byte[4]
        n = sscanf(line, "%3s %3s %3s -> %3s", &g.inputs[0], op, &g.inputs[1], &g.output)
        assert n == 4

        # Inputs that don't come from other gates cannot be connected wrong, so
        # the wiring mistakes don't mess this up.
        if (
            (g.inputs[0][0] == 'x' and g.inputs[1][0] == 'y')
            or (g.inputs[0][0] == 'y' and g.inputs[1][0] == 'x')
        ):
            # Handles input directly, so it must be InputXor or InputAnd
            if strcmp(op, "XOR") == 0:
                g.gtype = GateType::InputXor
            elif strcmp(op, "AND") == 0:
                g.gtype = GateType::InputAnd
            else:
                assert False
        else:
            if strcmp(op, "XOR") == 0:
                g.gtype = GateType::OutputXor
            elif strcmp(op, "AND") == 0:
                g.gtype = GateType::OverflowAnd
            elif strcmp(op, "OR") == 0:
                g.gtype = GateType::OverflowOr
            else:
                assert False

        assert *ngates < sizeof(gates)/sizeof(gates[0])
        gates[(*ngates)++] = g

    fclose(f)
    return gates


# Ensures that counting errors returns 0 when there are no errors.
def test_counting() -> None:
    ngates: int
    gates = read_gates("sampleinput2-correct.txt", &ngates)
    assert count_errors(gates, ngates) == 0


def fix_order_of_outputs(gates: Gate*, ngates: int, progress_prints: bool) -> None:
    while count_errors(gates, ngates) > 0:
        if progress_prints:
            printf("---------- There are %d errors. ----------\n", count_errors(gates, ngates))
            fflush(stdout)

        # Swap two gates so that error count decreases as much as possible
        best_g1: Gate* = NULL
        best_g2: Gate* = NULL
        best_count = -1

        for g1 = &gates[0]; g1 < &gates[ngates]; g1++:
            if progress_prints:
                printf("%lld/%d", (((g1 as long) - (&gates[0] as long)) / sizeof(gates[0])) as int, ngates)
                fflush(stdout)

            for g2 = &g1[1]; g2 < &gates[ngates]; g2++:
                memswap(&g1->output, &g2->output, sizeof(g1->output))
                count = count_errors(gates, ngates)
                memswap(&g1->output, &g2->output, sizeof(g1->output))

                if progress_prints:
                    printf(".")
                    fflush(stdout)

                if best_count == -1 or count < best_count:
                    if progress_prints:
                        printf("[%d]", count)
                        fflush(stdout)

                    best_count = count
                    best_g1 = g1
                    best_g2 = g2

            if progress_prints:
                printf("\n")
                fflush(stdout)

        assert best_g1 != NULL
        assert best_g2 != NULL
        memswap(&best_g1->output, &best_g2->output, sizeof(best_g1->output))


def main() -> int:
    test_counting()

    ngates: int
    gates = read_gates("sampleinput2-mixed.txt", &ngates)
    orig_gates = gates

    fix_order_of_outputs(gates, ngates, False)  # use True instead of False for actual input

    bad_outputs: byte*[10]
    bad_outputs_len = 0
    for i = 0; i < ngates; i++:
        if strcmp(orig_gates[i].output, gates[i].output) != 0:
            assert bad_outputs_len < 10
            bad_outputs[bad_outputs_len++] = orig_gates[i].output

    # Output: 4 gates were in the wrong place (2 swaps)
    printf("%d gates were in the wrong place (%d swaps)\n", bad_outputs_len, bad_outputs_len / 2)

    # Output: ia1,ia2,ix2,ix3
    sort_strings(bad_outputs, bad_outputs_len)
    for i = 0; i < bad_outputs_len; i++:
        if i != 0:
            printf(",")
        printf("%s", bad_outputs[i])
    printf("\n")

    return 0
