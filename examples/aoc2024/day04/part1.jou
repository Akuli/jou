import "../../aoc2023/grid.jou"
import "stdlib/str.jou"
import "stdlib/mem.jou"
import "stdlib/io.jou"


def count_in_string(s: byte*) -> int:
    n = 0
    for i = 0; s[i] != '\0'; i++:
        if starts_with(&s[i], "XMAS") or starts_with(&s[i], "SAMX"):
            n++
    return n


def count_diagonals(grid: Grid*) -> int:
    big_size = grid->width + grid->height + 69
    temp_string: byte* = malloc(big_size)
    assert temp_string != NULL

    result = 0

    for c = -big_size; c <= big_size; c++:
        # diagonals like /, along lines whose equation is y = x + c
        p = temp_string
        for x = 0; x < grid->width; x++:
            y = x + c
            if 0 <= y and y < grid->height:
                *p++ = grid->get([x, y])
        *p = '\0'
        result += count_in_string(temp_string)

        # diagonals like \, along lines whose equation is y = -x + c
        p = temp_string
        for x = 0; x < grid->width; x++:
            y = -x + c
            if 0 <= y and y < grid->height:
                *p++ = grid->get([x, y])
        *p = '\0'
        result += count_in_string(temp_string)

    free(temp_string)
    return result


def main() -> int:
    f = fopen("sampleinput.txt", "r")
    grid = read_grid_from_file(f)
    fclose(f)

    horizontal = count_in_string(grid.data)
    grid.transpose()
    vertical = count_in_string(grid.data)
    diagonal = count_diagonals(&grid)
    printf("%d\n", horizontal + vertical + diagonal)  # Output: 18

    free(grid.data)
    return 0
