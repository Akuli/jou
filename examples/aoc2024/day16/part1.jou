# This was really an exercise in learning Dijkstra's algorithm.
# I finally understood why it works!!! :)

import "stdlib/io.jou"
import "stdlib/str.jou"
import "stdlib/math.jou"
import "stdlib/mem.jou"
import "../../aoc2023/grid.jou"


global visual_mode: bool


class State:
    place: int[2]
    direction: int[2]
    score: int

    def next_states(self) -> State[3]:
        x = self->place[0]
        y = self->place[1]
        dx = self->direction[0]
        dy = self->direction[1]

        if visual_mode:
            turn_cost = 1
        else:
            turn_cost = 1000

        return [
            # Go forward
            State{place=[x+dx, y+dy], direction=[dx, dy], score=self->score + 1},
            # Turn both ways
            State{place=[x, y], direction=[-dy, dx], score=self->score + turn_cost},
            State{place=[x, y], direction=[dy, -dx], score=self->score + turn_cost},
        ]


def direction_to_0123(dir: int[2]) -> int:
    if dir[0] == 1 and dir[1] == 0:
        return 0  # right
    if dir[0] == 0 and dir[1] == 1:
        return 1  # down
    if dir[0] == -1 and dir[1] == 0:
        return 2  # left
    if dir[0] == 0 and dir[1] == -1:
        return 3  # up
    assert False


def min4(a: int, b: int, c: int, d: int) -> int:
    return min(min(a, b), min(c, d))


def visualize(grid: Grid*, smallest_scores: int[4][150][150]*, todo: State*, todo_len: int) -> None:
    assert visual_mode

    for y = 0; y < grid->height; y++:
        for x = 0; x < grid->width; x++:
            in_todo = False
            for i = 0; i < todo_len; i++:
                if todo[i].place[0] == x and todo[i].place[1] == y:
                    in_todo = True
            if in_todo:
                printf("\x1b[1;44m")  # ANSI code for yellow

            if grid->get([x, y]) == '#':
                putchar('#')
            else:
                best = min4(
                    (*smallest_scores)[x][y][0],
                    (*smallest_scores)[x][y][1],
                    (*smallest_scores)[x][y][2],
                    (*smallest_scores)[x][y][3],
                )
                s = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
                if best >= strlen(s):
                    putchar('.')
                else:
                    putchar(s[best])

            if in_todo:
                printf("\x1b[1;0m")  # ANSI code reset
        putchar('\n')

    printf("\n\n\n")
    fflush(stdout)


if WINDOWS:
    # dummy function, hopefully nobody wants to use visual mode on windows
    def usleep(x: int) -> None:
        pass
else:
    declare usleep(x: int) -> int


def main() -> int:
    # This file is how I finally learned Dijkstra's algorithm :)
    # Set to true to see what I saw. (Something else than windows required.)
    visual_mode = False

    f = fopen("sampleinput.txt", "r")
    assert f != NULL
    grid = read_grid_from_file(f)
    fclose(f)

    int_max = 0x7fffffff  # TODO: belongs to stdlib

    assert grid.width <= 150
    assert grid.height <= 150
    smallest_scores: int[4][150][150]* = malloc(sizeof(*smallest_scores))
    assert smallest_scores != NULL

    # (*smallest_scores)[x][y][direction as 0123] = shortest path to x,y counting turns
    for x = 0; x < grid.width; x++:
        for y = 0; y < grid.height; y++:
            (*smallest_scores)[x][y] = [int_max, int_max, int_max, int_max]

    todo: State[2000]
    todo[0] = State{place = grid.find_first('S'), direction = [1, 0]}
    todo_len = 1
    while todo_len > 0:
        # Pop from front (fast enough because todo list is short)
        # I tried popping from end, that causes lots of unnecessary recalculating.
        state = todo[0]
        todo_len--
        memmove(&todo[0], &todo[1], todo_len * sizeof(todo[0]))

        scoreptr = &(*smallest_scores)[state.place[0]][state.place[1]][direction_to_0123(state.direction)]

        # Ignore states that have ran into walls.
        if grid.get(state.place) == '#':
            continue

        # Ignore this state if some other todo list item has already reached
        # the same place with a better score. That other todo list item will do
        # a better job when discovering other paths.
        #
        # This is the thing I didn't realize earlier :)
        if state.score < *scoreptr:
            *scoreptr = state.score
            next_states: State[3] = state.next_states()
            assert todo_len + 3 <= sizeof(todo)/sizeof(todo[0])
            memcpy(&todo[todo_len], &next_states, sizeof(next_states))
            todo_len += 3

        if visual_mode:
            visualize(&grid, smallest_scores, todo, todo_len)
            usleep(100000)

    pos = grid.find_first('E')
    best = min4(
        (*smallest_scores)[pos[0]][pos[1]][0],
        (*smallest_scores)[pos[0]][pos[1]][1],
        (*smallest_scores)[pos[0]][pos[1]][2],
        (*smallest_scores)[pos[0]][pos[1]][3],
    )
    printf("%d\n", best)  # Output: 7036

    return 0
