import "stdlib/io.jou"
import "stdlib/mem.jou"
import "stdlib/ascii.jou"
import "stdlib/str.jou"


def read_rules(file: FILE*, nrules: int*) -> int[2]*:
    *nrules = 0

    max_rules = 2000
    rules: int[2]* = malloc(sizeof(rules[0]) * max_rules)
    assert rules != NULL

    line: byte[100]
    while fgets(line, sizeof(line) as int, file) != NULL:
        trim_ascii_whitespace(line)
        if line[0] == '\0':
            # This is the blank line that separates rules and jobs
            return rules

        rule: int[2]
        r = sscanf(line, "%d|%d", &rule[0], &rule[1])
        assert r == 2

        assert *nrules < max_rules
        rules[*nrules] = rule
        ++*nrules

    return rules


# Each returned print job is terminated by -1
def read_print_jobs(file: FILE*, njobs: int*) -> int[100]*:
    *njobs = 0

    max_jobs = 500
    jobs: int[100]* = malloc(sizeof(jobs[0]) * max_jobs)
    assert jobs != NULL

    line: byte[100]
    while fgets(line, sizeof(line) as int, file) != NULL:
        trim_ascii_whitespace(line)
        job: int[100]
        num_pages = 0

        p: byte* = line
        while True:
            assert num_pages < sizeof(job)/sizeof(job[0])
            job[num_pages++] = atoi(p)
            p = strstr(p, ",")
            if p == NULL:
                break
            p++  # skip comma

        assert num_pages < sizeof(job)/sizeof(job[0])
        job[num_pages] = -1

        assert *njobs < max_jobs
        jobs[(*njobs)++] = job

    return jobs


def find_page(job: int*, value: int) -> int:
    for i = 0; job[i] != -1; i++:
        if job[i] == value:
            return i
    return -1


def job_is_valid(rules: int[2]*, nrules: int, job: int*) -> bool:
    for i = 0; i < nrules; i++:
        first_idx = find_page(job, rules[i][0])
        second_idx = find_page(job, rules[i][1])
        if first_idx != -1 and second_idx != -1 and first_idx >= second_idx:
            return False
    return True


def main() -> int:
    f = fopen("sampleinput.txt", "r")
    assert f != NULL

    nrules: int
    rules = read_rules(f, &nrules)

    njobs: int
    jobs = read_print_jobs(f, &njobs)

#    for i = 0; i < nrules; i++:
#        printf("Rule %d: %d|%d\n", i, rules[i][0], rules[i][1])
#
#    for i = 0; i < njobs; i++:
#        printf("Job %d", i)
#        if job_is_valid(rules, nrules, jobs[i]):
#            printf(" VALID")
#        else:
#            printf(" invalid")
#        printf(": ")
#        for k = 0; jobs[i][k] != -1; k++:
#            if k != 0:
#                printf(",")
#            printf("%d", jobs[i][k])
#        printf("\n")

    midsum = 0L
    for i = 0; i < njobs; i++:
        job = jobs[i]
        if job_is_valid(rules, nrules, job):
            n = 0
            while job[n] != -1:
                n++
            assert n % 2 == 1
            midsum += job[(n - 1) / 2]

    printf("%d\n", midsum)  # Output: 143

    free(rules)
    free(jobs)
    return 0
