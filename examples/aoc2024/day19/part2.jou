import "stdlib/list.jou"
import "stdlib/ascii.jou"
import "stdlib/str.jou"
import "stdlib/io.jou"
import "stdlib/mem.jou"


class CacheEntry:
    towel: byte[40]
    value: int64


global avail_cache: CacheEntry[1000]
global avail_cache_len: int


def count_availability(towel: byte*, patterns: List[byte*]) -> int64:
    cacheptr: CacheEntry* = NULL
    if strlen(towel) < sizeof(avail_cache[0].towel):
        # Find value from cache if exists
        for i = 0; i < avail_cache_len; i++:
            if strcmp(avail_cache[i].towel, towel) == 0:
                return avail_cache[i].value

        # Create new cache entry
        assert avail_cache_len < sizeof(avail_cache)/sizeof(avail_cache[0])
        cacheptr = &avail_cache[avail_cache_len++]
        strcpy(cacheptr.towel, towel)

    if towel[0] == '\0':
        result = 1 as int64
    else:
        result = 0 as int64
        for p = patterns.ptr; p < patterns.end(); p++:
            if starts_with(towel, *p):
                result += count_availability(&towel[strlen(*p)], patterns)

    if cacheptr != NULL:
        cacheptr.value = result

    return result


def main() -> int:
    f = fopen("sampleinput.txt", "r")
    assert f != NULL

    patterns_buf: byte[4096]
    ret = fgets(patterns_buf, sizeof(patterns_buf) as int, f)
    assert ret != NULL
    patterns = split_by_ascii_whitespace(patterns_buf)

    # remove trailing commas
    for p = patterns.ptr; p < patterns.end(); p++:
        (*p)[strcspn(*p, ",")] = '\0'

    line: byte[1000]
    result = 0 as int64

    while fgets(line, sizeof(line) as int, f) != NULL:
        trim_ascii_whitespace(line)
        if line[0] == '\0':
            # skip blank line
            continue

        # Re-fill the cache every time, so that it works in whatever way
        # is best for this line of input.
        avail_cache_len = 0

        result += count_availability(line, patterns)

    printf("%lld\n", result)  # Output: 16

    fclose(f)
    free(patterns.ptr)
    return 0
