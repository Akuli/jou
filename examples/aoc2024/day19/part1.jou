import "stdlib/list.jou"
import "stdlib/ascii.jou"
import "stdlib/str.jou"
import "stdlib/io.jou"
import "stdlib/mem.jou"


def is_available(towel: byte*, patterns: List[byte*]) -> bool:
    if towel[0] == '\0':
        return True

    for p = patterns.ptr; p < patterns.end(); p++:
        if starts_with(towel, *p) and is_available(&towel[strlen(*p)], patterns):
            return True
    return False


def main() -> int:
    f = fopen("sampleinput.txt", "r")
    assert f != NULL

    patterns_buf: byte[4096]
    ret = fgets(patterns_buf, sizeof(patterns_buf) as int, f)
    assert ret != NULL
    patterns = split_by_ascii_whitespace(patterns_buf)

    # remove trailing commas
    for p = patterns.ptr; p < patterns.end(); p++:
        (*p)[strcspn(*p, ",")] = '\0'

    line: byte[1000]
    counter = 0

    while fgets(line, sizeof(line) as int, f) != NULL:
        trim_ascii_whitespace(line)
        if line[0] == '\0':
            # skip blank line
            continue

        if is_available(line, patterns):
            counter++

    printf("%d\n", counter)  # Output: 6

    fclose(f)
    free(patterns.ptr)
    return 0
