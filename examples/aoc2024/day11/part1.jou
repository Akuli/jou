import "stdlib/ascii.jou"
import "stdlib/list.jou"
import "stdlib/io.jou"
import "stdlib/mem.jou"
import "stdlib/str.jou"


# count_digits(999) = 3
# count_digits(1000) = 4
def count_digits(n: long) -> int:
    result = 0
    while n > 0:
        n /= 10
        result++
    return result


# split_digits(1234) == [12, 34]
def split_digits(n: long) -> long[2]:
    length = count_digits(n)
    assert length % 2 == 0

    power_of_10 = 1
    for i = 0; i < length/2; i++:
        power_of_10 *= 10

    return [n / power_of_10, n % power_of_10]


def blink(stones: List[long]*) -> None:
    old_len = stones->len
    for i = 0; i < old_len; i++:
        if stones->ptr[i] == 0:
            stones->ptr[i] = 1
        elif count_digits(stones->ptr[i]) % 2 == 0:
            pair = split_digits(stones->ptr[i])
            stones->ptr[i] = pair[0]
            stones->append(pair[1])
        else:
            stones->ptr[i] *= 2024


def main() -> int:
    f = fopen("sampleinput.txt", "r")
    assert f != NULL
    line: byte[100] = ""
    fgets(line, sizeof(line) as int, f)
    fclose(f)

    words = split_by_ascii_whitespace(line)

    stones = List[long]{}
    for p = words.ptr; p < words.end(); p++:
        stones.append(atoll(*p))

    free(words.ptr)

    for i = 0; i < 25; i++:
        blink(&stones)
    printf("%d\n", stones.len)  # Output: 55312

    free(stones.ptr)
    return 0
