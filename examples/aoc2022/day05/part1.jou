import "stdlib/io.jou"
import "stdlib/str.jou"
import "stdlib/mem.jou"
import "stdlib/list.jou"


def reverse(list: List[byte]) -> None:
    for i = 0; i < list.len/2; i++:
        memswap(&list.ptr[i], &list.ptr[list.len - i - 1], sizeof(list.ptr[0]))


def main() -> int:
    f = fopen("sampleinput.txt", "r")
    assert f != NULL

    stacks: List[byte][9]
    memset(stacks, 0, sizeof(stacks))

    line: byte[100]
    while fgets(line, sizeof(line) as int, f) != NULL:
        if strstr(line, "[") == NULL:
            assert starts_with(line, " 1   2   3")
            break

        for i = 1; i < strlen(line); i += 4:
            if line[i] != ' ':
                assert i/4 < sizeof(stacks)/sizeof(stacks[0])
                stacks[i/4].append(line[i])

    for i = 0; i < 9; i++:
        reverse(stacks[i])

    # skip blank line
    fgets(line, sizeof(line) as int, f)
    assert strcmp(line, "\n") == 0

    n, src, dest: int
    while fscanf(f, "move %d from %d to %d\n", &n, &src, &dest) == 3:
        src--
        dest--
        assert 0 <= src and src < 9 and 0 <= dest and dest < 9
        while n --> 0:
            stacks[dest].append(stacks[src].pop())

    # Output: CMZ
    for i = 0; i < 9 and stacks[i].len > 0; i++:
        printf("%c", stacks[i].end()[-1])
    printf("\n")

    fclose(f)
    for i = 0; i < 9; i++:
        free(stacks[i].ptr)

    return 0
