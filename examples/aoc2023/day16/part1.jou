import "stdlib/math.jou"
import "stdlib/list.jou"
import "stdlib/io.jou"
import "stdlib/mem.jou"
import "../grid.jou"


# Returns same direction twice, if there is only one direction where to go
def get_new_directions(old_dir: int[2], character: byte) -> int[2][2]:
    dx = old_dir[0]
    dy = old_dir[1]

    assert (abs(dx) == 1 and dy == 0) or (abs(dy) == 1 and dx == 0)

    if character == '.' or (character == '|' and dx == 0) or (character == '-' and dy == 0):
        return [old_dir, old_dir]

    # Reflect across line y=x: from high school math, we know this swaps x and y coordinates
    if character == '\\':
        return [[dy, dx], [dy, dx]]

    # Reflect across line y=-x: can swap x and y, and then rotate 180deg.
    # This is because rotating the mirror 90deg rotates light 180deg.
    if character == '/':
        return [[-dy, -dx], [-dy, -dx]]

    # split
    if character == '|' and dy == 0:
        return [[0, -1], [0, 1]]
    if character == '-' and dx == 0:
        return [[-1, 0], [1, 0]]

    assert False


class LightBeam:
    location: int[2]
    direction: int[2]


def direction_to_int(d: int[2]) -> int:
    if d[0] == 0 and d[1] == -1:
        return 0
    if d[0] == 0 and d[1] == 1:
        return 1
    if d[0] == -1 and d[1] == 0:
        return 2
    if d[0] == 1 and d[1] == 0:
        return 3
    assert False


# How return value works:
# (*returnvalue)[x][y][direction_to_int(dir)] = True, if there was beam at (x,y) going in direction.
def run_beam(grid: Grid*, start_beam: LightBeam) -> bool[4][200][200]*:
    assert grid->width < 200
    assert grid->height < 200
    result: bool[4][200][200]* = calloc(1, sizeof(*result))
    assert result != NULL

    todo = List[LightBeam]{}
    todo.append(start_beam)

    while todo.len > 0:
        beam = todo.pop()
        x = beam.location[0]
        y = beam.location[1]
        ptr = &(*result)[x][y][direction_to_int(beam.direction)]
        if *ptr:
            # we have already handled this beam --> prevent getting stuck in loop
            continue
        *ptr = True

        next_dirs = get_new_directions(beam.direction, grid->get([x, y]))
        for i = 0; i < 2; i++:
            dir = next_dirs[i]
            location = [beam.location[0] + dir[0], beam.location[1] + dir[1]]
            if grid->is_in_bounds(location):
                todo.append(LightBeam{location = location, direction = dir})

    free(todo.ptr)
    return result


def main() -> int:
    f = fopen("sampleinput.txt", "r")
    assert f != NULL
    grid = read_grid_from_file(f)
    fclose(f)

    visited = run_beam(&grid, LightBeam{location = [0,0], direction = [1,0]})

    n = 0
    for x = 0; x < 200; x++:
        for y = 0; y < 200; y++:
            for i = 0; i < 4; i++:
                if (*visited)[x][y][i]:
                    n++
                    break
    printf("%d\n", n)  # Output: 46

    free(grid.data)
    free(visited)
    return 0
