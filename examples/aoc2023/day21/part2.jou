import "stdlib/io.jou"
import "stdlib/mem.jou"
import "../grid.jou"


def count_dots_at_even_and_odd_places(grid: Grid) -> int[2]:
    even = 0
    odd = 0

    for x = 0; x < grid.width; x++:
        for y = 0; y < grid.height; y++:
            if grid.get([x, y]) == '.':
                if (x + y) % 2 == 0:
                    even++
                else:
                    odd++

    return [even, odd]


# How many steps are needed to reach anywhere in the grid from a given starting point?
def how_to_reach_anywhere_from_given_point(grid: Grid, start: int[2]) -> int:
    grid = grid.copy()
    assert grid.count('S') == 0
    grid.set(start, 'S')

    steps = 0
    while grid.count('.') != 0:
        steps++

        grid2 = grid.copy()
        for x = 0; x < grid.width; x++:
            for y = 0; y < grid.height; y++:
                if grid.get([x, y]) == 'S':
                    neighbors = [[x-1, y], [x+1, y], [x, y-1], [x, y+1]]
                    for i = 0; i < 4; i++:
                        if grid2.is_in_bounds(neighbors[i]) and grid2.get(neighbors[i]) == '.':
                            grid2.set(neighbors[i], 'S')

        free(grid.data)
        grid = grid2

    free(grid.data)
    return steps


class State:
    grid: Grid

    num_odd_dots: int  # how many dots at x,y in grid so that x+y is odd number
    num_even_dots: int

    # in this many steps, any place in the grid will reach any other place in the grid
    how_to_reach_anywhere: int

    def fill_cached_values(self) -> None:
        dots = count_dots_at_even_and_odd_places(self->grid)
        self->num_even_dots = dots[0]
        self->num_odd_dots = dots[1]

        assert self->grid.width == self->grid.height
        side = self->grid.width
        assert side % 2 == 1
        self->how_to_reach_anywhere = 2 * how_to_reach_anywhere_from_given_point(self->grid, [side/2,side/2])


def count_reachables_in_square(state: State*, entry_point_of_grid: int[2], steps_remaining_at_entry: int) -> int:
    if steps_remaining_at_entry < 0:
        return 0

    assert state->how_to_reach_anywhere != 0   # if this fails, cache is not ready
    if steps_remaining_at_entry > state->how_to_reach_anywhere:
        # It will fill the whole grid
        initial_parity = (entry_point_of_grid[0] + entry_point_of_grid[1]) % 2
        final_parity = (initial_parity + steps_remaining_at_entry) % 2
        if final_parity == 0:
            return state->num_even_dots
        else:
            return state->num_odd_dots

    # calculate it in the slow and boring way
    grid = state->grid.copy()
    assert grid.count('S') == 0
    grid.set(entry_point_of_grid, 'S')

    for i = 0; i < steps_remaining_at_entry; i++:
        assert grid.count('S') > 0

        current_places = grid.find_all('S')
        for k = 0; current_places[k][0] != -1; k++:
            grid.set(current_places[k], '.')

        for k = 0; current_places[k][0] != -1; k++:
            x = current_places[k][0]
            y = current_places[k][1]
            neighbors = [[x-1,y], [x+1,y], [x,y-1], [x,y+1]]
            for n = &neighbors[0]; n < &neighbors[4]; n++:
                if grid.is_in_bounds(*n) and grid.get(*n) == '.':
                    grid.set(*n, 'S')

        free(current_places)

    result = grid.count('S')
    free(grid.data)
    assert result > 0
    return result


# Consider a ring like this, where each dot or letter is a copy of the input.
#
#   ...............
#   .......F.......
#   ......E.G......
#   .....E...G.....
#   ....E.....G....
#   ...D...x...H...
#   ....C.....A....
#   .....C...A.....
#   ......C.A......
#   .......B.......
#   ...............
#
# The radius of the ring is manhattan distance (x distance + y distance) of any ring point
# to the middle. In the picture it is 4.
#
# Assuming that:
#   - S is in the middle
#   - you can freely move from start directly to up/down/left/right
#   - there are blank borders in the grid
#
# every grid marked with "A" has the same number of reachable squares, same with other letters.
# This is because the best path is always through the top left corner of any A.
#
# To get to the top left corner of any A, the number of steps from S needed is
#
#   side*radius - 1
#
# where "side" is the size of the input square. One side is enough to get to a corner of
# the middle square and just step out of it. In above/below directions, this is
#
#   side*radius - side/2
#
# where side/2 is actually (side-1)/2 because it uses Jou's floor division.
# For example, for H we enter through the middle of its vertical left side.
# Compared to its top left or bottom left corner, this saves (side-1)/2 steps up or down.
def count_reachables_in_ring(state: State*, step_count: int, radius: int) -> long:
    assert state->grid.width == state->grid.height
    side = state->grid.width
    assert side % 2 == 1

    if radius == 0:
        # just the middle
        return count_reachables_in_square(state, [side/2,side/2], step_count)

    assert radius >= 1

    steps_remaining_diagonally = step_count - side*radius - 1
    steps_remaining_above_or_below = step_count - side/2 - side*(radius - 1)

    # Above with radius=4, there's three A's.
    result = 0L
    result += (radius-1) * count_reachables_in_square(state, [0,0], steps_remaining_diagonally)
    result += (radius-1) * count_reachables_in_square(state, [0,side-1], steps_remaining_diagonally)
    result += (radius-1) * count_reachables_in_square(state, [side-1,0], steps_remaining_diagonally)
    result += (radius-1) * count_reachables_in_square(state, [side-1,side-1], steps_remaining_diagonally)
    result += count_reachables_in_square(state, [0, side/2], steps_remaining_above_or_below)
    result += count_reachables_in_square(state, [side-1, side/2], steps_remaining_above_or_below)
    result += count_reachables_in_square(state, [side/2, 0], steps_remaining_above_or_below)
    result += count_reachables_in_square(state, [side/2, side-1], steps_remaining_above_or_below)
    return result


def replace_unreachable_points_with_walls(grid: Grid*) -> None:
    grid2 = grid->copy()

    # Mark neighbors of S as S until we no longer mark anything
    did_something = True
    while did_something:
        did_something = False
        for x = 0; x < grid2.width; x++:
            for y = 0; y < grid2.height; y++:
                if grid2.get([x, y]) == 'S':
                    neighbors = [[x-1, y], [x+1, y], [x, y-1], [x, y+1]]
                    for i = 0; i < 4; i++:
                        if grid2.is_in_bounds(neighbors[i]) and grid2.get(neighbors[i]) == '.':
                            grid2.set(neighbors[i], 'S')
                            did_something = True

    for x = 0; x < grid2.width; x++:
        for y = 0; y < grid2.height; y++:
            if grid2.get([x, y]) == '.':
                grid->set([x, y], '#')

    free(grid2.data)


def main() -> int:
    state = State{}

    f = fopen("input", "r")
    assert f != NULL
    state.grid = read_grid_from_file(f)
    fclose(f)

    replace_unreachable_points_with_walls(&state.grid)

    assert state.grid.width == state.grid.height
    side = state.grid.width
    assert side % 2 == 1

    assert state.grid.count('S') == 1
    S_place = state.grid.find_first('S')
    assert S_place[0] == side/2
    assert S_place[1] == side/2
    state.grid.set(S_place, '.')

    # The square should have '.' at boundary, and in middle row and column (now that S is gone)
    for x = 0; x < side; x++:
        for y = 0; y < side; y++:
            if x == 0 or x == side/2 or x == side-1 or y == 0 or y == side/2 or y == side-1:
                assert state.grid.get([x, y]) == '.'

    state.fill_cached_values()

    step_count = 26501365
    result = 0L

    r = 1
    while True:
        add = count_reachables_in_ring(&state, step_count, r++)
        assert add >= 0
        if add == 0:
            break
        result += add

    printf("%lld\n", result)

    free(state.grid.data)
    return 0
