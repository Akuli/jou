import "stdlib/mem.jou"
import "stdlib/str.jou"
import "stdlib/math.jou"
import "stdlib/io.jou"
import "../grid.jou"


class Path:
    points: int[2]*
    len: int
    alloc: int

    def append(self, point: int[2]) -> None:
        if self->len == self->alloc:
            if self->alloc == 0:
                self->alloc = 4
            else:
                self->alloc *= 2

            self->points = realloc(self->points, sizeof(self->points[0]) * self->alloc)
            assert self->points != NULL

        self->points[self->len++] = point

    def copy(self) -> Path:
        result = Path{}
        for i = 0; i < self->len; i++:
            result.append(self->points[i])
        return result

    def last(self) -> int[2]:
        assert self->len > 0
        return self->points[self->len - 1]

    # result contains an empty path for each impossible direction
    def get_next_paths(self, grid: Grid*) -> Path[4]:
        directions = [[-1, 0], [1, 0], [0, -1], [0, 1]]
        result = [Path{}, Path{}, Path{}, Path{}]

        for i = 0; i < 4; i++:
            dx = directions[i][0]
            dy = directions[i][1]
            last = self->last()
            x = last[0] + dx
            y = last[1] + dy

            can_go = grid->is_in_bounds([x, y]) and (
                grid->get([x, y]) == '.'
                or (grid->get([x, y]) == '<' and dx == -1)
                or (grid->get([x, y]) == '>' and dx == 1)
                or (grid->get([x, y]) == '^' and dy == -1)
                or (grid->get([x, y]) == 'v' and dy == 1)
            )

            if can_go:
                for k = 0; k < self->len; k++:
                    if self->points[k][0] == x and self->points[k][1] == y:
                        can_go = False
                        break

            if can_go:
                result[i] = self->copy()
                result[i].append([x, y])

        return result


def main() -> int:
    f = fopen("input", "r")
    assert f != NULL
    grid = read_grid_from_file(f)
    fclose(f)

    assert starts_with(grid.data, "#.#####")

    paths: Path[1000]
    paths[0] = Path{}
    paths[0].append([1, 0])
    npaths = 1

    result = 0
    while npaths > 0:
        p = paths[--npaths]
        last = p.last()
        if last[1] == grid.height - 1:
            # reached goal
            step_count = p.len - 1
            result = max(result, step_count)
        else:
            next: Path[4] = p.get_next_paths(&grid)
            for i = 0; i < 4; i++:
                if next[i].len > 0:
                    assert npaths < sizeof(paths)/sizeof(paths[0])
                    paths[npaths++] = next[i]
        free(p.points)

    printf("%d\n", result)
    free(grid.data)
    return 0
