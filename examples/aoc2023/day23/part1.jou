import "stdlib/list.jou"
import "stdlib/mem.jou"
import "stdlib/str.jou"
import "stdlib/math.jou"
import "stdlib/io.jou"
import "../grid.jou"


# result contains an empty path for each impossible direction
def get_next_paths(path: List[int[2]], grid: Grid*) -> List[int[2]][4]:
    assert path.len >= 1

    directions = [[-1, 0], [1, 0], [0, -1], [0, 1]]
    result = [List[int[2]]{}, List[int[2]]{}, List[int[2]]{}, List[int[2]]{}]

    for i = 0; i < 4; i++:
        dx = directions[i][0]
        dy = directions[i][1]
        last = path.end()[-1]
        x = last[0] + dx
        y = last[1] + dy

        can_go = grid.is_in_bounds([x, y]) and (
            grid.get([x, y]) == '.'
            or (grid.get([x, y]) == '<' and dx == -1)
            or (grid.get([x, y]) == '>' and dx == 1)
            or (grid.get([x, y]) == '^' and dy == -1)
            or (grid.get([x, y]) == 'v' and dy == 1)
        )

        if can_go:
            for k = 0; k < path.len; k++:
                if path.ptr[k][0] == x and path.ptr[k][1] == y:
                    can_go = False
                    break

        if can_go:
            result[i].extend(path)
            result[i].append([x, y])

    return result


def main() -> int:
    f = fopen("sampleinput.txt", "r")
    assert f != NULL
    grid = read_grid_from_file(f)
    fclose(f)

    assert starts_with(grid.data, "#.#####")

    paths: List[int[2]][1000]
    paths[0] = List[int[2]]{}
    paths[0].append([1, 0])
    npaths = 1

    result = 0
    while npaths > 0:
        p = paths[--npaths]
        last = p.end()[-1]
        if last[1] == grid.height - 1:
            # reached goal
            step_count = p.len - 1
            result = max(result, step_count as int)
        else:
            next: List[int[2]][4] = get_next_paths(p, &grid)
            for i = 0; i < 4; i++:
                if next[i].len > 0:
                    assert npaths < sizeof(paths)/sizeof(paths[0])
                    paths[npaths++] = next[i]
        free(p.ptr)

    printf("%d\n", result)  # Output: 94
    free(grid.data)
    return 0
