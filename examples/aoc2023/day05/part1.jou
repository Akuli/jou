import "stdlib/io.jou"
import "stdlib/str.jou"
import "stdlib/ascii.jou"
import "stdlib/mem.jou"


class Map:
    triples: int64[3][50]
    ntriples: int

    def add_triple(self, s: byte*) -> None:
        a, b, c: int64
        assert sscanf(s, "%lld %lld %lld", &a, &b, &c) == 3

        assert self.ntriples < sizeof(self.triples)/sizeof(self.triples[0])
        self.triples[self.ntriples++] = [a, b, c]

    def map_number(self, n: int64) -> int64:
        for i = 0; i < self.ntriples; i++:
            dest_start = self.triples[i][0]
            source_start = self.triples[i][1]
            range_length = self.triples[i][2]
            if source_start <= n and n < source_start+range_length:
                return n - source_start + dest_start
        return n


class Input:
    seed_numbers: int64[30]
    n_seed_numbers: int

    maps: Map[10]
    nmaps: int

    def add_seeds(self, line: byte*) -> None:
        assert self.n_seed_numbers == 0
        assert starts_with(line, "seeds: ")

        words = split_by_ascii_whitespace(line)
        for i = 1; i < words.len; i++:
            assert i < sizeof(self.seed_numbers) / sizeof(self.seed_numbers[0])
            self.seed_numbers[i-1] = atoll(words.ptr[i])
            self.n_seed_numbers++
        free(words.ptr)


def main() -> int:
    input: Input* = calloc(1, sizeof(*input))

    f = fopen("sampleinput.txt", "r")
    assert f != NULL

    line: byte[1000]

    # Special-case first line
    assert fgets(line, sizeof(line) as int, f) != NULL
    input.add_seeds(line)

    while fgets(line, sizeof(line) as int, f) != NULL:
        if strstr(line, "map") != NULL:
            # start of new map
            assert input.nmaps < sizeof(input.maps)/sizeof(input.maps[0])
            input.nmaps++
        elif is_ascii_digit(line[0]):
            # add numbers to existing map
            assert input.nmaps > 0
            input.maps[input.nmaps - 1].add_triple(line)

    fclose(f)

    smallest = -1 as int64
    for i = 0; i < input.n_seed_numbers; i++:
        n = input.seed_numbers[i]
        for k = 0; k < input.nmaps; k++:
            n = input.maps[k].map_number(n)

        if smallest == -1 or n < smallest:
            smallest = n

    free(input)
    printf("%lld\n", smallest)  # Output: 35
    return 0
