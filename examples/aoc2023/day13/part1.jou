import "stdlib/io.jou"
import "stdlib/str.jou"
import "stdlib/mem.jou"
import "stdlib/ascii.jou"


class Grid:
    width: int
    height: int
    data: byte*

    def is_in_bounds(self, point: int[2]) -> bool:
        x = point[0]
        y = point[1]
        return 0 <= x and x < self->width and 0 <= y and y < self->height

    def get(self, point: int[2]) -> byte:
        assert self->is_in_bounds(point)
        x = point[0]
        y = point[1]
        return self->data[(self->width + 1)*y + x]


def find_h_reflection(g: Grid*) -> int:
    for reflect = 1; reflect < g->width; reflect++:
        left = reflect-1
        right = reflect
        matches = True
        while left >= 0 and right < g->width and matches:
            for y = 0; y < g->height; y++:
                if g->get([left, y]) != g->get([right, y]):
                    matches = False
                    break
            left--
            right++
        if matches:
            return reflect
    return -1


def find_v_reflection(g: Grid*) -> int:
    for reflect = 1; reflect < g->height; reflect++:
        top = reflect-1
        bottom = reflect
        matches = True
        while top >= 0 and bottom < g->height and matches:
            for x = 0; x < g->width; x++:
                if g->get([x, top]) != g->get([x, bottom]):
                    matches = False
                    break
            top--
            bottom++
        if matches:
            return reflect
    return -1


def main() -> int:
    f = fopen("sampleinput.txt", "r")
    assert f != NULL

    line: byte[200]
    max_size = 10000

    grid = Grid{data = malloc(max_size)}
    result = 0

    while True:
        grid.width = 0
        grid.height = 0
        grid.data[0] = '\0'

        while fgets(line, sizeof(line) as int, f) != NULL:
            trim_ascii_whitespace(line)
            if line[0] == '\0':
                break

            if grid.height == 0:  # set width on first round
                grid.width = strlen(line) as int
            assert grid.width == strlen(line)
            grid.height++

            assert grid.width * grid.height < max_size
            strcat(grid.data, line)
            strcat(grid.data, "\n")

        if grid.height == 0:
            # end of input
            break

        h = find_h_reflection(&grid)
        v = find_v_reflection(&grid)
        assert h == -1 or v == -1  # does not have both
        if h != -1:
            result += h
        elif v != -1:
            result += 100*v
        else:
            assert False

    free(grid.data)
    fclose(f)
    printf("%d\n", result)  # Output: 405
    return 0
