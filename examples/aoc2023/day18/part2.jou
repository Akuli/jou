import "stdlib/io.jou"
import "stdlib/list.jou"
import "stdlib/str.jou"
import "stdlib/mem.jou"
import "stdlib/ascii.jou"
import "stdlib/math.jou"


# TODO: figure out better way
def parse_hex_string(s: byte*, len: int) -> int:
    result = 0
    for i = 0; i < len; i++:
        result *= 16
        if is_ascii_digit(s[i]):
            result += s[i] - '0'
        else:
            assert 'a' <= s[i] and s[i] <= 'f'
            result += 10 + (s[i] - 'a')
    return result


def read_input_as_points(filename: byte*) -> List[int[2]]:
    result = List[int[2]]{}
    result.append([0, 0])

    f = fopen(filename, "r")
    assert f != NULL

    direction_letter: byte
    step_count: int
    hex: byte[7]
    x = 0
    y = 0

    while fscanf(f, "%c %d (#%6s)\n", &direction_letter, &step_count, hex) == 3:
        assert strlen(hex) == 6
        step_count = parse_hex_string(hex, 5)
        if hex[5] == '0':
            # right
            x += step_count
        elif hex[5] == '1':
            # down
            y += step_count
        elif hex[5] == '2':
            # left
            x -= step_count
        elif hex[5] == '3':
            # up
            y -= step_count
        else:
            assert False

        result.append([x, y])

    fclose(f)

    return result


# See day 10 part 2
def polygon_area(corners: List[int[2]]) -> long:
    double_area = 0L
    for i = 0; i < corners.len; i++:
        a: long = corners.ptr[i][0]
        b: long = corners.ptr[i][1]
        c: long = corners.ptr[(i+1) % corners.len][0]
        d: long = corners.ptr[(i+1) % corners.len][1]
        double_area += a*d - b*c
    return llabs(double_area)/2


def main() -> int:
    points = read_input_as_points("sampleinput.txt")

    # must end where it starts
    assert points.len > 0
    assert points.ptr[0][0] == 0
    assert points.ptr[0][1] == 0
    assert points.end()[-1][0] == 0
    assert points.end()[-1][1] == 0

    path_len = 0L
    for i = 1; i < points.len; i++:
        path_len += abs(points.ptr[i-1][0] - points.ptr[i][0])
        path_len += abs(points.ptr[i-1][1] - points.ptr[i][1])

    assert path_len % 2 == 0
    points.pop()
    printf("%lld\n", polygon_area(points) + 1 + path_len/2)  # Output: 952408144115

    free(points.ptr)
    return 0
