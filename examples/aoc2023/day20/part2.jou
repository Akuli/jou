import "stdlib/io.jou"
import "stdlib/list.jou"
import "stdlib/str.jou"
import "stdlib/mem.jou"
import "stdlib/ascii.jou"


enum ModuleKind:
    Broadcaster
    FlipFlop
    Conjunction


class Module:
    name: byte[15]

    sources: Module*[10]
    nsources: int
    destinations: Module*[10]
    ndestinations: int

    kind: ModuleKind
    union:
        flip_flop_state: bool
        conjunction_state: bool[10]  # length = nsources

    def reset_to_initial_state(self) -> None:
        memset(&self.conjunction_state, 0, sizeof(self.conjunction_state))


class ModuleList:
    modules: Module[100]
    nmodules: int

    def create_if_doesnt_exist(self, name: byte*) -> None:
        for i = 0; i < self.nmodules; i++:
            if strcmp(self.modules[i].name, name) == 0:
                return

        m = Module{kind = ModuleKind.FlipFlop}  # will be changed later
        assert strlen(name) < sizeof(m.name)
        strcpy(m.name, name)

        assert self.nmodules < sizeof(self.modules)/sizeof(self.modules[0])
        self.modules[self.nmodules++] = m

    def find_module(self, name: byte*) -> Module*:
        for i = 0; i < self.nmodules; i++:
            if strcmp(self.modules[i].name, name) == 0:
                return &self.modules[i]
        printf("404 '%s'\n", name)
        assert False


# Follows the destinations to find all modules where the start module sends stuff.
# Result is NULL terminated, in fact filled with NULL to end.
def find_affected_modules(start: Module*) -> Module*[100]:
    result: Module*[100]
    result_len = 0

    todo: Module*[100]
    todo[0] = start
    todo_len = 1

    while todo_len > 0:
        mod = todo[--todo_len]

        # did we already do this?
        found = False
        for i = 0; i < result_len; i++:
            if result[i] == mod:
                found = True
                break
        if found:
            continue

        assert result_len < sizeof(result)/sizeof(result[0])
        result[result_len++] = mod

        for i = 0; i < mod.ndestinations; i++:
            assert todo_len < sizeof(todo)/sizeof(todo[0])
            todo[todo_len++] = mod.destinations[i]

    assert result_len < sizeof(result)/sizeof(result[0])
    result[result_len] = NULL
    return result


class GonnaSend:
    from: Module*  # NULL for button
    to: Module*
    value: bool


class TodoList:
    items: List[GonnaSend]

    def send_later(self, from: Module*, to: Module*, value: bool) -> None:
        self.items.append(GonnaSend{from=from, to=to, value=value})

    def pop_left(self) -> GonnaSend:
        result = self.items.ptr[0]
        memmove(&self.items.ptr[0], &self.items.ptr[1], --self.items.len * sizeof(self.items.ptr[0]))
        return result


# Repeatedly sends lows to start_flip_flop.
# Returns the first 5 iterations where end module receives high.
def run_part_of_input(start_flip_flop: Module*, end: Module*) -> int[5]:
    assert start_flip_flop.kind == ModuleKind.FlipFlop  # needed for sending signals with NULL source

    relevant_modules = find_affected_modules(start_flip_flop)

    result: int[5]
    result_len = 0

    todo = TodoList{}
    for iter = 1; True; iter++:
        todo.send_later(NULL, start_flip_flop, False)
        while todo.items.len > 0:
            item = todo.pop_left()

            if item.from == end and item.value:
                # end receives a high
                result[result_len++] = iter
                if result_len == sizeof(result)/sizeof(result[0]):
                    for i = 0; relevant_modules[i] != NULL; i++:
                        relevant_modules[i].reset_to_initial_state()
                    free(todo.items.ptr)
                    return result

            match item.to.kind:
                case ModuleKind.Broadcaster:
                    for i = 0; i < item.to.ndestinations; i++:
                        todo.send_later(item.to, item.to.destinations[i], item.value)
                case ModuleKind.FlipFlop:
                    if not item.value:
                        item.to.flip_flop_state = not item.to.flip_flop_state
                        for i = 0; i < item.to.ndestinations; i++:
                            todo.send_later(item.to, item.to.destinations[i], item.to.flip_flop_state)
                case ModuleKind.Conjunction:
                    i = 0
                    while item.to.sources[i] != item.from:
                        i++
                        assert i < item.to.nsources
                    item.to.conjunction_state[i] = item.value

                    all_high = True
                    for i = 0; i < item.to.nsources; i++:
                        if not item.to.conjunction_state[i]:
                            all_high = False
                            break

                    for i = 0; i < item.to.ndestinations; i++:
                        todo.send_later(item.to, item.to.destinations[i], not all_high)


def gcd(a: long, b: long) -> long:
    assert a > 0 and b > 0
    while True:
        a %= b
        if a == 0:
            return b
        memswap(&a, &b, sizeof(a))

def lcm(a: long, b: long) -> long:
    return (a/gcd(a,b)) * b


def main() -> int:
    f = fopen("sampleinput_written_by_me.txt", "r")
    assert f != NULL

    modules: ModuleList* = malloc(sizeof(*modules))
    memset(modules, 0, sizeof(*modules))

    line: byte[200]
    while fgets(line, sizeof(line) as int, f) != NULL:
        # ignore comments and blank lines, my hand-written test input is somewhat human-readable
        if strchr(line, '#') != NULL:
            *strchr(line, '#') = '\0'
        trim_ascii_whitespace(line)
        if line[0] == '\0':
            continue

        for i = 0; line[i] != '\0'; i++:
            if line[i] == ',':
                line[i] = ' '

        words = split_by_ascii_whitespace(line)
        assert words.len >= 2

        name = words.ptr[0]
        if name[0] == '%':
            name++
            kind = ModuleKind.FlipFlop
        elif name[0] == '&':
            name++
            kind = ModuleKind.Conjunction
        else:
            assert strcmp(name, "broadcaster") == 0
            kind = ModuleKind.Broadcaster

        modules.create_if_doesnt_exist(name)
        source = modules.find_module(name)
        source.kind = kind

        assert strcmp(words.ptr[1], "->") == 0

        for i = 2; i < words.len; i++:
            modules.create_if_doesnt_exist(words.ptr[i])
            dest = modules.find_module(words.ptr[i])

            assert dest.nsources < sizeof(dest.sources)/sizeof(dest.sources[0])
            dest.sources[dest.nsources++] = source
            assert source.ndestinations < sizeof(source.destinations)/sizeof(source.destinations[0])
            source.destinations[source.ndestinations++] = dest

        free(words.ptr)

    fclose(f)

    broadcaster = modules.find_module("broadcaster")
    rx = modules.find_module("rx")
    # Structure of the input is:
    #
    # broadcaster
    #   |--> flip-flop  -->  ...  --> conjunction --> conjunction --.
    #   |--> flip-flop  -->  ...  --> conjunction --> conjunction --|
    #   |--> flip-flop  -->  ...  --> conjunction --> conjunction --|
    #   `--> flip-flop  -->  ...  --> conjunction --> conjunction --|
    #                                                               `--> output conjunction --> rx
    #
    # I call each row from flip-flop to just before output conjunction a channel.
    channels: Module*[2][10]

    assert rx.nsources == 1
    output_conjunction: Module* = rx.sources[0]
    assert output_conjunction.nsources == broadcaster.ndestinations
    nchannels = output_conjunction.nsources
    assert nchannels <= sizeof(channels)/sizeof(channels[0])

    for i = 0; i < broadcaster.ndestinations; i++:
        flip_flop: Module* = broadcaster.destinations[i]
        assert flip_flop.kind == ModuleKind.FlipFlop
        flip_flop_leads_to = find_affected_modules(flip_flop)

        conjunction: Module* = NULL
        for p = &flip_flop_leads_to[0]; *p != NULL; p++:
            if (
                (*p).kind == ModuleKind.Conjunction
                and (*p).ndestinations == 1
                and (*p).destinations[0] == output_conjunction
            ):
                assert conjunction == NULL
                conjunction = *p

        assert conjunction != NULL

        channels[i] = [flip_flop, conjunction]

    # Each channel seems to send high on iterations n, 2n, 3n, ... for some n.
    # We take their lcm. That's when all channels send high simultaneously.
    #
    # It could happen that a channel also sends low after sending high, and the
    # execution order is so that the output conjunction never sees all highs at
    # the same time. Let's hope that doesn't happen...
    result = -1 as long
    for i = 0; i < nchannels; i++:
        first_5_highs = run_part_of_input(channels[i][0], channels[i][1])

        # the first 5 highs should be [n, 2n, 3n, 4n, 5n], for some n
        n = first_5_highs[0]
        assert first_5_highs[1] == 2*n
        assert first_5_highs[2] == 3*n
        assert first_5_highs[3] == 4*n
        assert first_5_highs[4] == 5*n

        if result == -1:
            result = n
        else:
            result = lcm(result, n)

    # see comments in sampleinput_written_by_me.txt
    printf("%lld\n", result)  # Output: 6

    free(modules)
    return 0
