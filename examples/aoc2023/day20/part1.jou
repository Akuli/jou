import "stdlib/io.jou"
import "stdlib/str.jou"
import "stdlib/mem.jou"
import "stdlib/ascii.jou"


enum ModuleKind:
    Broadcaster
    FlipFlop
    Conjunction


class Module:
    name: byte[15]

    sources: Module*[10]
    nsources: int
    destinations: Module*[10]
    ndestinations: int

    kind: ModuleKind
    union:
        flip_flop_state: bool
        conjunction_state: bool[10]  # length = nsources


class ModuleList:
    modules: Module[100]
    nmodules: int

    def create_if_doesnt_exist(self, name: byte*) -> None:
        for i = 0; i < self->nmodules; i++:
            if strcmp(self->modules[i].name, name) == 0:
                return

        m = Module{kind = ModuleKind.FlipFlop}  # will be changed later
        assert strlen(name) < sizeof(m.name)
        strcpy(m.name, name)

        assert self->nmodules < sizeof(self->modules)/sizeof(self->modules[0])
        self->modules[self->nmodules++] = m

    def find_module(self, name: byte*) -> Module*:
        for i = 0; i < self->nmodules; i++:
            if strcmp(self->modules[i].name, name) == 0:
                return &self->modules[i]
        printf("404 '%s'\n", name)
        assert False


class GonnaSend:
    from: Module*  # NULL for button
    to: Module*
    value: bool


class TodoList:
    ptr: GonnaSend*
    len: int
    alloc: int

    def send_later(self, from: Module*, to: Module*, value: bool) -> None:
        if self->len == self->alloc:
            if self->alloc == 0:
                self->alloc = 1
            else:
                self->alloc *= 2
            self->ptr = realloc(self->ptr, sizeof(self->ptr[0]) * self->alloc)
            assert self->ptr != NULL

        assert to != NULL
        self->ptr[self->len++] = GonnaSend{from=from, to=to, value=value}

    def pop_left(self) -> GonnaSend:
        result = self->ptr[0]
        memmove(&self->ptr[0], &self->ptr[1], --self->len * sizeof(self->ptr[0]))
        return result


def press_button(modules: ModuleList*, high_counter: int*, low_counter: int*) -> None:
    todo = TodoList{}
    todo.send_later(NULL, modules->find_module("broadcaster"), False)

    while todo.len > 0:
        fflush(stdout)
        item = todo.pop_left()

        if item.value:
            ++*high_counter
        else:
            ++*low_counter

        #printf("%s -%d-> %s\n", item.from->name, item.value as int, item.to->name)

        match item.to->kind:
            case ModuleKind.Broadcaster:
                for i = 0; i < item.to->ndestinations; i++:
                    todo.send_later(item.to, item.to->destinations[i], item.value)

            case ModuleKind.FlipFlop:
                if not item.value:
                    item.to->flip_flop_state = not item.to->flip_flop_state
                    for i = 0; i < item.to->ndestinations; i++:
                        todo.send_later(item.to, item.to->destinations[i], item.to->flip_flop_state)

            case ModuleKind.Conjunction:
                i = 0
                while item.to->sources[i] != item.from:
                    i++
                    assert i < item.to->nsources
                item.to->conjunction_state[i] = item.value

                all_high = True
                for i = 0; i < item.to->nsources; i++:
                    if not item.to->conjunction_state[i]:
                        all_high = False
                        break

                for i = 0; i < item.to->ndestinations; i++:
                    todo.send_later(item.to, item.to->destinations[i], not all_high)

    free(todo.ptr)


def main() -> int:
    f = fopen("sampleinput.txt", "r")
    assert f != NULL

    modules: ModuleList* = malloc(sizeof(*modules))
    memset(modules, 0, sizeof(*modules))

    line: byte[200]
    while fgets(line, sizeof(line) as int, f) != NULL:
        for i = 0; line[i] != '\0'; i++:
            if line[i] == ',':
                line[i] = ' '

        words = split_by_ascii_whitespace(line)
        assert words[0] != NULL and words[1] != NULL

        name = words[0]
        if name[0] == '%':
            name++
            kind = ModuleKind.FlipFlop
        elif name[0] == '&':
            name++
            kind = ModuleKind.Conjunction
        else:
            assert strcmp(name, "broadcaster") == 0
            kind = ModuleKind.Broadcaster

        modules->create_if_doesnt_exist(name)
        source = modules->find_module(name)
        source->kind = kind

        assert strcmp(words[1], "->") == 0

        for i = 2; words[i] != NULL; i++:
            modules->create_if_doesnt_exist(words[i])
            dest = modules->find_module(words[i])

            assert dest->nsources < sizeof(dest->sources)/sizeof(dest->sources[0])
            dest->sources[dest->nsources++] = source
            assert source->ndestinations < sizeof(source->destinations)/sizeof(source->destinations[0])
            source->destinations[source->ndestinations++] = dest

        free(words)

    fclose(f)

    h = 0
    l = 0
    for i = 0; i < 1000; i++:
        press_button(modules, &h, &l)
    printf("%d\n", h*l)  # Output: 11687500

    free(modules)

    return 0
