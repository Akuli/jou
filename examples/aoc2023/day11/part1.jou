import "stdlib/io.jou"
import "stdlib/mem.jou"
import "stdlib/str.jou"
import "stdlib/math.jou"
import "../grid.jou"


def duplicate_blank_lines(grid: Grid*) -> None:
    grid->data = realloc(grid->data, 2*strlen(grid->data) + 1)
    assert grid->data != NULL

    y = 0
    while y < grid->height:
        if strspn(&grid->data[(grid->width + 1)*y], ".") == grid->width:
            # duplicate row
            blank_start = &grid->data[(grid->width + 1)*y]
            next_start = &grid->data[(grid->width + 1)*(y+1)]
            memmove(next_start, blank_start, strlen(blank_start) + 1)
            y += 2
            grid->height++
        else:
            y++


def manhattan_distance(a: int[2], b: int[2]) -> int:
    return abs(a[0]-b[0]) + abs(a[1]-b[1])


def main() -> int:
    max_len = 100000
    grid = Grid{data = calloc(1, max_len+1)}

    f = fopen("sampleinput.txt", "r")
    assert f != NULL
    fread(grid.data, 1, max_len, f)
    fclose(f)

    grid.width = strcspn(grid.data, "\n") as int
    grid.height = (strlen(grid.data) as int) / (grid.width + 1)

    duplicate_blank_lines(&grid)
    grid.transpose()
    duplicate_blank_lines(&grid)
    grid.transpose()

    coords = grid.find_all('#')

    sum = 0
    for i = 0; coords[i][0] != -1; i++:
        for k = 0; k < i; k++:
            sum += manhattan_distance(coords[i], coords[k])
    printf("%d\n", sum)  # Output: 374

    free(grid.data)
    free(coords)
    return 0
