import "stdlib/io.jou"
import "stdlib/mem.jou"
import "stdlib/str.jou"
import "../grid.jou"


# returned array is terminated by -1
def find_blank_lines(grid: Grid*) -> int*:
    result: int* = malloc(sizeof(result[0]) * (grid->height + 1))
    result_len = 0

    for y = 0; y < grid->height; y++:
        if strspn(&grid->data[(grid->width + 1)*y], ".") == grid->width:
            result[result_len++] = y
    result[result_len] = -1
    return result


# returned array is terminated by -1
def get_hashtag_y_coords(grid: Grid*) -> int*:
    points = grid->find_all('#')

    n = 0
    while points[n][0] != -1 and points[n][1] != -1:
        n++

    result: int* = malloc(sizeof(result[0]) * (n+1))
    for i = 0; i < n; i++:
        result[i] = points[i][1]

    free(points)
    result[n] = -1
    return result


def sum_vertical_distances(grid: Grid*) -> long:
    hashtag_y_coords = get_hashtag_y_coords(grid)
    blank_lines = find_blank_lines(grid)

    result = 0L
    for end = hashtag_y_coords; *end != -1; end++:
        for start = hashtag_y_coords; start < end; start++:
            for y = *start; y < *end; y++:
                y_is_blank = False
                for p = blank_lines; *p != -1; p++:
                    if *p == y:
                        y_is_blank = True
                        break
                if y_is_blank:
                    # Change to 1000000 for actual input
                    result += 100
                    #result += 1000000
                else:
                    result += 1

    free(hashtag_y_coords)
    free(blank_lines)
    return result


def main() -> int:
    f = fopen("sampleinput.txt", "r")
    assert f != NULL
    grid = read_grid_from_file(f)
    fclose(f)

    result = sum_vertical_distances(&grid)
    grid.transpose()
    result += sum_vertical_distances(&grid)
    printf("%lld\n", result)  # Output: 8410

    free(grid.data)
    return 0
