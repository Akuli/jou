import "stdlib/io.jou"
import "stdlib/str.jou"
import "stdlib/sort.jou"

class Hand:
    letters: byte[6]
    bid: int

    def count(self, letter: byte) -> int:
        n = 0
        for i = 0; i < 5; i++:
            if self.letters[i] == letter:
                n++
        return n

    def all_same(self) -> bool:
        return self.count(self.letters[0]) == 5

    def all_but_one_same(self) -> bool:
        return self.count(self.letters[0]) == 4 or self.count(self.letters[1]) == 4

    def three_same_and_two_same(self) -> bool:
        # ensure that every count is either 3 or 2
        for i = 0; i < 5; i++:
            n = self.count(self.letters[i])
            if n != 3 and n != 2:
                return False
        return True

    def three_same_two_distinct(self) -> bool:
        # ensure that every count is either 3 or 1, and count 3 appears
        found3 = False
        for i = 0; i < 5; i++:
            n = self.count(self.letters[i])
            if n != 3 and n != 1:
                return False
            if n == 3:
                found3 = True
        return found3

    def two_pairs_one_distinct(self) -> bool:
        # ensure that every count is either 2 or 1, and count 1 appears only once
        count1 = 0
        for i = 0; i < 5; i++:
            n = self.count(self.letters[i])
            if n != 2 and n != 1:
                return False
            if n == 1:
                count1++
        return count1 == 1

    def one_pair(self) -> bool:
        # ensure that every count is either 2 or 1, and exactly 2 cards have count 2
        count2 = 0
        for i = 0; i < 5; i++:
            n = self.count(self.letters[i])
            if n != 2 and n != 1:
                return False
            if n == 2:
                count2++
        return count2 == 2

    def all_distinct(self) -> bool:
        for i = 0; i < 5; i++:
            if self.count(self.letters[i]) != 1:
                return False
        return True

    def hand_type_strength(self) -> int:
        # check that i did this right, exactly one should be true
        # return index of true in list
        bools = [
            self.all_distinct(),
            self.one_pair(),
            self.two_pairs_one_distinct(),
            self.three_same_two_distinct(),
            self.three_same_and_two_same(),
            self.all_but_one_same(),
            self.all_same(),
        ]

        result = -1
        for i = 0; i < sizeof(bools)/sizeof(bools[0]); i++:
            if bools[i]:
                assert result == -1
                result = i

        assert result != -1
        return result


# Return value:
#   +1  if hand1 > other
#   0   if hand1 == other
#   -1  if hand1 < other
def compare_hands(hand1: Hand*, hand2: Hand*) -> int:
    if hand1.hand_type_strength() > hand2.hand_type_strength():
        return 1
    if hand1.hand_type_strength() < hand2.hand_type_strength():
        return -1

    for i = 0; i < 5; i++:
        s = "23456789TJQKA"
        self_idx_ptr = strchr(s, hand1.letters[i])
        other_idx_ptr = strchr(s, hand2.letters[i])
        assert self_idx_ptr != NULL and other_idx_ptr != NULL
        if self_idx_ptr > other_idx_ptr:
            return 1
        if self_idx_ptr < other_idx_ptr:
            return -1

    return 0


def main() -> int:
    hands: Hand[2000]
    nhands = 0

    f = fopen("sampleinput.txt", "r")
    assert f != NULL

    while fscanf(f, "%5s %d\n", &hands[nhands].letters, &hands[nhands].bid) == 2:
        nhands++
        assert nhands < sizeof(hands)/sizeof(hands[0])

    fclose(f)

    Sorter[Hand]{}.sort(hands, nhands, compare_hands)

    sum = 0
    for i = 0; i < nhands; i++:
        sum += (i+1) * hands[i].bid
    printf("%d\n", sum)  # Output: 6440

    return 0
