import "stdlib/io.jou"
import "stdlib/mem.jou"
import "stdlib/str.jou"
import "stdlib/ascii.jou"


class Grid:
    width: int
    height: int
    data: byte*

    def is_in_bounds(self, point: int[2]) -> bool:
        x = point[0]
        y = point[1]
        return 0 <= x and x < self->width and 0 <= y and y < self->height

    def get(self, point: int[2]) -> byte:
        assert self->is_in_bounds(point)
        x = point[0]
        y = point[1]
        return self->data[(self->width + 1)*y + x]

    def set(self, point: int[2], value: byte) -> None:
        assert self->is_in_bounds(point)
        x = point[0]
        y = point[1]
        self->data[(self->width + 1)*y + x] = value


def roll_north(grid: Grid*) -> None:
    for ysrc = 1; ysrc < grid->height; ysrc++:
        for x = 0; x < grid->width; x++:
            if grid->get([x, ysrc]) != 'O' or grid->get([x, ysrc-1]) != '.':
                continue

            ydest = ysrc - 1
            while ydest > 0 and grid->get([x, ydest-1]) == '.':
                ydest--

            grid->set([x, ysrc], '.')
            grid->set([x, ydest], 'O')


def calculate_load(g: Grid*) -> int:
    result = 0
    for y = 0; y < g->height; y++:
        load_per_O = g->height - y
        for x = 0; x < g->width; x++:
            if g->get([x, y]) == 'O':
                result += load_per_O
    return result


def main() -> int:
    f = fopen("sampleinput.txt", "r")
    assert f != NULL

    line: byte[200]
    max_size = 100000

    grid = Grid{data = malloc(max_size)}
    grid.data[0] = '\0'

    while fgets(line, sizeof(line) as int, f) != NULL:
        trim_ascii_whitespace(line)
        if grid.height == 0:  # set width on first round
            grid.width = strlen(line) as int
        assert grid.width == strlen(line)
        grid.height++

        assert grid.width * grid.height < max_size
        strcat(grid.data, line)
        strcat(grid.data, "\n")

    fclose(f)

    roll_north(&grid)
    printf("%d\n", calculate_load(&grid))  # Output: 136

    free(grid.data)
    return 0
