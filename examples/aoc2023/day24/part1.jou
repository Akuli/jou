import "stdlib/io.jou"
import "./bigint.jou"


def det(matrix: int64[2][2]) -> BigInt:
    a = matrix[0][0]
    b = matrix[0][1]
    c = matrix[1][0]
    d = matrix[1][1]
    return bigint(a).mul(bigint(d)).sub(bigint(b).mul(bigint(c)))


def dot(v1: int64[2], v2: int64[2]) -> BigInt:
    return bigint(v1[0]).mul(bigint(v2[0])).add(bigint(v1[1]).mul(bigint(v2[1])))


def matrix_times_vector(matrix: int64[2][2], vector: int64[2]) -> BigInt[2]:
    a = bigint(matrix[0][0])
    b = bigint(matrix[0][1])
    c = bigint(matrix[1][0])
    d = bigint(matrix[1][1])
    x = bigint(vector[0])
    y = bigint(vector[1])
    return [a.mul(x).add(b.mul(y)), c.mul(x).add(d.mul(y))]


# Returns the x and y of matrix*[x,y] = coeff_vector as fractions:
#
#   [top of x, top of y, bottom]
def solve_linear_system_of_2_equations(matrix: int64[2][2], coeff_vector: int64[2]) -> BigInt[3]:
    a = matrix[0][0]
    b = matrix[0][1]
    c = matrix[1][0]
    d = matrix[1][1]

    determinant = det(matrix)
    assert not determinant.is_zero()  # assume inverse matrix exists

    inverse_matrix_times_determinant = [
        [d, -b],
        [-c, a],
    ]
    xy_times_determinant = matrix_times_vector(inverse_matrix_times_determinant, coeff_vector)
    return [xy_times_determinant[0], xy_times_determinant[1], determinant]


class Rectangle:
    x_min: int64
    x_max: int64
    y_min: int64
    y_max: int64

    def contains(self, point: int64[2]) -> bool:
        x = point[0]
        y = point[1]
        return (
            self.x_min <= x and x <= self.x_max
            and self.y_min <= y and y <= self.x_max
        )

    def contains_fraction(self, qx: BigInt, qy: BigInt, q: BigInt) -> bool:
        assert q.sign() > 0

        qxmin = bigint(self.x_min).mul(q)
        qxmax = bigint(self.x_max).mul(q)
        qymin = bigint(self.y_min).mul(q)
        qymax = bigint(self.y_max).mul(q)
        return (
            qxmin.compare(qx) <= 0 and qx.compare(qxmax) <= 0
            and qymin.compare(qy) <= 0 and qy.compare(qymax) <= 0
        )


class Ray:
    start: int64[2]
    dir: int64[2]

    def intersects(self, other: Ray*, test_area: Rectangle) -> bool:
        if det([self.dir, other.dir]).is_zero():
            # Rays go in parallel directions.
            start_diff = [
                self.start[0] - other.start[0],
                self.start[1] - other.start[1],
            ]
            if not det([start_diff, self.dir]).is_zero():
                # Rays are not aligned to go along the same line.
                return False

            # Vectors go along the same line. Let's project everything to the line so this becomes 1 dimensional.
            self_start = dot(self.dir, self.start)
            self_dir = dot(self.dir, self.dir)
            other_start = dot(self.dir, other.start)
            other_dir = dot(self.dir, other.dir)

            assert self_dir.sign() > 0
            assert not other_dir.is_zero()
            assert not self_start.equals(other_start)

            if other_dir.sign() > 0:
                # Rays go in the same direction. Eventually one ray will reach the start of the other.
                if self_start.compare(other_start) > 0:
                    return test_area.contains(self.start)
                else:
                    return test_area.contains(other.start)

            if self_start.compare(other_start) > 0:
                # Rays point away from each other
                return False

            # Rays point towards each other, so they meet somewhere in the middle.
            #
            #   meet = self_start + t*self_dir      (t is time)
            #        = other_start + t*other_dir
            #
            # Math gives a solution:
            #
            #   t = p/q,  p = other_start - self_start,  q = self_dir - other_dir
            q = self_dir.sub(other_dir)
            assert q.sign() > 0
            qt = other_start.sub(self_start)
            qx = bigint(self.start[0]).mul(q).add(bigint(self.dir[0]).mul(qt))
            qy = bigint(self.start[1]).mul(q).add(bigint(self.dir[1]).mul(qt))
            return test_area.contains_fraction(qx, qy, q)

        # Vectors are not parallel. They will intersect somewhere, but where?
        #
        #   self.start + a*self.dir = other.start + b*other.dir
        #
        #   a*self.dir[0] + b*(-other.dir[0]) = other.start[0] - self.start[0]
        #   a*self.dir[1] + b*(-other.dir[1]) = other.start[1] - self.start[1]
        coeff_matrix = [
            [self.dir[0], -other.dir[0]],
            [self.dir[1], -other.dir[1]],
        ]
        constant_vector = [
            other.start[0] - self.start[0],
            other.start[1] - self.start[1],
        ]
        solve_result = solve_linear_system_of_2_equations(coeff_matrix, constant_vector)
        qa = solve_result[0]
        qb = solve_result[1]
        q = solve_result[2]

        if q.sign() < 0:
            qa = qa.neg()
            qb = qb.neg()
            q = q.neg()

        # rays do not extend backwards
        if qa.sign() < 0 or qb.sign() < 0:
            return False

        qx = bigint(self.start[0]).mul(q).add(bigint(self.dir[0]).mul(qa))
        qy = bigint(self.start[1]).mul(q).add(bigint(self.dir[1]).mul(qa))
        return test_area.contains_fraction(qx, qy, q)


def main() -> int:
    f = fopen("sampleinput.txt", "r")
    assert f != NULL

    rays: Ray[500]
    nrays = 0

    r: Ray

    x, y, z, dx, dy, dz: long
    while fscanf(f, "%lld, %lld, %lld @ %lld, %lld, %lld\n", &x, &y, &z, &dx, &dy, &dz) == 6:
        assert nrays < sizeof(rays)/sizeof(rays[0])
        rays[nrays++] = Ray{start = [x,y], dir = [dx,dy]}

    fclose(f)

    test_area = Rectangle{
        x_min = 7,
        x_max = 27,
        y_min = 7,
        y_max = 27,
#        x_min = 200000000000000,
#        x_max = 400000000000000,
#        y_min = 200000000000000,
#        y_max = 400000000000000,
    }

    result = 0
    for i = 0; i < nrays; i++:
        # progress print for actual input
        if nrays > 100:
            printf("%d/%d\n", i, nrays)

        for k = i+1; k < nrays; k++:
            if rays[i].intersects(&rays[k], test_area):
                result++
    printf("%d\n", result)  # Output: 2

    return 0
