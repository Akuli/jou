import "stdlib/io.jou"
import "./bigint.jou"


def det(matrix: long[2][2]) -> BigInt:
    a = matrix[0][0]
    b = matrix[0][1]
    c = matrix[1][0]
    d = matrix[1][1]
    return bigsub(bigmul(bigint(a), bigint(d)), bigmul(bigint(b), bigint(c)))


def dot(v1: long[2], v2: long[2]) -> BigInt:
    return bigadd(bigmul(bigint(v1[0]), bigint(v2[0])), bigmul(bigint(v1[1]), bigint(v2[1])))


def matrix_times_vector(matrix: long[2][2], vector: long[2]) -> BigInt[2]:
    a = bigint(matrix[0][0])
    b = bigint(matrix[0][1])
    c = bigint(matrix[1][0])
    d = bigint(matrix[1][1])
    x = bigint(vector[0])
    y = bigint(vector[1])
    return [
        bigadd(bigmul(a, x), bigmul(b, y)),
        bigadd(bigmul(c, x), bigmul(d, y)),
    ]


# Returns the x and y of matrix*[x,y] = coeff_vector as fractions:
#
#   [top of x, top of y, bottom]
def solve_linear_system_of_2_equations(matrix: long[2][2], coeff_vector: long[2]) -> BigInt[3]:
    a = matrix[0][0]
    b = matrix[0][1]
    c = matrix[1][0]
    d = matrix[1][1]

    determinant = det(matrix)
    assert not bigeq(determinant, bigint(0))  # assume inverse matrix exists

    inverse_matrix_times_determinant = [
        [d, -b],
        [-c, a],
    ]
    xy_times_determinant = matrix_times_vector(inverse_matrix_times_determinant, coeff_vector)
    return [xy_times_determinant[0], xy_times_determinant[1], determinant]


class Rectangle:
    x_min: long
    x_max: long
    y_min: long
    y_max: long

    def contains(self, point: long[2]) -> bool:
        x = point[0]
        y = point[1]
        return (
            self->x_min <= x and x <= self->x_max
            and self->y_min <= y and y <= self->x_max
        )

    def contains_fraction(self, qx: BigInt, qy: BigInt, q: BigInt) -> bool:
        qxmin = bigmul(q, bigint(self->x_min))
        qxmax = bigmul(q, bigint(self->x_max))
        qymin = bigmul(q, bigint(self->y_min))
        qymax = bigmul(q, bigint(self->y_max))

        assert bigsign(q) > 0
        return (
            bigcmp(qxmin, qx) <= 0 and bigcmp(qx, qxmax) <= 0
            and bigcmp(qymin, qy) <= 0 and bigcmp(qy, qymax) <= 0
        )


class Ray:
    start: long[2]
    dir: long[2]

    def intersects(self, other: Ray*, test_area: Rectangle) -> bool:
        if bigeq(det([self->dir, other->dir]), bigint(0)):
            # Rays go in parallel directions.
            start_diff = [
                self->start[0] - other->start[0],
                self->start[1] - other->start[1],
            ]
            if not bigeq(det([start_diff, self->dir]), bigint(0)):
                # Rays are not aligned to go along the same line.
                return False

            # Vectors go along the same line. Let's project everything to the line so this becomes 1 dimensional.
            self_start = dot(self->dir, self->start)
            self_dir = dot(self->dir, self->dir)
            other_start = dot(self->dir, other->start)
            other_dir = dot(self->dir, other->dir)

            assert bigsign(self_dir) > 0
            assert not bigeq(other_dir, bigint(0))
            assert not bigeq(self_start, other_start)

            if bigsign(other_dir) > 0:
                # Rays go in the same direction. Eventually one ray will reach the start of the other.
                if bigcmp(self_start, other_start) > 0:
                    return test_area.contains(self->start)
                else:
                    return test_area.contains(other->start)

            if bigcmp(self_start, other_start) > 0:
                # Rays point away from each other
                return False

            # Rays point towards each other, so they meet somewhere in the middle.
            #
            #   meet = self_start + t*self_dir      (t is time)
            #        = other_start + t*other_dir
            #
            # Math gives a solution:
            #
            #   t = p/q,  p = other_start - self_start,  q = self_dir - other_dir
            q = bigsub(self_dir, other_dir)
            assert bigsign(q) > 0
            qt = bigsub(other_start, self_start)
            qx = bigadd(bigmul(q, bigint(self->start[0])), bigmul(qt, bigint(self->dir[0])))
            qy = bigadd(bigmul(q, bigint(self->start[1])), bigmul(qt, bigint(self->dir[1])))
            return test_area.contains_fraction(qx, qy, q)

        # Vectors are not parallel. They will intersect somewhere, but where?
        #
        #   self->start + a*self->dir = other->start + b*other->dir
        #
        #   a*self->dir[0] + b*(-other->dir[0]) = other->start[0] - self->start[0]
        #   a*self->dir[1] + b*(-other->dir[1]) = other->start[1] - self->start[1]
        coeff_matrix = [
            [self->dir[0], -other->dir[0]],
            [self->dir[1], -other->dir[1]],
        ]
        constant_vector = [
            other->start[0] - self->start[0],
            other->start[1] - self->start[1],
        ]
        solve_result = solve_linear_system_of_2_equations(coeff_matrix, constant_vector)
        qa = solve_result[0]
        qb = solve_result[1]
        q = solve_result[2]

        if bigsign(q) < 0:
            qa = bigneg(qa)
            qb = bigneg(qb)
            q = bigneg(q)

        # rays do not extend backwards
        if bigsign(qa) < 0 or bigsign(qb) < 0:
            return False

        qx = bigadd(bigmul(q, bigint(self->start[0])), bigmul(qa, bigint(self->dir[0])))
        qy = bigadd(bigmul(q, bigint(self->start[1])), bigmul(qa, bigint(self->dir[1])))
        return test_area.contains_fraction(qx, qy, q)


def main() -> int:
    f = fopen("sampleinput.txt", "r")
    assert f != NULL

    rays: Ray[500]
    nrays = 0

    r: Ray

    x: long
    y: long
    z: long
    dx: long
    dy: long
    dz: long
    while fscanf(f, "%lld, %lld, %lld @ %lld, %lld, %lld\n", &x, &y, &z, &dx, &dy, &dz) == 6:
        assert nrays < sizeof(rays)/sizeof(rays[0])
        rays[nrays++] = Ray{start = [x,y], dir = [dx,dy]}

    fclose(f)

    test_area = Rectangle{
        x_min = 7,
        x_max = 27,
        y_min = 7,
        y_max = 27,
#        x_min = 200000000000000L,
#        x_max = 400000000000000L,
#        y_min = 200000000000000L,
#        y_max = 400000000000000L,
    }

    result = 0
    for i = 0; i < nrays; i++:
        # progress print for actual input
        if nrays > 100:
            printf("%d/%d\n", i, nrays)

        for k = i+1; k < nrays; k++:
            if rays[i].intersects(&rays[k], test_area):
                result++
    printf("%d\n", result)  # Output: 2

    return 0
