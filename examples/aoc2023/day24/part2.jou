import "stdlib/math.jou"
import "stdlib/mem.jou"
import "stdlib/io.jou"
import "./bigint.jou"


class Equation:
    # sum(coeffs[i] * x_i) = rhs
    nvariables: int
    coeffs: BigInt*
    rhs: BigInt

    def sub(self, var: int, value: BigInt) -> None:
        self->rhs = self->rhs.sub(self->coeffs[var].mul(value))
        self->coeffs[var] = bigint(0)

    def has(self, var: int) -> bool:
        assert 0 <= var and var < self->nvariables
        return not self->coeffs[var].is_zero()

    def print(self) -> None:
        for v = 0; v < self->nvariables; v++:
            if v > 0:
                printf(" + ")
            printf("%lld x%d", self->coeffs[v].to_long(), v)
        printf(" = %lld\n", self->rhs.to_long())


def add_with_coeff(dest: Equation*, src: Equation*, coeff: BigInt) -> None:
    assert src->nvariables == dest->nvariables
    for v = 0; v < src->nvariables; v++:
        dest->coeffs[v] = dest->coeffs[v].add(src->coeffs[v].mul(coeff))
    dest->rhs = dest->rhs.add(src->rhs.mul(coeff))


class EquationSolver:
    eqs: Equation*
    neqs: int

    def print(self) -> None:
        printf("equations:\n")
        for eq = &self->eqs[0]; eq < &self->eqs[self->neqs]; eq++:
            printf("  ")
            eq->print()
        printf("\n")

    def count_equations_having_var(self, var: int) -> int:
        n = 0
        for eq = &self->eqs[0]; eq < &self->eqs[self->neqs]; eq++:
            if eq->has(var):
                n++
        return n

    def eliminate_from_all_but_one_equation(self, var: int) -> None:
        # Repeated Gaussian reduction in Euclidean algorithm style (sorry about word salad)
        while self->count_equations_having_var(var) >= 2:
            src = self->find_equation_with_smallest_nonzero_coeff_for_var(var)
            assert src != NULL
            assert not src->coeffs[var].is_zero()

            for dest = self->eqs; dest < &self->eqs[self->neqs]; dest++:
                if dest != src and dest->has(var):
                    # Pick c so that dest->coeffs[var] + c*src->coeffs[var] = 0.
                    # The perfect c isn't necessarly integer, so we pick a close value.
                    c = dest->coeffs[var].div(src->coeffs[var]).neg()
                    assert not c.is_zero()
                    add_with_coeff(dest, src, c)

    def find_equation_with_smallest_nonzero_coeff_for_var(self, var: int) -> Equation*:
        result: Equation* = NULL
        for eq = &self->eqs[0]; eq < &self->eqs[self->neqs]; eq++:
            if eq->has(var) and (
                result == NULL
                or result->coeffs[var].abs().compare(eq->coeffs[var].abs()) > 0
            ):
                result = eq
        return result

    def all_equations_are_zero_equals_zero(self) -> bool:
        for eq = &self->eqs[0]; eq < &self->eqs[self->neqs]; eq++:
            if not eq->rhs.is_zero():
                return False
            for v = 0; v < eq->nvariables; v++:
                if not eq->coeffs[v].is_zero():
                    return False
        return True


def solve_linear_system_of_equations(eqs: Equation*, neqs: int) -> BigInt*:
    nvariables = 0
    for i = 0; i < neqs; i++:
        nvariables = max(nvariables, eqs[i].nvariables)

    # Copy all equations to avoid mutating input arguments, lol
    solver = EquationSolver{neqs = neqs}
    solver.eqs = malloc(sizeof(solver.eqs[0]) * neqs)
    for i = 0; i < neqs; i++:
        eq = &solver.eqs[i]
        eq->nvariables = nvariables
        eq->coeffs = calloc(sizeof(eq->coeffs[0]), nvariables)
        memcpy(eq->coeffs, eqs[i].coeffs, sizeof(eqs[i].coeffs[0]) * eqs[i].nvariables)
        eq->rhs = eqs[i].rhs

    # Each final equation only has one unknown variable + variables from equations after it
    final_equations: Equation* = malloc(sizeof(final_equations[0]) * nvariables)

    for var = 0; var < nvariables; var++:
        #printf("Solver: variable %d/%d\n", var, nvariables)

        if solver.count_equations_having_var(var) == 0:
            # This variable could be anything. We will set it to zero.
            # I really only want to solve the first two variables, so this is fine.
            coeffs: BigInt* = calloc(sizeof(coeffs[0]), nvariables)
            coeffs[var] = bigint(1)
            final_equations[var] = Equation{nvariables = nvariables, coeffs = coeffs, rhs = bigint(0)}
        else:
            solver.eliminate_from_all_but_one_equation(var)
            eq = solver.find_equation_with_smallest_nonzero_coeff_for_var(var)
            assert eq != NULL
            final_equations[var] = *eq
            *eq = solver.eqs[--solver.neqs]

    assert solver.all_equations_are_zero_equals_zero()

    for i = 0; i < solver.neqs; i++:
        free(solver.eqs[i].coeffs)
    free(solver.eqs)

    values: BigInt* = calloc(sizeof(values[0]), nvariables)
    for var = nvariables - 1; var >= 0; var--:
        # Substitute known values into final equations
        final = final_equations[var]
        for known = var+1; known < nvariables; known++:
            final.sub(known, values[known])

        for v = 0; v < nvariables; v++:
            if v != var:
                assert final.coeffs[v].is_zero()

        values[var] = final.rhs.div_exact(final.coeffs[var])
        free(final.coeffs)

    free(final_equations)
    return values


def test_equation_solver() -> None:
    # 4x + 2y = 116
    # 10x - y = 86
    # -100x + 10y = -860
    coeffs1 = [bigint(4), bigint(2)]
    coeffs2 = [bigint(10), bigint(-1)]
    coeffs3 = [bigint(-100), bigint(10)]
    eqs = [
        Equation{nvariables = 2, coeffs = coeffs1, rhs = bigint(116)},
        Equation{nvariables = 2, coeffs = coeffs2, rhs = bigint(86)},
        Equation{nvariables = 2, coeffs = coeffs3, rhs = bigint(-860)},
    ]

    result = solve_linear_system_of_equations(eqs, 3)
    printf("x=%lld y=%lld\n", result[0].to_long(), result[1].to_long())  # Output: x=12 y=34
    free(result)


class MovingPoint:
    start: long[3]
    speed: long[3]


# We don't need the whole input, first N lines are enough
def read_input(N: int) -> MovingPoint*:
    f = fopen("sampleinput.txt", "r")
    assert f != NULL

    result: MovingPoint* = malloc(N * sizeof(result[0]))
    for i = 0; i < N; i++:
        x: long
        y: long
        z: long
        dx: long
        dy: long
        dz: long
        assert fscanf(f, "%lld, %lld, %lld @ %lld, %lld, %lld\n", &x, &y, &z, &dx, &dy, &dz) == 6
        result[i] = MovingPoint{start = [x,y,z], speed = [dx,dy,dz]}

    fclose(f)
    return result


def get_paired_index(N: int, small: int, big: int) -> int:
    counter = N
    for i = 0; i < N; i++:
        for j = i+1; j < N; j++:
            if i == small and j == big:
                return counter
            counter++
    assert False


# Returned equations describe the moments in time t_1,...,t_N where the moving points align.
# Specifically:
#
#   for each of XY plane, XZ plane, YZ plane:
#       for all moving point indexes i<j<k:
#           p1 = project location of point i at time t_i to the plane
#           p2 = project location of point j at time t_j to the plane
#           p3 = project location of point k at time t_k to the plane
#           there is an equation which says that p1,p2,p3 go along the same line.
#
# To test if 2D points go along the same line, we check if their 2x2 determinant is zero.
# Unfortunately the 2x2 determinant creates products like t_i*t_j into the equations.
# We just replace each of these products with a new dummy variable:
# t_1*t_2 becomes t_(N+1), t_1*t_3 becomes t_(N+2) and so on.
# Even with that, the resulting equations contain enough info to be solved.
def create_equations(moving_points: MovingPoint*, N: int, neqs: int*) -> Equation*:
    nvariables = N + N*(N-1)/2  # N normal variables, (n choose 2) paired variables

    eqs: Equation* = calloc(sizeof(eqs[0]), 3*N*N*N + 1)  # more than big enough
    assert eqs != NULL
    *neqs = 0

    planes = [[0,1], [0,2], [1,2]]
    for planeidx = 0; planeidx < 3; planeidx++:
        plane = planes[planeidx]
        for i = 0; i < N; i++:
            for j = i+1; j < N; j++:
                for k = j+1; k < N; k++:
                    eq = &eqs[(*neqs)++]
                    eq->nvariables = nvariables
                    eq->coeffs = calloc(sizeof(eq->coeffs[0]), nvariables)

                    six = bigint(moving_points[i].start[plane[0]])
                    siy = bigint(moving_points[i].start[plane[1]])
                    sjx = bigint(moving_points[j].start[plane[0]])
                    sjy = bigint(moving_points[j].start[plane[1]])
                    skx = bigint(moving_points[k].start[plane[0]])
                    sky = bigint(moving_points[k].start[plane[1]])

                    vix = bigint(moving_points[i].speed[plane[0]])
                    viy = bigint(moving_points[i].speed[plane[1]])
                    vjx = bigint(moving_points[j].speed[plane[0]])
                    vjy = bigint(moving_points[j].speed[plane[1]])
                    vkx = bigint(moving_points[k].speed[plane[0]])
                    vky = bigint(moving_points[k].speed[plane[1]])

                    titj_var = get_paired_index(N, i, j)
                    titk_var = get_paired_index(N, i, k)
                    tjtk_var = get_paired_index(N, j, k)

                    # These can't be written as Jou code, because they contain unknown variables:
                    #   p1 = [six + t_i*vix, siy + t_i*viy]
                    #   p2 = [sjx + t_j*vjx, sjy + t_j*vjy]
                    #   p3 = [skx + t_k*vkx, sky + t_k*vky]
                    #
                    # To ensure straight line, we do:
                    #
                    #   |  x of p1 - x of p2     x of p3 - x of p2  |
                    #   |                                           | = 0
                    #   |  y of p1 - y of p2     y of p3 - y of p2  |
                    #
                    # With sympy (Python library), I expanded this to:
                    #
                    # -six*sjy + six*sky - six*t_j*vjy + six*t_k*vky + siy*sjx - siy*skx + siy*t_j*vjx - siy*t_k*vkx - sjx*sky + sjx*t_i*viy - sjx*t_k*vky + sjy*skx - sjy*t_i*vix + sjy*t_k*vkx - skx*t_i*viy + skx*t_j*vjy + sky*t_i*vix - sky*t_j*vjx - t_i*t_j*vix*vjy + t_i*t_j*viy*vjx + t_i*t_k*vix*vky - t_i*t_k*viy*vkx - t_j*t_k*vjx*vky + t_j*t_k*vjy*vkx
                    eq->coeffs[i] = sjx.mul(viy).sub(sjy.mul(vix)).sub(skx.mul(viy)).add(sky.mul(vix))
                    eq->coeffs[j] = siy.mul(vjx).sub(six.mul(vjy)).add(skx.mul(vjy)).sub(sky.mul(vjx))
                    eq->coeffs[k] = six.mul(vky).sub(siy.mul(vkx)).sub(sjx.mul(vky)).add(sjy.mul(vkx))
                    eq->coeffs[titj_var] = viy.mul(vjx).sub(vix.mul(vjy))
                    eq->coeffs[titk_var] = vix.mul(vky).sub(viy.mul(vkx))
                    eq->coeffs[tjtk_var] = vjy.mul(vkx).sub(vjx.mul(vky))
                    eq->rhs = six.mul(sjy).sub(six.mul(sky)).sub(siy.mul(sjx)).add(siy.mul(skx)).add(sjx.mul(sky)).sub(sjy.mul(skx))

    return eqs


def lerp(src_min: long, src_max: long, dest_min: long, dest_max: long, value: long) -> long:
    weight1 = value - src_min
    weight2 = src_max - value

    # weighted average: (dest_max*weight1 + dest_min*weight2)/(weight1 + weight2)
    # multiplications are too big for longs, but values themselves seem to fit
    top = bigint(weight1).mul(bigint(dest_max)).add(bigint(weight2).mul(bigint(dest_min)))
    bottom = weight1 + weight2
    return top.div_exact(bigint(bottom)).to_long()


def test_lerp() -> None:
    #    0-------1-------2-------3-------4-------5
    #                    ^
    #
    #   100-----120-----140-----160-----180-----200
    #                    ^
    printf("%lld\n", lerp(0, 5, 100, 200, 2))  # Output: 140

    # You can extrapolate outside the input range:
    printf("%lld\n", lerp(0, 5, 100, 200, -1))  # Output: 80


def lerp3D(src_min: long, src_max: long, dest_min: long[3], dest_max: long[3], value: long) -> long[3]:
    return [
        lerp(src_min, src_max, dest_min[0], dest_max[0], value),
        lerp(src_min, src_max, dest_min[1], dest_max[1], value),
        lerp(src_min, src_max, dest_min[2], dest_max[2], value),
    ]


def main() -> int:
    test_equation_solver()
    test_lerp()

    N = 5
    moving_points = read_input(N)

    neqs: int
    eqs = create_equations(moving_points, N, &neqs)

    printf("Created %d equations\n", neqs)  # Output: Created 30 equations

#    for i = 0; i < neqs; i++:
#        eqs[i].print()

    solution = solve_linear_system_of_equations(eqs, neqs)

    # Output: 5 3 4 6 1
    printf(
        "%lld %lld %lld %lld %lld\n",
        solution[0].to_long(),
        solution[1].to_long(),
        solution[2].to_long(),
        solution[3].to_long(),
        solution[4].to_long(),
    )

    t1 = solution[0].to_long()
    t2 = solution[1].to_long()

    point_at_t1 = [
        moving_points[0].start[0] + t1*moving_points[0].speed[0],
        moving_points[0].start[1] + t1*moving_points[0].speed[1],
        moving_points[0].start[2] + t1*moving_points[0].speed[2],
    ]
    point_at_t2 = [
        moving_points[1].start[0] + t2*moving_points[1].speed[0],
        moving_points[1].start[1] + t2*moving_points[1].speed[1],
        moving_points[1].start[2] + t2*moving_points[1].speed[2],
    ]

    point_initially = lerp3D(t1, t2, point_at_t1, point_at_t2, 0)
    printf("%lld\n", point_initially[0] + point_initially[1] + point_initially[2])  # Output: 47

    free(moving_points)
    for i = 0; i < neqs; i++:
        free(eqs[i].coeffs)
    free(eqs)
    free(solution)

    return 0
