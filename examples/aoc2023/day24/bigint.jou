import "stdlib/mem.jou"


@public
def bigint(value: int64) -> BigInt:
    # assumes little-endian CPU
    result = BigInt{}
    assert sizeof(value) < sizeof(result.data)

    if value < 0:
        memset(&result.data, 0xff, sizeof(result.data))
    memcpy(&result.data, &value, sizeof(value))
    return result


@public
class BigInt:
    data: byte[48]  # little endian, last byte includes sign bit

    def to_int64(self: BigInt) -> int64:
        # assume that value fits into int64
        # also assume little-endian
        result: int64
        memcpy(&result, &self.data, sizeof(result))
        return result

    def add(self: BigInt, other: BigInt) -> BigInt:
        result = bigint(0)
        carry_bit = 0

        for i = 0; i < sizeof(self.data); i++:
            result_byte = (self.data[i] as int) + (other.data[i] as int) + carry_bit
            if result_byte >= 256:
                carry_bit = 1
            else:
                carry_bit = 0
            result.data[i] = result_byte as byte

        return result

    # -x
    def neg(self: BigInt) -> BigInt:
        # Flipping all bits (~x) is almost same as negating the value.
        # For example, -7 is f9ffffff... and ~7 is f8ffffff...
        for i = 0; i < sizeof(self.data); i++:
            self.data[i] = (0xff as byte) - self.data[i]
        return self.add(bigint(1))

    # x-y
    def sub(self: BigInt, other: BigInt) -> BigInt:
        return self.add(other.neg())

    # Return values:
    #   self < other  -->  -1
    #   self == other -->  0
    #   self > other  -->  1
    def compare(self: BigInt, other: BigInt) -> int:
        self_sign_bit = self.data[sizeof(self.data) - 1] / 128
        other_sign_bit = other.data[sizeof(other.data) - 1] / 128

        if self_sign_bit != other_sign_bit:
            return other_sign_bit - self_sign_bit

        for i = sizeof(self.data) - 1; i >= 0; i--:
            if (self.data[i] as int) < (other.data[i] as int):
                return -1
            if (self.data[i] as int) > (other.data[i] as int):
                return 1

        return 0

    # x == y
    def equals(self: BigInt, other: BigInt) -> bool:
        return self.compare(other) == 0

    # x == 0
    def is_zero(self: BigInt) -> bool:
        return self.compare(bigint(0)) == 0

    # Return values:
    #   positive --> 1
    #   zero     --> 0
    #   negative --> -1
    def sign(self: BigInt) -> int:
        return self.compare(bigint(0))

    # |x|
    def abs(self: BigInt) -> BigInt:
        if self.sign() < 0:
            return self.neg()
        else:
            return self

    # x*y
    def mul(self: BigInt, other: BigInt) -> BigInt:
        result_sign = self.sign() * other.sign()
        self = self.abs()
        other = other.abs()

        result = bigint(0)
        for i = 0; i < sizeof(self.data); i++:
            for k = 0; i+k < sizeof(result.data); k++:
                temp = (self.data[i] as int)*(other.data[k] as int)

                gonna_add = bigint(0)
                gonna_add.data[i+k] = temp as byte
                if i+k+1 < sizeof(gonna_add.data):
                    gonna_add.data[i+k+1] = (temp / 256) as byte
                result = result.add(gonna_add)

        if result.sign() != result_sign:
            result = result.neg()
        return result

    # x / 256^n for x >= 0
    def shift_smaller(self: BigInt, n: int) -> BigInt:
        assert self.sign() >= 0
        assert n >= 0

        if n >= sizeof(self.data):
            return bigint(0)

        memmove(&self.data, &self.data[n], sizeof(self.data) - n)
        memset(&self.data[sizeof(self.data) - n], 0, n)
        return self

    # x * 256^n for x >= 0
    def shift_bigger(self: BigInt, n: int) -> BigInt:
        assert self.sign() >= 0
        assert n >= 0

        if n >= sizeof(self.data):
            return bigint(0)

        memmove(&self.data[n], &self.data[0], sizeof(self.data) - n)
        memset(&self.data, 0, n)
        return self

    # [x/y, x%y]
    def divmod(self: BigInt, bottom: BigInt) -> BigInt[2]:
        assert not bottom.is_zero()

        quotient = bigint(0)
        remainder = self.abs()
        bottom_abs = bottom.abs()

        n = 0
        while remainder.shift_smaller(n).compare(bottom_abs) >= 0:
            n++

        assert n < sizeof(quotient.data)
        while n --> 0:
            # Find nth base-256 digit of result with trial and error.
            d = 0
            bigger_bottom = bottom_abs.shift_bigger(n)
            while bigger_bottom.mul(bigint(d+1)).compare(remainder) <= 0:
                if d == 0:
                    d++
                else:
                    d *= 2
            d /= 2
            while bigger_bottom.mul(bigint(d+1)).compare(remainder) <= 0:
                d++

            assert d < 256
            quotient.data[n] = d as byte
            remainder = remainder.sub(bigint(d).mul(bigger_bottom))

        if self.sign()*bottom.sign() < 0:
            quotient = quotient.neg()
        if self.sign() < 0:
            remainder = remainder.neg()

        # When nonzero remainder, force its sign to be same sign as bottom, similar to jou %
        if remainder.sign() == -bottom.sign():
            remainder = remainder.add(bottom)
            quotient = quotient.sub(bigint(1))

        return [quotient, remainder]

        # Tests:
        #
        #    for x = -100; x <= 100; x++:
        #        for y = -100; y <= 100; y++:
        #            if y != 0:
        #                result = bigint(x).divmod(bigint(y))
        #                assert x == (x/y)*y + (x%y)
        #                assert x == result[0].to_int64()*y + result[1].to_int64()
        #                assert result[0].to_int64() == x / y
        #                assert result[1].to_int64() == x % y

    # self / y
    def div(self: BigInt, other: BigInt) -> BigInt:
        pair = self.divmod(other)
        return pair[0]

    # assert x % y == 0
    # x / y
    def div_exact(self: BigInt, other: BigInt) -> BigInt:
        pair = self.divmod(other)
        assert pair[1].is_zero()
        return pair[0]
