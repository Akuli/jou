import "stdlib/ascii.jou"
import "stdlib/mem.jou"
import "stdlib/io.jou"
import "stdlib/str.jou"


class Node:
    name: byte[4]
    left: byte[4]
    right: byte[4]
    left_node: Node*
    right_node: Node*


class Input:
    left_right_string: byte[1000]
    nodes: Node[1000]
    nnodes: int

    def add_node(self, node: Node) -> void:
        assert self->nnodes < sizeof(self->nodes)/sizeof(self->nodes[0])
        self->nodes[self->nnodes++] = node

    def find_node(self, name: byte*) -> Node*:
        for i = 0; i < self->nnodes; i++:
            if strcmp(self->nodes[i].name, name) == 0:
                return &self->nodes[i]
        assert False

    def find_node_pointers(self) -> void:
        for i = 0; i < self->nnodes; i++:
            self->nodes[i].left_node = self->find_node(self->nodes[i].left)
            self->nodes[i].right_node = self->find_node(self->nodes[i].right)


def parse_input() -> Input*:
    input: Input* = calloc(1, sizeof(*input))

    f = fopen("input.txt", "r")
    assert f != NULL

    assert fgets(input->left_right_string, sizeof(input->left_right_string) as int, f) != NULL
    trim_ascii_whitespace(input->left_right_string)

    assert fgetc(f) == '\n'

    n: Node
    while fscanf(f, "%3s = (%3s, %3s)\n", &n.name, &n.left, &n.right) == 3:
        input->add_node(n)

    input->find_node_pointers()

    fclose(f)
    return input


def all_end_with_z(nodes: Node**, n: int) -> bool:
    for i = 0; i < n; i++:
        if nodes[i]->name[2] != 'Z':
            return False
    return True


def main() -> int:
    input = parse_input()

    steppers: Node*[1000]
    nsteppers = 0
    for i = 0; i < input->nnodes; i++:
        if input->nodes[i].name[2] == 'A':
            assert nsteppers < sizeof(steppers)/sizeof(steppers[0])
            steppers[nsteppers++] = &input->nodes[i]

    counter = 0L
    n = strlen(input->left_right_string)
    while not all_end_with_z(steppers, nsteppers):
        if counter % 1000000 == 0:
            printf("%lld\n", counter)
            fflush(stdout)

        c = input->left_right_string[counter++ % n]
        for i = 0; i < nsteppers; i++:
            if c == 'L':
                steppers[i] = steppers[i]->left_node
            elif c == 'R':
                steppers[i] = steppers[i]->right_node
            else:
                assert False

    free(input)
    printf("%d\n", counter)  # Output: 6

    return 0
