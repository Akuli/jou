import "stdlib/ascii.jou"
import "stdlib/io.jou"
import "stdlib/list.jou"
import "stdlib/str.jou"
import "stdlib/mem.jou"
import "stdlib/math.jou"


# 4 dimensional box
class Box:
    mins: int[4]
    maxs: int[4]

    def contains_box(self, box: Box) -> bool:
        if box.is_empty():
            return True

        for i = 0; i < 4; i++:
            if box.mins[i] < self->mins[i] or box.maxs[i] > self->maxs[i]:
                return False
        return True

    def intersect(self, other: Box) -> Box:
        result = Box{}
        for i = 0; i < 4; i++:
            result.mins[i] = max(self->mins[i], other.mins[i])
            result.maxs[i] = min(self->maxs[i], other.maxs[i])
        return result

    def overlaps(self, other: Box) -> bool:
        intersection = self->intersect(other)
        return not intersection.is_empty()

    def is_empty(self) -> bool:
        for i = 0; i < 4; i++:
            if self->mins[i] > self->maxs[i]:
                return True
        return False

    def size(self) -> long:
        if self->is_empty():
            return 0

        result = 1L
        for i = 0; i < 4; i++:
            result *= self->maxs[i] - self->mins[i] + 1
        return result

    def can_split(self, split_at: int, coord_idx: int) -> bool:
        assert 0 <= coord_idx and coord_idx < 4
        # Split must happen within the box.
        # For example if min=5 and max=10 (length = 6), then split can happen at 6,7,8,9,10.
        return self->mins[coord_idx] < split_at and split_at <= self->maxs[coord_idx]

    def split(self, split_at: int, coord_idx: int) -> Box[2]:
        assert self->can_split(split_at, coord_idx)
        result = [*self, *self]
        result[0].maxs[coord_idx] = split_at - 1
        result[1].mins[coord_idx] = split_at
        return result


class UnionOfBoxes:
    boxes: List[Box]  # non-empty and non-overlapping

    def copy(self) -> UnionOfBoxes:
        result = UnionOfBoxes{}
        result.boxes.extend(self->boxes)
        return result

    def remove_box(self, box: Box) -> None:
        if box.is_empty():
            return

        for k = self->boxes.len - 1; k >= 0; k--:
            existing = self->boxes.ptr[k]
            assert not existing.is_empty()

            if not box.overlaps(existing):
                continue

            # We need to remove a part of an existing box.
            # Split the existing box at boundaries of what we're removing.
            # Delete the parts we don't like.
            have = List[Box]{}
            have.append(existing)
            for coord_idx = 0; coord_idx < 4; coord_idx++:
                splits = [box.mins[coord_idx], box.maxs[coord_idx] + 1]
                for s = &splits[0]; s < &splits[2]; s++:
                    # Split
                    for i = have.len - 1; i >= 0; i--:
                        if have.ptr[i].can_split(*s, coord_idx):
                            split = have.ptr[i].split(*s, coord_idx)
                            have.ptr[i] = split[0]
                            have.append(split[1])

                    # Delete unwanted small boxes
                    for i = have.len - 1; i >= 0; i--:
                        assert not have.ptr[i].is_empty()
                        if box.contains_box(have.ptr[i]):
                            have.ptr[i] = have.ptr[--have.len]

            # Replace self->boxes[k] with "have"
            self->boxes.ptr[k] = self->boxes.ptr[--self->boxes.len]
            self->boxes.extend(have)
            free(have.ptr)

    def add_box(self, box: Box) -> None:
        if not box.is_empty():
            self->remove_box(box)
            self->boxes.append(box)

    def add_union_of_boxes(self, u: UnionOfBoxes) -> None:
        for p = u.boxes.ptr; p < u.boxes.end(); p++:
            self->add_box(*p)

    def intersect_with_box(self, box: Box) -> None:
        for i = self->boxes.len - 1; i >= 0; i--:
            self->boxes.ptr[i] = self->boxes.ptr[i].intersect(box)
            if self->boxes.ptr[i].is_empty():
                self->boxes.ptr[i] = self->boxes.ptr[--self->boxes.len]

    def size(self) -> long:
        result = 0L
        for p = self->boxes.ptr; p < self->boxes.end(); p++:
            result += p->size()
        return result


class Workflow:
    name: byte[10]
    ifs: List[Box]
    thens: List[byte[10]]
    the_else: byte[10]
    how_to_get_here: UnionOfBoxes


def take_word(p: byte**) -> byte[10]:
    result: byte[10]

    i = 0
    while is_ascii_letter(**p):
        assert i < sizeof(result)
        result[i++] = *(*p)++

    assert i < sizeof(result)
    result[i] = '\0'
    return result


def parse_workflow(s: byte*) -> Workflow:
    wf = Workflow{name = take_word(&s)}
    assert *s++ == '{'

    while True:
        # Check for the special else word
        p = s
        possibly_the_else = take_word(&p)
        if *p == '}':
            assert p[1] == '\0'
            wf.the_else = possibly_the_else
            return wf

        # "s>1188:ktb," --> var="s", op='>', num=1188, then="ktb"
        var = take_word(&s)
        op = *s++
        num = atoi(s)
        while is_ascii_digit(*s):
            s++
        assert *s++ == ':'
        then = take_word(&s)
        assert *s++ == ','

        xmas = "xmas"
        ptr = strstr(xmas, var)
        assert ptr != NULL
        var_index = (ptr as long) - (&xmas[0] as long)

        mins = [1, 1, 1, 1]
        maxs = [4000, 4000, 4000, 4000]
        if op == '<':
            maxs[var_index] = num-1
        elif op == '>':
            mins[var_index] = num+1
        else:
            assert False

        wf.ifs.append(Box{mins=mins, maxs=maxs})
        wf.thens.append(then)


def find_workflow(workflows: List[Workflow], name: byte*) -> Workflow*:
    for p = workflows.ptr; p < workflows.end(); p++:
        if strcmp(p->name, name) == 0:
            return p
    assert False


def main() -> int:
    f = fopen("sampleinput.txt", "r")
    assert f != NULL

    workflows = List[Workflow]{}

    line: byte[200]
    while fgets(line, sizeof(line) as int, f) != NULL:
        trim_ascii_whitespace(line)
        if line[0] == '\0':
            # end of workflows
            break
        workflows.append(parse_workflow(line))

    fclose(f)

    # add dummy "A" and "R" workflows
    workflows.append(parse_workflow("A{A}"))
    workflows.append(parse_workflow("R{R}"))

    start_bounds = UnionOfBoxes{}
    start_bounds.add_box(Box{mins=[1,1,1,1], maxs=[4000,4000,4000,4000]})
    find_workflow(workflows, "in")->how_to_get_here = start_bounds

    did_something = True
    while did_something:
        did_something = False

        for wf = workflows.ptr; wf < workflows.end(); wf++:
            bounds = wf->how_to_get_here.copy()

            assert wf->ifs.len == wf->thens.len
            for i = 0; i < wf->ifs.len; i++:
                true_bounds = bounds.copy()
                true_bounds.intersect_with_box(wf->ifs.ptr[i])

                wf2 = find_workflow(workflows, wf->thens.ptr[i])
                old = wf2->how_to_get_here.size()
                wf2->how_to_get_here.add_union_of_boxes(true_bounds)
                new = wf2->how_to_get_here.size()
                assert old <= new
                if old < new:
                    did_something = True

                free(true_bounds.boxes.ptr)
                bounds.remove_box(wf->ifs.ptr[i])

            find_workflow(workflows, wf->the_else)->how_to_get_here.add_union_of_boxes(bounds)
            free(bounds.boxes.ptr)

    printf("%lld\n", find_workflow(workflows, "A")->how_to_get_here.size())  # Output: 167409079868000

    for wf = workflows.ptr; wf < workflows.end(); wf++:
        free(wf->ifs.ptr)
        free(wf->thens.ptr)
        free(wf->how_to_get_here.boxes.ptr)
    free(workflows.ptr)
    return 0
