import "stdlib/str.jou"
import "stdlib/io.jou"
import "stdlib/ascii.jou"


class Game:
    red: int
    green: int
    blue: int

    def update(self, text: byte*) -> void:
        n: int
        color: byte[10]
        assert sscanf(text, "%d %10s", &n, color) == 2

        if strcmp(color, "red") == 0 and n > self->red:
            self->red = n
        if strcmp(color, "green") == 0 and n > self->green:
            self->green = n
        if strcmp(color, "blue") == 0 and n > self->blue:
            self->blue = n

    def get_power(self) -> int:
        return self->red * self->green * self->blue


def parse_game(game_data: byte*) -> Game:
    result = Game{}

    # loop in ; or , separated chunks
    while *game_data != '\0':
        chunk_len = strcspn(game_data, ";,")
        chunk = game_data

        # \0 terminate the chunk and skip it
        game_data = &game_data[chunk_len]
        if *game_data != '\0':  # check needed to avoid overflow at end of string
            *game_data = '\0'
            game_data++

        trim_ascii_whitespace(chunk)
        result.update(chunk)

    return result


def main() -> int:
    f = fopen("input.txt", "r")
    assert f != NULL

    result = 0
    line: byte[1000]
    while fgets(line, sizeof(line) as int, f) != NULL:
        id_end = strchr(line, ':')
        assert id_end != NULL
        game = parse_game(&id_end[1])
        result += game.get_power()

    fclose(f)

    printf("%d\n", result)  # Output: 72706
    return 0
