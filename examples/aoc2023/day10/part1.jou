import "stdlib/io.jou"
import "stdlib/mem.jou"
import "stdlib/str.jou"
import "../grid.jou"


def get_dirs(c: byte) -> int[2][2]:
    if c == '7':
        return [[-1, 0], [0, 1]]
    if c == 'J':
        return [[-1, 0], [0, -1]]
    if c == 'L':
        return [[1, 0], [0, -1]]
    if c == 'F':
        return [[1, 0], [0, 1]]
    if c == '-':
        return [[-1, 0], [1, 0]]
    if c == '|':
        return [[0, -1], [0, 1]]

    assert False


def eq(a: int[2], b: int[2]) -> bool:
    return a[0] == b[0] and a[1] == b[1]


def find_initial_direction(grid: Grid*, S: int[2]) -> int[2]:
    directions = [[0,1], [0,-1], [1,0], [-1,0]]
    for d = &directions[0]; d < &directions[4]; d++:
        S_to_neighbor = *d
        neighbor = [S[0] + S_to_neighbor[0], S[1] + S_to_neighbor[1]]

        if grid->is_in_bounds(neighbor) and grid->get(neighbor) != '.':
            dirs = get_dirs(grid->get(neighbor))
            if eq(dirs[0], S_to_neighbor) or eq(dirs[1], S_to_neighbor):
                return S_to_neighbor

    assert False


def main() -> int:
    max_len = 100000
    grid = Grid{data = calloc(1, max_len+1)}

    f = fopen("sampleinput.txt", "r")
    assert f != NULL
    fread(grid.data, 1, max_len, f)
    fclose(f)

    grid.width = strcspn(grid.data, "\n") as int
    grid.height = (strlen(grid.data) as int) / (grid.width + 1)

    S_list = grid.find_all('S')
    point = S_list[0]
    free(S_list)
    assert point[0] != -1 and point[1] != -1

    # take first step away from S
    dir = find_initial_direction(&grid, point)
    point[0] += dir[0]
    point[1] += dir[1]
    loop_length = 1

    while grid.get(point) != 'S':
        came_from = [-dir[0], -dir[1]]
        dirs = get_dirs(grid.get(point))
        assert eq(came_from, dirs[0]) or eq(came_from, dirs[1])
        if eq(came_from, dirs[0]):
            dir = dirs[1]
        else:
            dir = dirs[0]
        point[0] += dir[0]
        point[1] += dir[1]
        loop_length++

    assert loop_length % 2 == 0
    printf("%d\n", loop_length / 2)  # Output: 4

    free(grid.data)
    return 0
