import "stdlib/io.jou"
import "stdlib/mem.jou"
import "stdlib/str.jou"


class Input:
    width: int
    height: int
    data: byte*

    def is_in_bounds(self, point: int[2]) -> bool:
        x = point[0]
        y = point[1]
        return 0 <= x and x < self->width and 0 <= y and y < self->height

    def get(self, point: int[2]) -> byte:
        assert self->is_in_bounds(point)
        x = point[0]
        y = point[1]
        return self->data[(self->width + 1)*y + x]


def find_S(input: Input*) -> int[2]:
    for x = 0; x < input->width; x++:
        for y = 0; y < input->height; y++:
            if input->get([x, y]) == 'S':
                return [x, y]

    assert False


def get_dirs(c: byte) -> int[2][2]:
    if c == '7':
        return [[-1, 0], [0, 1]]
    if c == 'J':
        return [[-1, 0], [0, -1]]
    if c == 'L':
        return [[1, 0], [0, -1]]
    if c == 'F':
        return [[1, 0], [0, 1]]
    if c == '-':
        return [[-1, 0], [1, 0]]
    if c == '|':
        return [[0, -1], [0, 1]]

    printf("c = '%c'\n", c)
    fflush(stdout)
    assert False


def eq(a: int[2], b: int[2]) -> bool:
    return a[0] == b[0] and a[1] == b[1]


def find_initial_direction(input: Input*, S: int[2]) -> int[2]:
    directions = [[0,1], [0,-1], [1,0], [-1,0]]
    for d = &directions[0]; d < &directions[4]; d++:
        S_to_neighbor = *d
        neighbor_to_S = [-S_to_neighbor[0], -S_to_neighbor[1]]
        neighbor = [S[0] + S_to_neighbor[0], S[1] + S_to_neighbor[1]]

        if input->is_in_bounds(neighbor) and input->get(neighbor) != '.':
            dirs = get_dirs(input->get(neighbor))
            if eq(dirs[0], S_to_neighbor) or eq(dirs[1], S_to_neighbor):
                return S_to_neighbor

    assert False


def main() -> int:
    max_len = 100000
    input = Input{data = calloc(1, max_len+1)}

    f = fopen("sampleinput.txt", "r")
    assert f != NULL
    fread(input.data, 1, max_len, f)
    fclose(f)

    input.width = strcspn(input.data, "\n") as int
    input.height = (strlen(input.data) as int) / (input.width + 1)

    point = find_S(&input)

    # take first step away from S
    dir = find_initial_direction(&input, point)
    point[0] += dir[0]
    point[1] += dir[1]
    loop_length = 1

    while input.get(point) != 'S':
        came_from = [-dir[0], -dir[1]]
        dirs = get_dirs(input.get(point))
        assert eq(came_from, dirs[0]) or eq(came_from, dirs[1])
        if eq(came_from, dirs[0]):
            dir = dirs[1]
        else:
            dir = dirs[0]
        point[0] += dir[0]
        point[1] += dir[1]
        loop_length++

    assert loop_length % 2 == 0
    printf("%d\n", loop_length / 2)  # Output: 4

    free(input.data)
    return 0
