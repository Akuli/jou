import "stdlib/io.jou"
import "stdlib/mem.jou"
import "stdlib/str.jou"
import "stdlib/math.jou"


class Input:
    width: int
    height: int
    data: byte*

    def is_in_bounds(self, point: int[2]) -> bool:
        x = point[0]
        y = point[1]
        return 0 <= x and x < self->width and 0 <= y and y < self->height

    def get(self, point: int[2]) -> byte:
        assert self->is_in_bounds(point)
        x = point[0]
        y = point[1]
        return self->data[(self->width + 1)*y + x]


def find_S(input: Input*) -> int[2]:
    for x = 0; x < input->width; x++:
        for y = 0; y < input->height; y++:
            if input->get([x, y]) == 'S':
                return [x, y]

    assert False


def get_dirs(c: byte) -> int[2][2]:
    if c == '7':
        return [[-1, 0], [0, 1]]
    if c == 'J':
        return [[-1, 0], [0, -1]]
    if c == 'L':
        return [[1, 0], [0, -1]]
    if c == 'F':
        return [[1, 0], [0, 1]]
    if c == '-':
        return [[-1, 0], [1, 0]]
    if c == '|':
        return [[0, -1], [0, 1]]

    assert False


def eq(a: int[2], b: int[2]) -> bool:
    return a[0] == b[0] and a[1] == b[1]


def find_initial_direction(input: Input*, S: int[2]) -> int[2]:
    directions = [[0,1], [0,-1], [1,0], [-1,0]]
    for d = &directions[0]; d < &directions[4]; d++:
        S_to_neighbor = *d
        neighbor_to_S = [-S_to_neighbor[0], -S_to_neighbor[1]]
        neighbor = [S[0] + S_to_neighbor[0], S[1] + S_to_neighbor[1]]

        if input->is_in_bounds(neighbor) and input->get(neighbor) != '.':
            dirs = get_dirs(input->get(neighbor))
            if eq(dirs[0], S_to_neighbor) or eq(dirs[1], S_to_neighbor):
                return S_to_neighbor

    assert False


def polygon_area(corners: int[2]*, ncorners: int) -> int:
    # Any polygon area can be thought of as consisting of triangle areas.
    #
    # Consider a triangle with two adjacent sides as corners:
    #
    #         O  corners[i]
    #         |\
    #         | \
    #         |  \
    #         |   \
    #         | A  O  corners[i+1]
    #         |   /
    #         |  /
    #         | /
    #         |/
    #         O
    #
    #       (0,0)
    #
    # Its area is 1/2 |det(corners[i], corners[i+1])|, where det(a,b)
    # denotes a 2x2 determinant with a and b as rows (or columns), and
    # | ... | denotes the absolute value. Without the absolute value,
    # the sign of a determinant is basically the orientation of the
    # triangle.
    #
    # We can view a polygon's area as consisting of triangles like this.
    # As we go around the polygon, the differently oriented triangles
    # overlap with opposite orientations outside the polygon, but not
    # inside the polygon. So
    #
    #    polygon area = 1/2 |sum(det(corners[i], corners[i+1]))|
    double_area = 0
    for i = 0; i < ncorners; i++:
        a = corners[i][0]
        b = corners[i][1]
        c = corners[(i+1) % ncorners][0]
        d = corners[(i+1) % ncorners][1]
        double_area += a*d - b*c
    return abs(double_area)/2


def main() -> int:
    max_len = 100000
    input = Input{data = calloc(1, max_len+1)}

    f = fopen("sampleinput2.txt", "r")
    assert f != NULL
    fread(input.data, 1, max_len, f)
    fclose(f)

    input.width = strcspn(input.data, "\n") as int
    input.height = (strlen(input.data) as int) / (input.width + 1)

    point = find_S(&input)

    loop: int[2]* = malloc(input.width * input.height * sizeof(loop[0]))
    loop[0] = point

    # take first step away from S
    dir = find_initial_direction(&input, point)
    point[0] += dir[0]
    point[1] += dir[1]
    loop_length = 1

    while input.get(point) != 'S':
        came_from = [-dir[0], -dir[1]]
        dirs = get_dirs(input.get(point))
        assert eq(came_from, dirs[0]) or eq(came_from, dirs[1])
        if eq(came_from, dirs[0]):
            dir = dirs[1]
        else:
            dir = dirs[0]
        loop[loop_length++] = point
        point[0] += dir[0]
        point[1] += dir[1]

    area_along_middle_of_path = polygon_area(loop, loop_length)

    # Suppose the path has:
    #   n 90 degree turns towards inside of loop [1/4]
    #   m 90 degree turns towards outside of loop [3/4]
    #   k straight lines [+1/2]
    #
    # In square brackets is how much bigger area_along_middle_of_path
    # becomes than area inside loop. For example, each straight line
    # contributes 1/2 extra. So:
    #
    #   area_along_middle_of_path
    #   = area_inside_loop + 1/4 n + 3/4 m + 1/2 k
    #   = area_inside_loop + (n+m+k)/2 - (n-m)/4
    #   = area_inside_loop + loop_length/2 - 1
    #
    # Here n-m = 4 because the loop goes around a total of 360 degrees
    # towards the inside.
    printf("%d\n", area_along_middle_of_path + 1 - loop_length/2)  # Output: 4

    free(input.data)
    free(loop)
    return 0
