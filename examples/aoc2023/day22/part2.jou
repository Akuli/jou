import "stdlib/io.jou"
import "stdlib/math.jou"
import "stdlib/mem.jou"


class Block:
    # start and end are included, same start and end means 1x1x1 block.
    # These must be in the correct order: start[i] <= end[i] for i=0,1,2.
    start: int[3]
    end: int[3]

    def print(self) -> None:
        printf("%d,%d,%d~%d,%d,%d\n", self->start[0], self->start[1], self->start[2], self->end[0], self->end[1], self->end[2])

    def intersects(self, other: Block*) -> bool:
        for i = 0; i < 3; i++:
            assert self->start[i] <= self->end[i]
            assert other->start[i] <= other->end[i]

            # Try to find out where the intersection would be, and see if it's empty
            start = max(self->start[i], other->start[i])
            end = min(self->end[i], other->end[i])
            if start > end:
                return False

        return True


def block_can_fall(blocks: Block*, nblocks: int, b: Block*) -> bool:
    assert 0 <= b->start[2] and b->start[2] <= b->end[2]
    if b->start[2] == 0:
        return False

    b->start[2]--
    b->end[2]--

    for i = 0; i < nblocks; i++:
        if &blocks[i] != b and blocks[i].intersects(b):
            b->start[2]++
            b->end[2]++
            return False

    b->start[2]++
    b->end[2]++
    return True


def drop_blocks(blocks: Block*, nblocks: int) -> None:
    did_something = True
    while did_something:
        did_something = False
        for i = 0; i < nblocks; i++:
            if block_can_fall(blocks, nblocks, &blocks[i]):
                blocks[i].start[2]--
                blocks[i].end[2]--
                did_something = True


def main() -> int:
    blocks: Block[2000]
    nblocks = 0

    f = fopen("sampleinput.txt", "r")
    assert f != NULL

    b: Block
    while fscanf(f, "%d,%d,%d~%d,%d,%d\n", &b.start[0], &b.start[1], &b.start[2], &b.end[0], &b.end[1], &b.end[2]) == 6:
        assert nblocks < sizeof(blocks)/sizeof(blocks[0])
        blocks[nblocks++] = b

    fclose(f)

    for i = 0; i < nblocks; i++:
        for k = 0; k < i; k++:
            assert not blocks[i].intersects(&blocks[k])

    drop_blocks(blocks, nblocks)
    result = 0

    for i = 0; i < nblocks; i++:
        removed = blocks[i]
        blocks[i] = blocks[--nblocks]

        dropped_blocks: Block[2000]
        assert sizeof(dropped_blocks) == sizeof(blocks)
        memcpy(&dropped_blocks, &blocks, sizeof(blocks[0]) * nblocks)
        drop_blocks(dropped_blocks, nblocks)

        for k = 0; k < nblocks; k++:
            if dropped_blocks[k].start[2] < blocks[k].start[2]:
                result++

        blocks[nblocks++] = blocks[i]
        blocks[i] = removed

    printf("%d\n", result)  # Output: 7

    return 0
