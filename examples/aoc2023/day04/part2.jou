import "stdlib/io.jou"
import "stdlib/str.jou"
import "stdlib/mem.jou"
import "stdlib/ascii.jou"


# returned array is -1 terminated and should be free()d
def read_win_counts() -> int[500]:
    f = fopen("sampleinput.txt", "r")
    assert f != NULL

    result: int[500]
    result_len = 0

    line: byte[1000]
    while fgets(line, sizeof(line) as int, f) != NULL:
        words = split_by_ascii_whitespace(line)
        assert words[0] != NULL and strcmp(words[0], "Card") == 0
        assert words[1] != NULL and atoi(words[1]) == result_len+1

        winning: int[100]
        nwinning = 0
        match_count = 0

        no_separator_yet = True
        for i = 2; words[i] != NULL; i++:
            if strcmp(words[i], "|") == 0:
                no_separator_yet = False
            else:
                n = atoi(words[i])
                if no_separator_yet:
                    assert nwinning < sizeof(winning)/sizeof(winning[0])
                    winning[nwinning++] = n
                else:
                    # check if this is a winning number
                    for k = 0; k < nwinning; k++:
                        if winning[k] == n:
                            match_count++
                            break

        assert result_len < sizeof(result)/sizeof(result[0])
        result[result_len++] = match_count

        free(words)

    fclose(f)

    assert result_len < sizeof(result)/sizeof(result[0])
    result[result_len] = -1
    return result


def main() -> int:
    win_counts = read_win_counts()
    num_cards = 0
    for i = 0; win_counts[i] != -1; i++:
        num_cards++

    assert sizeof(win_counts)/sizeof(win_counts[0]) == 500
    card_counts: int[500]
    for i = 0; i < num_cards; i++:
        card_counts[i] = 1

    # process wins --> more cards
    for i = 0; i < num_cards; i++:
        for k = i+1; k <= i + win_counts[i]; k++:
            assert k < num_cards
            card_counts[k] += card_counts[i]

    sum = 0
    for i = 0; i < num_cards; i++:
        sum += card_counts[i]
    printf("%d\n", sum)  # Output: 30

    return 0
