# assume llvm_headers.zip has been extracted
CFLAGS += -I.

# .a files generated in windows_setup.sh
LDFLAGS += $(wildcard libs/lib*.a)

ifeq ($(CC),cc)
	# default c compiler --> use clang
	CC := mingw64/bin/clang.exe
endif

# clang version in mingw doesn't seem as mature as what I have on linux...
# it shows a lot of unnecssary/dumb warnings by default
CFLAGS += -Wno-return-type -Wno-uninitialized -Wno-implicit-fallthrough

all: compile_flags.txt jou.exe

# point clangd to the right include folder so i don't get red squiggles in my editor
compile_flags.txt:
	echo "-I$(CURDIR)" > compile_flags.txt

config.jou:
	echo "# auto-generated by Makefile" > config.jou
	echo "def get_jou_clang_path() -> byte*:" >> config.jou
	echo "    return NULL" >> config.jou

# Stage 1 of bootstrapping: Compile the bootstrap compiler with a C compiler.
BSRC := $(wildcard bootstrap_compiler/*.c)
bootstrap_obj_%.o:
	mkdir -p bootstrap/obj && $(CC) -c $(CFLAGS) $< -o $@
bootstrap/stage1.exe: $(BSRC:bootstrap_compiler/%.c=bootstrap_obj_%.o)
	$(CC) $(CFLAGS) $^ -o bootstrap/stage1.exe $(LDFLAGS)

# Stage 2 of bootstrapping: Compile the Jou compiler with the bootstrap compiler.
# Don't depend on Jou files, so that only stage 3 recompiles if they're changed.
bootstrap/stage2.exe: bootstrap/stage1.exe config.jou
	rm -rf compiler/jou_compiled && bootstrap/stage1.exe -o bootstrap/stage2.exe --linker-flags "$(LDFLAGS)" compiler/main.jou

# Stage 3 of bootstrapping: Compile the Jou compiler with the Jou compiler.
jou.exe: bootstrap/stage2.exe config.jou $(wildcard compiler/*.jou)
	rm -rf compiler/jou_compiled && bootstrap/stage2.exe -o jou.exe --linker-flags "$(LDFLAGS)" compiler/main.jou

.PHONY: clean
clean:
	rm -rvf obj jou.exe self_hosted_compiler.exe tmp config.jou compile_flags.txt
	find -name jou_compiled -print -exec rm -rf '{}' +
