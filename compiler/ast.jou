# This file defines data structures of the Abstract Syntax Tree. They are
# constructed in parser.jou.
#
# Many classes in this file have .print(), which can be used during debugging. If
# .print() exists, you probably don't need to call .print_with_tree_printer(),
# which is basically an internal detail of the .print() implementation.

import "stdlib/io.jou"
import "stdlib/str.jou"
import "stdlib/mem.jou"

import "./errors_and_warnings.jou"
import "./types.jou"
import "./utils.jou"


enum AstTypeKind:
    Named
    Pointer
    Array


class AstArrayType:
    member_type: AstType*
    length: AstExpression*

    def free(self) -> None:
        self->member_type->free()
        self->length->free()
        free(self->member_type)
        free(self->length)


class AstType:
    kind: AstTypeKind
    location: Location

    union:
        name: byte[100]     # AstTypeKind::Named
        value_type: AstType* # AstTypeKind::Pointer
        array: AstArrayType # AstTypeKind::Array

    def is_void(self) -> bool:
        return self->kind == AstTypeKind::Named and strcmp(self->name, "void") == 0

    def is_none(self) -> bool:
        return self->kind == AstTypeKind::Named and strcmp(self->name, "None") == 0

    def is_noreturn(self) -> bool:
        return self->kind == AstTypeKind::Named and strcmp(self->name, "noreturn") == 0

    def print(self, show_lineno: bool) -> None:
        if self->kind == AstTypeKind::Named:
            printf("%s", self->name)
        elif self->kind == AstTypeKind::Pointer:
            self->value_type->print(False)
            printf("*")
        elif self->kind == AstTypeKind::Array:
            self->array.member_type->print(False)
            printf("[<size>]")  # TODO: show the size expression better?
        else:
            assert False

        if show_lineno:
            printf(" [line %d]", self->location.lineno)

    def free(self) -> None:
        if self->kind == AstTypeKind::Pointer:
            self->value_type->free()
            free(self->value_type)
        if self->kind == AstTypeKind::Array:
            self->array.free()


# Statements and expressions can be printed in a tree.
# To see a tree, run:
#
#   $ jou --parse-only examples/hello.jou
#
class TreePrinter:
    prefix: byte[100]

    # Returned subprinter can be used to print elements "inside" the current line.
    def print_prefix(self, is_last_child: bool) -> TreePrinter:
        subprinter = TreePrinter{}
        if is_last_child:
            printf("%s`--- ", self->prefix)
            snprintf(subprinter.prefix, sizeof subprinter.prefix, "%s  ", self->prefix)
        else:
            printf("%s|--- ", self->prefix)
            snprintf(subprinter.prefix, sizeof subprinter.prefix, "%s| ", self->prefix)
        return subprinter


# Foo::Bar
class AstEnumMember:
    enum_name: byte[100]
    member_name: byte[100]


# foo.bar, foo->bar
class AstClassField:
    instance: AstExpression*
    uses_arrow_operator: bool  # distinguishes foo.bar and foo->bar
    field_name: byte[100]

    def free(self) -> None:
        self->instance->free()
        free(self->instance)


# Foo{bar = 1, baz = 2}
class AstInstantiation:
    class_name_location: Location  # TODO: probably not necessary, can use location of the instantiate expression
    class_name: byte[100]
    nfields: int
    field_names: byte[100]*
    field_values: AstExpression*

    def print(self) -> None:
        self->print_with_tree_printer(TreePrinter{})

    def print_with_tree_printer(self, tp: TreePrinter) -> None:
        printf("instantiate \"%s\"\n", self->class_name)
        for i = 0; i < self->nfields; i++:
            sub = tp.print_prefix(i == self->nfields - 1)
            printf("field \"%s\": ", self->field_names[i])
            self->field_values[i].print_with_tree_printer(sub)

    def free(self) -> None:
        for i = 0; i < self->nfields; i++:
            self->field_values[i].free()
        free(self->field_names)
        free(self->field_values)


class ExpressionTypes:
    # Type of value that the expression evaluates to, or NULL if the expression
    # is calling '-> None' function/method.
    type: Type*

    # NULL if there's no implicit cast.
    implicit_cast_type: Type*

    # Flags to indicate whether special kinds of implicit casts happened
    implicit_array_to_pointer_cast: bool    # Foo[N] to Foo*
    implicit_string_to_array_cast: bool     # "..." to byte[N]


enum AstExpressionKind:
    String
    Int
    Short
    Long
    Byte
    Float
    Double
    Bool
    Null
    Array
    Call  # function call or method call
    Instantiate   # MyClass{x=1, y=2}
    Self    # not a variable lookup, so you can't use 'self' as variable name outside a class
    GetVariable
    GetEnumMember
    GetClassField   # foo.bar, foo->bar
    As
    # unary operators
    SizeOf      # sizeof x
    AddressOf   # &x
    Dereference # *x
    Negate      # -x
    Not         # not x
    PreIncr     # ++x
    PostIncr    # x++
    PreDecr     # --x
    PostDecr    # x--
    # binary operators
    Add         # x+y
    Sub         # x-y
    Mul         # x*y
    Div         # x/y
    Indexing    # x[y]
    Mod         # x % y
    Eq          # x == y
    Ne          # x != y
    Gt          # x > y
    Lt          # x < y
    Ge          # x >= y
    Le          # x <= y
    And         # x and y
    Or          # x or y

class AstExpression:
    location: Location
    kind: AstExpressionKind

    # Populated during type checking. Before that, all fields are zeroed
    # (e.g. NULL or false).
    types: ExpressionTypes

    union:
        enum_member: AstEnumMember
        class_field: AstClassField
        string: byte*
        int_value: int
        short_value: short
        long_value: long
        byte_value: byte
        bool_value: bool
        call: AstCall
        instantiation: AstInstantiation
        as_: AstAs*  # Must be pointer, because it contains an AstExpression
        array: AstArray
        varname: byte[100]
        float_or_double_text: byte[100]
        operands: AstExpression*  # Only for operators. Length is arity, see get_arity()

    def print(self) -> None:
        self->print_with_tree_printer(TreePrinter{})

    def print_with_tree_printer(self, tp: TreePrinter) -> None:
        printf("[line %d", self->location.lineno)
        if self->types.type != NULL:
            printf(", type %s", self->types.type->name)
            # TODO: print casts and other stuff under self->types?
        printf("] ")

        if self->kind == AstExpressionKind::String:
            printf("string ")
            print_string(self->string, strlen(self->string))
            printf("\n")
        elif self->kind == AstExpressionKind::Short:
            printf("short %hd\n", self->short_value)
        elif self->kind == AstExpressionKind::Int:
            printf("int %d\n", self->int_value)
        elif self->kind == AstExpressionKind::Long:
            printf("long %lld\n", self->long_value)
        elif self->kind == AstExpressionKind::Byte:
            printf("byte %d\n", self->byte_value)
        elif self->kind == AstExpressionKind::Float:
            printf("float %s\n", self->float_or_double_text)
        elif self->kind == AstExpressionKind::Double:
            printf("double %s\n", self->float_or_double_text)
        elif self->kind == AstExpressionKind::Bool:
            if self->bool_value:
                printf("True\n")
            else:
                printf("False\n")
        elif self->kind == AstExpressionKind::Null:
            printf("NULL\n")
        elif self->kind == AstExpressionKind::Indexing:
            printf("indexing\n")
        elif self->kind == AstExpressionKind::Array:
            printf("array\n")
            for i = 0; i < self->array.length; i++:
                self->array.items[i].print_with_tree_printer(tp.print_prefix(i == self->array.length-1))
        elif self->kind == AstExpressionKind::Call:
            self->call.print_with_tree_printer(tp)
        elif self->kind == AstExpressionKind::Instantiate:
            self->instantiation.print_with_tree_printer(tp)
        elif self->kind == AstExpressionKind::Self:
            printf("self\n")
        elif self->kind == AstExpressionKind::GetVariable:
            printf("get variable \"%s\"\n", self->varname)
        elif self->kind == AstExpressionKind::GetEnumMember:
            printf(
                "get member \"%s\" from enum \"%s\"\n",
                self->enum_member.member_name,
                self->enum_member.enum_name,
            )
        elif self->kind == AstExpressionKind::GetClassField:
            printf("get class field \"%s\"", self->class_field.field_name)
            if self->class_field.uses_arrow_operator:
                printf(" with the arrow operator")
            printf("\n")
            self->class_field.instance->print_with_tree_printer(tp.print_prefix(True))
        elif self->kind == AstExpressionKind::As:
            self->as_->print_with_tree_printer(tp)
        elif self->kind == AstExpressionKind::SizeOf:
            printf("sizeof\n")
        elif self->kind == AstExpressionKind::AddressOf:
            printf("address of\n")
        elif self->kind == AstExpressionKind::Dereference:
            printf("dereference\n")
        elif self->kind == AstExpressionKind::Negate:
            printf("negate\n")
        elif self->kind == AstExpressionKind::Not:
            printf("not\n")
        elif self->kind == AstExpressionKind::PreIncr:
            printf("pre-increment\n")
        elif self->kind == AstExpressionKind::PostIncr:
            printf("post-increment\n")
        elif self->kind == AstExpressionKind::PreDecr:
            printf("pre-decrement\n")
        elif self->kind == AstExpressionKind::PostDecr:
            printf("post-decrement\n")
        elif self->kind == AstExpressionKind::Add:
            printf("add\n")
        elif self->kind == AstExpressionKind::Sub:
            printf("sub\n")
        elif self->kind == AstExpressionKind::Mul:
            printf("mul\n")
        elif self->kind == AstExpressionKind::Div:
            printf("div\n")
        elif self->kind == AstExpressionKind::Mod:
            printf("mod\n")
        elif self->kind == AstExpressionKind::Eq:
            printf("eq\n")
        elif self->kind == AstExpressionKind::Ne:
            printf("ne\n")
        elif self->kind == AstExpressionKind::Gt:
            printf("gt\n")
        elif self->kind == AstExpressionKind::Ge:
            printf("ge\n")
        elif self->kind == AstExpressionKind::Lt:
            printf("lt\n")
        elif self->kind == AstExpressionKind::Le:
            printf("le\n")
        elif self->kind == AstExpressionKind::And:
            printf("and\n")
        elif self->kind == AstExpressionKind::Or:
            printf("or\n")
        else:
            printf("????? (kind=%d)\n", self->kind as int)

        for i = 0; i < self->get_arity(); i++:
            self->operands[i].print_with_tree_printer(tp.print_prefix(i == self->get_arity()-1))

    def free(self) -> None:
        if self->kind == AstExpressionKind::Call:
            self->call.free()
        elif self->kind == AstExpressionKind::As:
            self->as_->free()
            free(self->as_)
        elif self->kind == AstExpressionKind::String:
            free(self->string)
        elif self->kind == AstExpressionKind::Array:
            self->array.free()
        elif self->kind == AstExpressionKind::Instantiate:
            self->instantiation.free()
        elif self->kind == AstExpressionKind::GetClassField:
            self->class_field.free()

        if self->get_arity() != 0:
            for i = 0; i < self->get_arity(); i++:
                self->operands[i].free()
            free(self->operands)

    # arity = number of operands, e.g. 2 for a binary operator such as "+"
    def get_arity(self) -> int:
        if (
            self->kind == AstExpressionKind::SizeOf
            or self->kind == AstExpressionKind::AddressOf
            or self->kind == AstExpressionKind::Dereference
            or self->kind == AstExpressionKind::Negate
            or self->kind == AstExpressionKind::Not
            or self->kind == AstExpressionKind::PreIncr
            or self->kind == AstExpressionKind::PreDecr
            or self->kind == AstExpressionKind::PostIncr
            or self->kind == AstExpressionKind::PostDecr
        ):
            return 1
        if (
            self->kind == AstExpressionKind::Add
            or self->kind == AstExpressionKind::Sub
            or self->kind == AstExpressionKind::Mul
            or self->kind == AstExpressionKind::Div
            or self->kind == AstExpressionKind::Indexing
            or self->kind == AstExpressionKind::Mod
            or self->kind == AstExpressionKind::Eq
            or self->kind == AstExpressionKind::Ne
            or self->kind == AstExpressionKind::Gt
            or self->kind == AstExpressionKind::Lt
            or self->kind == AstExpressionKind::Ge
            or self->kind == AstExpressionKind::Le
            or self->kind == AstExpressionKind::And
            or self->kind == AstExpressionKind::Or
        ):
            return 2
        return 0

    def is_valid_as_a_statement(self) -> bool:
        return (
            self->kind == AstExpressionKind::Call
            or self->kind == AstExpressionKind::PreIncr
            or self->kind == AstExpressionKind::PreDecr
            or self->kind == AstExpressionKind::PostIncr
            or self->kind == AstExpressionKind::PostDecr
        )


# [foo, bar, baz]
class AstArray:
    length: int
    items: AstExpression*

    def free(self) -> None:
        for i = 0; i < self->length; i++:
            self->items[i].free()
        free(self->items)


# foo as bar
class AstAs:
    value: AstExpression
    type: AstType

    def print(self) -> None:
        self->print_with_tree_printer(TreePrinter{})

    def print_with_tree_printer(self, tp: TreePrinter) -> None:
        printf("as ")
        self->type.print(True)
        printf("\n")
        self->value.print_with_tree_printer(tp.print_prefix(True))

    def free(self) -> None:
        self->value.free()
        self->type.free()


# foo(arg1, arg2, arg3)
# foo.bar(arg1, arg2, arg3)
# foo->bar(arg1, arg2, arg3)
class AstCall:
    location: Location
    name: byte[100]  # name of function or method
    method_call_self: AstExpression*  # NULL for function calls, the foo of foo.bar() for method calls
    uses_arrow_operator: bool  # distinguishes foo->bar() and foo.bar()
    nargs: int
    args: AstExpression*

    def print(self) -> None:
        self->print_with_tree_printer(TreePrinter{})

    def print_with_tree_printer(self, tp: TreePrinter) -> None:
        printf("call %s \"%s\"", self->function_or_method(), self->name)
        if self->uses_arrow_operator:
            printf(" with the arrow operator")
        printf("\n")

        if self->method_call_self != NULL:
            sub = tp.print_prefix(self->nargs == 0)
            printf("self: ")
            self->method_call_self->print_with_tree_printer(sub)

        for i = 0; i < self->nargs; i++:
            sub = tp.print_prefix(i == self->nargs - 1)
            printf("argument %d: ", i)
            self->args[i].print_with_tree_printer(sub)

    def free(self) -> None:
        for i = 0; i < self->nargs; i++:
            self->args[i].free()
        free(self->args)

    # Useful for formatting error messages, but not much else.
    # TODO: use this
    def function_or_method(self) -> byte*:
        if self->method_call_self == NULL:
            return "function"
        else:
            return "method"


# assert foo
class AstAssertion:
    condition: AstExpression
    condition_str: byte*


enum AstStatementKind:
    ExpressionStatement  # Evaluate an expression. Discard the result.
    Assert
    Pass
    Return
    If
    WhileLoop
    ForLoop
    Break
    Continue
    DeclareLocalVar # x: SomeType = y (the "= y" is optional)
    Assign          # x = y
    InPlaceAdd      # x += y
    InPlaceSub      # x -= y
    InPlaceMul      # x *= y
    InPlaceDiv      # x /= y
    InPlaceMod      # x %= y
    Function
    Class
    Enum
    GlobalVariableDeclaration
    GlobalVariableDefinition

class AstStatement:
    location: Location
    kind: AstStatementKind

    union:
        expression: AstExpression       # ExpressionStatement, Assert
        if_statement: AstIfStatement
        while_loop: AstConditionAndBody
        for_loop: AstForLoop
        return_value: AstExpression*     # can be NULL
        assignment: AstAssignment
        var_declaration: AstNameTypeValue  # DeclareLocalVar
        function: AstFunctionOrMethod
        classdef: AstClassDef
        enumdef: AstEnumDef
        assertion: AstAssertion

    def print(self) -> None:
        self->print_with_tree_printer(TreePrinter{})

    def print_with_tree_printer(self, tp: TreePrinter) -> None:
        printf("[line %d] ", self->location.lineno)
        if self->kind == AstStatementKind::ExpressionStatement:
            printf("expression statement\n")
            self->expression.print_with_tree_printer(tp.print_prefix(True))
        elif self->kind == AstStatementKind::Assert:
            printf("assert \"%s\"\n", self->assertion.condition_str)
            self->assertion.condition.print_with_tree_printer(tp.print_prefix(True))
        elif self->kind == AstStatementKind::Pass:
            printf("pass\n")
        elif self->kind == AstStatementKind::Return:
            printf("return\n")
            if self->return_value != NULL:
                self->return_value->print_with_tree_printer(tp.print_prefix(True))
        elif self->kind == AstStatementKind::If:
            self->if_statement.print_with_tree_printer(tp)
        elif self->kind == AstStatementKind::ForLoop:
            self->for_loop.print_with_tree_printer(tp)
        elif self->kind == AstStatementKind::WhileLoop:
            printf("while loop\n")
            self->while_loop.print_with_tree_printer(tp, True)
        elif self->kind == AstStatementKind::Break:
            printf("break\n")
        elif self->kind == AstStatementKind::Continue:
            printf("continue\n")
        elif self->kind == AstStatementKind::DeclareLocalVar:
            printf("declare local var ")
            self->var_declaration.print_with_tree_printer(&tp)
        elif self->kind == AstStatementKind::Assign:
            printf("assign\n")
            self->assignment.print_with_tree_printer(tp)
        elif self->kind == AstStatementKind::InPlaceAdd:
            printf("in-place add\n")
            self->assignment.print_with_tree_printer(tp)
        elif self->kind == AstStatementKind::InPlaceSub:
            printf("in-place sub\n")
            self->assignment.print_with_tree_printer(tp)
        elif self->kind == AstStatementKind::InPlaceMul:
            printf("in-place mul\n")
            self->assignment.print_with_tree_printer(tp)
        elif self->kind == AstStatementKind::InPlaceDiv:
            printf("in-place div\n")
            self->assignment.print_with_tree_printer(tp)
        elif self->kind == AstStatementKind::InPlaceMod:
            printf("in-place mod\n")
            self->assignment.print_with_tree_printer(tp)
        elif self->kind == AstStatementKind::Function:
            # TODO: this sucks, see #514
            if self->function.body.nstatements == 0:
                printf("declare a function: ")
            else:
                printf("define a function: ")
            self->function.print_with_tree_printer(tp)
        elif self->kind == AstStatementKind::Class:
            self->classdef.print_with_tree_printer(tp)
        elif self->kind == AstStatementKind::Enum:
            self->enumdef.print_with_tree_printer(tp)
        elif self->kind == AstStatementKind::GlobalVariableDeclaration:
            printf("declare global var ")
            self->var_declaration.print_with_tree_printer(NULL)
            printf("\n")
        elif self->kind == AstStatementKind::GlobalVariableDefinition:
            printf("define global var ")
            self->var_declaration.print_with_tree_printer(NULL)
            printf("\n")
        else:
            printf("??????\n")

    def free(self) -> None:
        if self->kind == AstStatementKind::Enum:
            self->enumdef.free()
        if self->kind == AstStatementKind::ExpressionStatement:
            self->expression.free()
        if self->kind == AstStatementKind::Return and self->return_value != NULL:
            self->return_value->free()
            free(self->return_value)
        if self->kind == AstStatementKind::If:
            self->if_statement.free()
        if self->kind == AstStatementKind::ForLoop:
            self->for_loop.free()
        if self->kind == AstStatementKind::Class:
            self->classdef.free()


# Useful for e.g. "while condition: body", "if condition: body"
class AstConditionAndBody:
    condition: AstExpression
    body: AstBody

    def print(self) -> None:
        self->print_with_tree_printer(TreePrinter{}, True)

    def print_with_tree_printer(self, tp: TreePrinter, body_is_last_sub_item: bool) -> None:
        sub = tp.print_prefix(False)
        printf("condition: ")
        self->condition.print_with_tree_printer(sub)

        sub = tp.print_prefix(body_is_last_sub_item)
        printf("body:\n")
        self->body.print_with_tree_printer(sub)

    def free(self) -> None:
        self->condition.free()
        self->body.free()


# foo = bar
class AstAssignment:
    target: AstExpression
    value: AstExpression

    def print(self) -> None:
        self->print_with_tree_printer(TreePrinter{})

    def print_with_tree_printer(self, tp: TreePrinter) -> None:
        self->target.print_with_tree_printer(tp.print_prefix(False))
        self->value.print_with_tree_printer(tp.print_prefix(True))


# if foo:
#     ...
# elif bar:
#     ...
# elif baz:
#     ...
# else:
#     ...
class AstIfStatement:
    if_and_elifs: AstConditionAndBody*
    n_if_and_elifs: int  # At least 1 (the if statement). The rest, if any, are elifs.
    else_body: AstBody    # Empty if there is no else

    def print(self) -> None:
        self->print_with_tree_printer(TreePrinter{})

    def print_with_tree_printer(self, tp: TreePrinter) -> None:
        printf("if\n")
        for i = 0; i < self->n_if_and_elifs; i++:
            self->if_and_elifs[i].print_with_tree_printer(tp, i == self->n_if_and_elifs - 1 and self->else_body.nstatements == 0)

        if self->else_body.nstatements > 0:
            sub = tp.print_prefix(True)
            printf("else body:\n")
            self->else_body.print_with_tree_printer(sub)

    def free(self) -> None:
        for i = 0; i < self->n_if_and_elifs; i++:
            self->if_and_elifs[i].free()
        free(self->if_and_elifs)
        self->else_body.free()


# for init; cond; incr:
#     ...body...
class AstForLoop:
    # init and incr must be pointers because this goes inside AstStatement.
    init: AstStatement*
    cond: AstExpression
    incr: AstStatement*
    body: AstBody

    def print(self) -> None:
        self->print_with_tree_printer(TreePrinter{})

    def print_with_tree_printer(self, tp: TreePrinter) -> None:
        printf("for loop\n")

        sub = tp.print_prefix(False)
        printf("init: ")
        self->init->print_with_tree_printer(sub)

        sub = tp.print_prefix(False)
        printf("cond: ")
        self->cond.print_with_tree_printer(sub)

        sub = tp.print_prefix(False)
        printf("incr: ")
        self->incr->print_with_tree_printer(sub)

        sub = tp.print_prefix(True)
        printf("body:\n")
        self->body.print_with_tree_printer(sub)

    def free(self) -> None:
        self->init->free()
        free(self->init)
        self->cond.free()
        self->incr->free()
        free(self->incr)
        self->body.free()


# name: type = value
class AstNameTypeValue:
    name: byte[100]
    name_location: Location
    type: AstType
    value: AstExpression*  # can be NULL

    def print(self) -> None:
        tp = TreePrinter{}
        self->print_with_tree_printer(&tp)

    # tp can be set to NULL, in that case no trailing newline is printed
    def print_with_tree_printer(self, tp: TreePrinter*) -> None:
        printf("%s: ", self->name)
        self->type.print(True)
        if tp == NULL:
            assert self->value == NULL
        else:
            printf("\n")
            if self->value != NULL:
                sub = tp->print_prefix(True)
                printf("initial value: ")
                self->value->print_with_tree_printer(sub)

    def free(self) -> None:
        if self->value != NULL:
            self->value->free()
        free(self->value)


# typically multiple indented lines after a ":" at end of line
class AstBody:
    statements: AstStatement*
    nstatements: int

    def print(self) -> None:
        self->print_with_tree_printer(TreePrinter{})

    def print_with_tree_printer(self, tp: TreePrinter) -> None:
        for i = 0; i < self->nstatements; i++:
            self->statements[i].print_with_tree_printer(tp.print_prefix(i == self->nstatements - 1))

    def free(self) -> None:
        for i = 0; i < self->nstatements; i++:
            self->statements[i].free()
        free(self->statements)


# function name and parameters in "def" or "declare"
class AstSignature:
    name_location: Location
    name: byte[100]  # name of function or method, after "def" keyword
    args: AstNameTypeValue*
    nargs: int
    takes_varargs: bool  # True for functions like printf()
    return_type: AstType

    def print(self) -> None:
        printf("%s(", self->name)
        for i = 0; i < self->nargs; i++:
            if i != 0:
                printf(", ")

            if (
                strcmp(self->args[i].name, "self") == 0
                and self->args[i].type.kind == AstTypeKind::Named
                and self->args[i].type.name[0] == '\0'
            ):
                # self with implicitly given type
                printf("self")
            else:
                self->args[i].print_with_tree_printer(NULL)

        if self->takes_varargs:
            if self->nargs != 0:
                printf(", ")
            printf("...")

        printf(") -> ")
        self->return_type.print(True)
        printf("\n")

    def free(self) -> None:
        for i = 0; i < self->nargs; i++:
            self->args[i].free()
        free(self->args)
        self->return_type.free()


# import "./foo.jou"
class AstImport:
    location: Location
    specified_path: byte*  # Path in jou code e.g. "stdlib/io.jou"
    resolved_path: byte*  # Absolute path or relative to current working directory e.g. "/home/akuli/jou/stdlib/io.jou"
    used: bool  # For warning messages

    def print(self) -> None:
        printf(
            "line %d: Import \"%s\", which resolves to \"%s\".\n",
            self->location.lineno, self->specified_path, self->resolved_path,
        )

    def free(self) -> None:
        free(self->specified_path)
        free(self->resolved_path)


# Represents the AST of one Jou file.
class AstFile:
    path: byte*  # not owned
    imports: AstImport*
    nimports: int
    body: AstBody

    def print(self) -> None:
        printf("===== AST for file \"%s\" =====\n", self->path)
        for i = 0; i < self->nimports; i++:
            self->imports[i].print()
        for i = 0; i < self->body.nstatements; i++:
            self->body.statements[i].print()

    def free(self) -> None:
        for i = 0; i < self->nimports; i++:
            self->imports[i].free()
        free(self->imports)
        self->body.free()


# def foo() -> bar:
#     ...
class AstFunctionOrMethod:
    signature: AstSignature
    body: AstBody  # empty body means declaration, otherwise it's a definition

    def print(self) -> None:
        self->print_with_tree_printer(TreePrinter{})

    def print_with_tree_printer(self, tp: TreePrinter) -> None:
        self->signature.print()
        self->body.print_with_tree_printer(tp)

    def free(self) -> None:
        self->signature.free()
        self->body.free()


# union:
#     foo: type1
#     bar: type2
class AstUnionFields:
    fields: AstNameTypeValue*
    nfields: int

    def print(self) -> None:
        self->print_with_tree_printer(TreePrinter{})

    def print_with_tree_printer(self, tp: TreePrinter) -> None:
        for i = 0; i < self->nfields; i++:
            subprinter = tp.print_prefix(i == self->nfields-1)
            self->fields[i].print_with_tree_printer(&subprinter)  # TODO: does this need to be optional/pointer?

    def free(self) -> None:
        for i = 0; i < self->nfields; i++:
            self->fields[i].free()
        free(self->fields)


enum AstClassMemberKind:
    Field
    Union
    Method

# Anything that goes inside "class"
class AstClassMember:
    kind: AstClassMemberKind
    union:
        field: AstNameTypeValue
        union_fields: AstUnionFields
        method: AstFunctionOrMethod

    def print(self, tp: TreePrinter) -> None:
        if self->kind == AstClassMemberKind::Field:
            printf("field ")
            self->field.print_with_tree_printer(NULL)
            printf("\n")
        elif self->kind == AstClassMemberKind::Union:
            printf("union:\n")
            self->union_fields.print_with_tree_printer(tp)
        elif self->kind == AstClassMemberKind::Method:
            printf("method ")
            self->method.signature.print()
            self->method.body.print_with_tree_printer(tp)
        else:
            assert False

    def free(self) -> None:
        if self->kind == AstClassMemberKind::Field:
            self->field.free()
        elif self->kind == AstClassMemberKind::Union:
            self->union_fields.free()
        elif self->kind == AstClassMemberKind::Method:
            self->method.free()
        else:
            assert False


# class Foo:
#     ...members...
class AstClassDef:
    name: byte[100]
    name_location: Location
    members: AstClassMember*
    nmembers: int

    def print(self) -> None:
        self->print_with_tree_printer(TreePrinter{})

    def print_with_tree_printer(self, tp: TreePrinter) -> None:
        printf("class \"%s\" with %d members\n", self->name, self->nmembers)
        for i = 0; i < self->nmembers; i++:
            self->members[i].print(tp.print_prefix(i == self->nmembers-1))

    def free(self) -> None:
        for i = 0; i < self->nmembers; i++:
            self->members[i].free()
        free(self->members)


# enum Foo:
#     Member1
#     Member2
#     Member3
class AstEnumDef:
    name: byte[100]
    name_location: Location
    member_count: int
    member_names: byte[100]*

    def print(self) -> None:
        self->print_with_tree_printer(TreePrinter{})

    def print_with_tree_printer(self, tp: TreePrinter) -> None:
        printf("enum \"%s\" with %d members\n", self->name, self->member_count)
        for i = 0; i < self->member_count; i++:
            tp.print_prefix(i == self->member_count-1)
            puts(self->member_names[i])

    def free(self) -> None:
        free(self->member_names)
