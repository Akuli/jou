# This file defines data structures of the Abstract Syntax Tree. They are
# constructed in parser.jou.
#
# Many classes in this file have .print(), which can be used during debugging. If
# .print() exists, you probably don't need to call .print_with_tree_printer(),
# which is basically an internal detail of the .print() implementation.

import "stdlib/io.jou"
import "stdlib/list.jou"
import "stdlib/str.jou"
import "stdlib/mem.jou"

import "./errors_and_warnings.jou"
import "./constants.jou"
import "./types.jou"
import "./types_in_ast.jou"


@public
enum AstTypeKind:
    Named
    Pointer
    Array
    Generic  # e.g. List[int]


@public
class AstArrayType:
    member_type: AstType*
    length: AstExpression*

    def free(self) -> None:
        self->member_type->free()
        self->length->free()
        free(self->member_type)
        free(self->length)


# e.g. List[int]
@public
class AstGenericType:
    class_name: byte[100]  # e.g. "List"
    param_types: List[AstType]


@public
class AstType:
    kind: AstTypeKind
    location: Location

    union:
        name: byte[100]         # AstTypeKind.Named
        value_type: AstType*    # AstTypeKind.Pointer
        array: AstArrayType     # AstTypeKind.Array
        generic: AstGenericType # AstTypeKind.Generic

    def is_void(self) -> bool:
        return self->kind == AstTypeKind.Named and strcmp(self->name, "void") == 0

    def is_none(self) -> bool:
        return self->kind == AstTypeKind.Named and strcmp(self->name, "None") == 0

    def is_noreturn(self) -> bool:
        return self->kind == AstTypeKind.Named and strcmp(self->name, "noreturn") == 0

    def print(self, show_lineno: bool) -> None:
        match self->kind:
            case AstTypeKind.Named:
                printf("%s", self->name)
            case AstTypeKind.Pointer:
                self->value_type->print(False)
                printf("*")
            case AstTypeKind.Array:
                self->array.member_type->print(False)
                printf("[<size>]")  # TODO: show the size expression better?
            case AstTypeKind.Generic:
                printf("%s[", self->generic.class_name)
                for i = 0; i < self->generic.param_types.len; i++:
                    if i != 0:
                        printf(", ")
                    self->generic.param_types.ptr[i].print(False)
                printf("]")

        if show_lineno:
            printf(" [line %d]", self->location.lineno)

    def free(self) -> None:
        match self->kind:
            case AstTypeKind.Pointer:
                self->value_type->free()
                free(self->value_type)
            case AstTypeKind.Array:
                self->array.free()
            case AstTypeKind.Named:
                pass
            case AstTypeKind.Generic:
                for p = self->generic.param_types.ptr; p < self->generic.param_types.end(); p++:
                    p->free()
                free(self->generic.param_types.ptr)


# Statements and expressions can be printed in a tree.
# To see a tree, run:
#
#   $ jou --parse-only examples/hello.jou
#
class TreePrinter:
    prefix: byte[100]

    # Returned subprinter can be used to print elements "inside" the current line.
    def print_prefix(self, is_last_child: bool) -> TreePrinter:
        subprinter = TreePrinter{}
        if is_last_child:
            printf("%s`--- ", self->prefix)
            snprintf(subprinter.prefix, sizeof subprinter.prefix, "%s  ", self->prefix)
        else:
            printf("%s|--- ", self->prefix)
            snprintf(subprinter.prefix, sizeof subprinter.prefix, "%s| ", self->prefix)
        return subprinter


# Foo.Bar where Foo is an enum
@public
class AstEnumMember:
    enum_name: byte[100]
    member_name: byte[100]


# foo.bar, foo->bar
@public
class AstClassField:
    instance: AstExpression*
    uses_arrow_operator: bool  # distinguishes foo.bar and foo->bar
    field_name: byte[100]

    def free(self) -> None:
        self->instance->free()
        free(self->instance)


@public
class AstInstantiationField:
    name: byte[100]
    value: AstExpression


# Foo{bar = 1, baz = 2}
@public
class AstInstantiation:
    type: AstType
    fields: List[AstInstantiationField]

    def print(self) -> None:
        self->print_with_tree_printer(TreePrinter{})

    def print_with_tree_printer(self, tp: TreePrinter) -> None:
        printf("instantiate ")
        self->type.print(False)
        printf("\n")

        for f = self->fields.ptr; f < self->fields.end(); f++:
            sub = tp.print_prefix(f == &self->fields.end()[-1])
            printf("field \"%s\": ", f->name)
            f->value.print_with_tree_printer(sub)

    def free(self) -> None:
        self->type.free()
        for f = self->fields.ptr; f < self->fields.end(); f++:
            f->value.free()
        free(self->fields.ptr)


@public
enum AstExpressionKind:
    Constant    # e.g. int literals, also accessing `const` values becomes this during type checking
    Array
    Call  # function call or method call
    Instantiate   # MyClass{x=1, y=2}
    Self    # not a variable lookup, so you can't use 'self' as variable name outside a class
    GetVariable
    GetEnumMember
    GetClassField   # foo.bar, foo->bar
    As
    # unary operators
    SizeOf      # sizeof x
    AddressOf   # &x
    Dereference # *x
    Negate      # -x
    Not         # not x
    PreIncr     # ++x
    PostIncr    # x++
    PreDecr     # --x
    PostDecr    # x--
    # binary operators
    Add         # x+y
    Sub         # x-y
    Mul         # x*y
    Div         # x/y
    Indexing    # x[y]
    Mod         # x % y
    Eq          # x == y
    Ne          # x != y
    Gt          # x > y
    Lt          # x < y
    Ge          # x >= y
    Le          # x <= y
    And         # x and y
    Or          # x or y

@public
class AstExpression:
    location: Location
    kind: AstExpressionKind
    types: ExpressionTypes  # populated in typecheck, zero-initialized before typecheck runs

    union:
        enum_member: AstEnumMember
        class_field: AstClassField
        call: AstCall
        instantiation: AstInstantiation
        as_: AstAs*  # Must be pointer, because it contains an AstExpression
        array: List[AstExpression]
        varname: byte[100]
        float_or_double_text: byte[100]
        operands: AstExpression*  # Only for operators. Length is arity, see get_arity()
        constant: Constant

    def print(self) -> None:
        self->print_with_tree_printer(TreePrinter{})

    def print_with_tree_printer(self, tp: TreePrinter) -> None:
        printf("[line %d", self->location.lineno)
        if self->types.orig_type != NULL:
            printf(", type %s", self->types.orig_type->name)
            # TODO: print casts and other stuff under self->types?
        printf("] ")

        match self->kind:
            case AstExpressionKind.Constant:
                printf("constant: ")
                self->constant.print()
            case AstExpressionKind.Indexing:
                printf("indexing\n")
            case AstExpressionKind.Array:
                printf("array\n")
                for i = 0; i < self->array.len; i++:
                    self->array.ptr[i].print_with_tree_printer(tp.print_prefix(i == self->array.len-1))
            case AstExpressionKind.Call:
                self->call.print_with_tree_printer(tp)
            case AstExpressionKind.Instantiate:
                self->instantiation.print_with_tree_printer(tp)
            case AstExpressionKind.Self:
                printf("self\n")
            case AstExpressionKind.GetVariable:
                printf("get variable \"%s\"\n", self->varname)
            case AstExpressionKind.GetEnumMember:
                printf(
                    "get member \"%s\" from enum \"%s\"\n",
                    self->enum_member.member_name,
                    self->enum_member.enum_name,
                )
            case AstExpressionKind.GetClassField:
                printf("get class field \"%s\"", self->class_field.field_name)
                if self->class_field.uses_arrow_operator:
                    printf(" with the arrow operator")
                printf("\n")
                self->class_field.instance->print_with_tree_printer(tp.print_prefix(True))
            case AstExpressionKind.As:
                self->as_->print_with_tree_printer(tp)
            case AstExpressionKind.SizeOf:
                printf("sizeof\n")
            case AstExpressionKind.AddressOf:
                printf("address of\n")
            case AstExpressionKind.Dereference:
                printf("dereference\n")
            case AstExpressionKind.Negate:
                printf("negate\n")
            case AstExpressionKind.Not:
                printf("not\n")
            case AstExpressionKind.PreIncr:
                printf("pre-increment\n")
            case AstExpressionKind.PostIncr:
                printf("post-increment\n")
            case AstExpressionKind.PreDecr:
                printf("pre-decrement\n")
            case AstExpressionKind.PostDecr:
                printf("post-decrement\n")
            case AstExpressionKind.Add:
                printf("add\n")
            case AstExpressionKind.Sub:
                printf("sub\n")
            case AstExpressionKind.Mul:
                printf("mul\n")
            case AstExpressionKind.Div:
                printf("div\n")
            case AstExpressionKind.Mod:
                printf("mod\n")
            case AstExpressionKind.Eq:
                printf("eq\n")
            case AstExpressionKind.Ne:
                printf("ne\n")
            case AstExpressionKind.Gt:
                printf("gt\n")
            case AstExpressionKind.Ge:
                printf("ge\n")
            case AstExpressionKind.Lt:
                printf("lt\n")
            case AstExpressionKind.Le:
                printf("le\n")
            case AstExpressionKind.And:
                printf("and\n")
            case AstExpressionKind.Or:
                printf("or\n")

        for i = 0; i < self->get_arity(); i++:
            self->operands[i].print_with_tree_printer(tp.print_prefix(i == self->get_arity()-1))

    def free(self) -> None:
        match self->kind:
            case AstExpressionKind.Constant:
                self->constant.free()
            case AstExpressionKind.Array:
                for p = self->array.ptr; p < self->array.end(); p++:
                    p->free()
                free(self->array.ptr)
            case AstExpressionKind.Call:
                self->call.free()
            case AstExpressionKind.Instantiate:
                self->instantiation.free()
            case AstExpressionKind.GetClassField:
                self->class_field.free()
            case AstExpressionKind.As:
                self->as_->free()
                free(self->as_)
            case _:
                if self->get_arity() != 0:
                    for i = 0; i < self->get_arity(); i++:
                        self->operands[i].free()
                    free(self->operands)

    # arity = number of operands, e.g. 2 for a binary operator such as "+"
    def get_arity(self) -> int:
        match self->kind:
            case (
                AstExpressionKind.SizeOf
                | AstExpressionKind.AddressOf
                | AstExpressionKind.Dereference
                | AstExpressionKind.Negate
                | AstExpressionKind.Not
                | AstExpressionKind.PreIncr
                | AstExpressionKind.PreDecr
                | AstExpressionKind.PostIncr
                | AstExpressionKind.PostDecr
            ):
                return 1
            case (
                AstExpressionKind.Add
                | AstExpressionKind.Sub
                | AstExpressionKind.Mul
                | AstExpressionKind.Div
                | AstExpressionKind.Indexing
                | AstExpressionKind.Mod
                | AstExpressionKind.Eq
                | AstExpressionKind.Ne
                | AstExpressionKind.Gt
                | AstExpressionKind.Lt
                | AstExpressionKind.Ge
                | AstExpressionKind.Le
                | AstExpressionKind.And
                | AstExpressionKind.Or
            ):
                return 2
            case _:
                return 0

    def is_valid_as_a_statement(self) -> bool:
        return (
            self->kind == AstExpressionKind.Call
            or self->kind == AstExpressionKind.PreIncr
            or self->kind == AstExpressionKind.PreDecr
            or self->kind == AstExpressionKind.PostIncr
            or self->kind == AstExpressionKind.PostDecr
        )


# foo as bar
@public
class AstAs:
    value: AstExpression
    type: AstType

    def print(self) -> None:
        self->print_with_tree_printer(TreePrinter{})

    def print_with_tree_printer(self, tp: TreePrinter) -> None:
        printf("as ")
        self->type.print(True)
        printf("\n")
        self->value.print_with_tree_printer(tp.print_prefix(True))

    def free(self) -> None:
        self->value.free()
        self->type.free()


# foo(arg1, arg2, arg3)
# foo.bar(arg1, arg2, arg3)
# foo->bar(arg1, arg2, arg3)
@public
class AstCall:
    location: Location
    name: byte[100]  # name of function or method
    method_call_self: AstExpression*  # NULL for function calls, the foo of foo.bar() for method calls
    uses_arrow_operator: bool  # distinguishes foo->bar() and foo.bar()
    args: List[AstExpression]
    called_signature: Signature*  # populated in typecheck, NULL before typecheck runs, not owned

    def print(self) -> None:
        self->print_with_tree_printer(TreePrinter{})

    def print_with_tree_printer(self, tp: TreePrinter) -> None:
        printf("call %s \"%s\"", self->function_or_method(), self->name)
        if self->uses_arrow_operator:
            printf(" with the arrow operator")
        printf("\n")

        if self->method_call_self != NULL:
            sub = tp.print_prefix(self->args.len == 0)
            printf("self: ")
            self->method_call_self->print_with_tree_printer(sub)

        for i = 0; i < self->args.len; i++:
            sub = tp.print_prefix(i == self->args.len - 1)
            printf("argument %d: ", i)
            self->args.ptr[i].print_with_tree_printer(sub)

    def free(self) -> None:
        for p = self->args.ptr; p < self->args.end(); p++:
            p->free()
        free(self->args.ptr)
        if self->method_call_self != NULL:
            self->method_call_self->free()
            free(self->method_call_self)

    # Useful for formatting error messages, but not much else.
    def function_or_method(self) -> byte*:
        if self->method_call_self == NULL:
            return "function"
        else:
            return "method"


# assert foo
@public
class AstAssertion:
    condition: AstExpression
    condition_str: byte*

    def free(self) -> None:
        self->condition.free()
        free(self->condition_str)


# const name: type = value
@public
class AstConstStatement:
    name: byte[100]
    type: AstType
    value: AstExpression

    public: bool  # is it decorated with @public
    used: bool  # used to detect unused constants

    def print(self) -> None:
        printf("%s: ", self->name)
        self->type.print(True)
        printf("\n")

        tp = TreePrinter{}
        sub = tp.print_prefix(True)
        printf("value: ")
        self->value.print_with_tree_printer(sub)

    def free(self) -> None:
        self->type.free()
        self->value.free()


@public
enum AstStatementKind:
    Import
    Link
    ExpressionStatement  # Evaluate an expression. Discard the result.
    Assert
    Pass
    Return
    If
    Match
    WhileLoop
    ForLoop
    Break
    Continue
    DeclareLocalVar # x: SomeType = y (the "= y" is optional)
    ClassField      # x: SomeType (inside a class)
    ClassUnion      # "union:" followed by indented fields inside a class
    Assign          # x = y
    InPlaceAdd      # x += y
    InPlaceSub      # x -= y
    InPlaceMul      # x *= y
    InPlaceDiv      # x /= y
    InPlaceMod      # x %= y
    FunctionDeclare
    FunctionDef
    MethodDef
    Class
    Enum
    GlobalVariableDeclare
    GlobalVariableDef
    Const           # const x: SomeType = y

@public
class AstStatement:
    location: Location
    kind: AstStatementKind

    union:
        expression: AstExpression       # ExpressionStatement
        if_statement: AstIfStatement
        while_loop: AstConditionAndBody
        for_loop: AstForLoop
        return_value: AstExpression*        # can be NULL
        assignment: AstAssignment           # also used for +=, -= etc
        local_var_declare: AstNameTypeValue # DeclareLocalVar
        global_var_declare: AstGlobalVarDeclare  # GlobalVariableDeclare
        global_var_def: AstGlobalVarDef     # GlobalVariableDef
        class_field: AstNameTypeValue       # ClassField
        union_fields: AstUnionFields        # ClassUnion
        function: AstFunctionOrMethod
        method: AstFunctionOrMethod
        classdef: AstClassDef
        enumdef: AstEnumDef
        assertion: AstAssertion
        match_statement: AstMatchStatement
        import_statement: AstImport
        link_statement: AstLink
        const_statement: AstConstStatement

    def print(self) -> None:
        self->print_with_tree_printer(TreePrinter{})

    def print_with_tree_printer(self, tp: TreePrinter) -> None:
        printf("[line %d] ", self->location.lineno)
        match self->kind:
            case AstStatementKind.ExpressionStatement:
                printf("expression statement\n")
                self->expression.print_with_tree_printer(tp.print_prefix(True))
            case AstStatementKind.Link:
                self->link_statement.print()
            case AstStatementKind.Assert:
                printf("assert \"%s\"\n", self->assertion.condition_str)
                self->assertion.condition.print_with_tree_printer(tp.print_prefix(True))
            case AstStatementKind.Pass:
                printf("pass\n")
            case AstStatementKind.Return:
                printf("return\n")
                if self->return_value != NULL:
                    self->return_value->print_with_tree_printer(tp.print_prefix(True))
            case AstStatementKind.If:
                self->if_statement.print_with_tree_printer(tp)
            case AstStatementKind.ForLoop:
                self->for_loop.print_with_tree_printer(tp)
            case AstStatementKind.Match:
                self->match_statement.print_with_tree_printer(tp)
            case AstStatementKind.WhileLoop:
                printf("while loop\n")
                self->while_loop.print_with_tree_printer(tp, True)
            case AstStatementKind.Break:
                printf("break\n")
            case AstStatementKind.Continue:
                printf("continue\n")
            case AstStatementKind.DeclareLocalVar:
                printf("declare local var ")
                self->local_var_declare.print_with_tree_printer(&tp)
            case AstStatementKind.Assign:
                printf("assign\n")
                self->assignment.print_with_tree_printer(tp)
            case AstStatementKind.InPlaceAdd:
                printf("in-place add\n")
                self->assignment.print_with_tree_printer(tp)
            case AstStatementKind.InPlaceSub:
                printf("in-place sub\n")
                self->assignment.print_with_tree_printer(tp)
            case AstStatementKind.InPlaceMul:
                printf("in-place mul\n")
                self->assignment.print_with_tree_printer(tp)
            case AstStatementKind.InPlaceDiv:
                printf("in-place div\n")
                self->assignment.print_with_tree_printer(tp)
            case AstStatementKind.InPlaceMod:
                printf("in-place mod\n")
                self->assignment.print_with_tree_printer(tp)
            case AstStatementKind.FunctionDeclare:
                printf("declare a function: ")
                self->function.print_with_tree_printer(tp)
            case AstStatementKind.FunctionDef:
                printf("define a function: ")
                self->function.print_with_tree_printer(tp)
            case AstStatementKind.MethodDef:
                printf("define a method: ")
                self->method.print_with_tree_printer(tp)
            case AstStatementKind.Class:
                self->classdef.print_with_tree_printer(tp)
            case AstStatementKind.Enum:
                self->enumdef.print_with_tree_printer(tp)
            case AstStatementKind.GlobalVariableDeclare:
                printf("declare global var ")
                self->global_var_declare.print()
                printf("\n")
            case AstStatementKind.GlobalVariableDef:
                printf("define global var ")
                self->global_var_def.print()
                printf("\n")
            case AstStatementKind.Import:
                self->import_statement.print()
            case AstStatementKind.ClassField:
                printf("class field ")
                self->class_field.print_with_tree_printer(NULL)
                printf("\n")
            case AstStatementKind.ClassUnion:
                printf("union\n")
                self->union_fields.print_with_tree_printer(tp)
            case AstStatementKind.Const:
                printf("const statement ")
                self->const_statement.print()

    def free(self) -> None:
        match self->kind:
            case AstStatementKind.ExpressionStatement | AstStatementKind.Link:
                self->expression.free()
            case AstStatementKind.Assert:
                self->assertion.free()
            case AstStatementKind.Return:
                if self->return_value != NULL:
                    self->return_value->free()
                    free(self->return_value)
            case AstStatementKind.If:
                self->if_statement.free()
            case AstStatementKind.WhileLoop:
                self->while_loop.free()
            case AstStatementKind.ForLoop:
                self->for_loop.free()
            case AstStatementKind.Match:
                self->match_statement.free()
            case AstStatementKind.DeclareLocalVar:
                self->local_var_declare.free()
            case AstStatementKind.GlobalVariableDeclare:
                self->global_var_declare.free()
            case AstStatementKind.GlobalVariableDef:
                self->global_var_def.free()
            case AstStatementKind.ClassField:
                self->class_field.free()
            case (
                AstStatementKind.Assign
                | AstStatementKind.InPlaceAdd
                | AstStatementKind.InPlaceSub
                | AstStatementKind.InPlaceMul
                | AstStatementKind.InPlaceDiv
                | AstStatementKind.InPlaceMod
            ):
                self->assignment.free()
            case AstStatementKind.FunctionDeclare | AstStatementKind.FunctionDef:
                self->function.free()
            case AstStatementKind.MethodDef:
                self->method.free()
            case AstStatementKind.Class:
                self->classdef.free()
            case AstStatementKind.Enum:
                self->enumdef.free()
            case AstStatementKind.Import:
                self->import_statement.free()
            case AstStatementKind.ClassUnion:
                self->union_fields.free()
            case AstStatementKind.Const:
                self->const_statement.free()
            case AstStatementKind.Pass | AstStatementKind.Break | AstStatementKind.Continue:
                pass


# Useful for e.g. "while condition: body", "if condition: body"
@public
class AstConditionAndBody:
    condition: AstExpression
    body: List[AstStatement]

    def print(self) -> None:
        self->print_with_tree_printer(TreePrinter{}, True)

    def print_with_tree_printer(self, tp: TreePrinter, body_is_last_sub_item: bool) -> None:
        sub = tp.print_prefix(False)
        printf("condition: ")
        self->condition.print_with_tree_printer(sub)

        sub = tp.print_prefix(body_is_last_sub_item)
        printf("body:\n")
        print_body(self->body, sub)

    def free(self) -> None:
        self->condition.free()
        free_body(self->body)


# foo = bar
@public
class AstAssignment:
    target: AstExpression
    value: AstExpression

    def print(self) -> None:
        self->print_with_tree_printer(TreePrinter{})

    def print_with_tree_printer(self, tp: TreePrinter) -> None:
        self->target.print_with_tree_printer(tp.print_prefix(False))
        self->value.print_with_tree_printer(tp.print_prefix(True))

    def free(self) -> None:
        self->target.free()
        self->value.free()


# if foo:
#     ...
# elif bar:
#     ...
# elif baz:
#     ...
# else:
#     ...
@public
class AstIfStatement:
    if_and_elifs: List[AstConditionAndBody]  # At least 1 (the if statement). The rest, if any, are elifs.
    else_body: List[AstStatement]    # Empty if there is no else

    def print(self) -> None:
        self->print_with_tree_printer(TreePrinter{})

    def print_with_tree_printer(self, tp: TreePrinter) -> None:
        printf("if\n")
        for i = 0; i < self->if_and_elifs.len; i++:
            self->if_and_elifs.ptr[i].print_with_tree_printer(tp, i == self->if_and_elifs.len - 1 and self->else_body.len == 0)

        if self->else_body.len > 0:
            sub = tp.print_prefix(True)
            printf("else body:\n")
            print_body(self->else_body, sub)

    def free(self) -> None:
        for p = self->if_and_elifs.ptr; p < self->if_and_elifs.end(); p++:
            p->free()
        free(self->if_and_elifs.ptr)
        free_body(self->else_body)


# match match_obj with func:
#     case ...:
#         ...
#     case ...:
#         ...
@public
class AstMatchStatement:
    match_obj: AstExpression
    func_name: byte[100]  # empty if there's no "with foo"
    func_signature: Signature  # populated in typecheck, zero-initialized before typecheck runs
    cases: List[AstCase]
    case_underscore: List[AstStatement]*  # body of "case _" (always last), NULL if no "case _"
    case_underscore_location: Location  # not meaningful if case_underscore == NULL

    def print_with_tree_printer(self, tp: TreePrinter) -> None:
        printf("match\n")
        for p = self->cases.ptr; p < self->cases.end(); p++:
            p->print_with_tree_printer(tp, p == &self->cases.end()[-1] and self->case_underscore == NULL)

        if self->case_underscore != NULL:
            sub = tp.print_prefix(True)
            printf("[line %d] body of case _:\n", self->case_underscore_location.lineno)
            print_body(*self->case_underscore, sub)

    def free(self) -> None:
        self->match_obj.free()
        if self->func_signature.name[0] != '\0':
            self->func_signature.free()
        for p = self->cases.ptr; p < self->cases.end(); p++:
            p->free()
        free(self->cases.ptr)
        if self->case_underscore != NULL:
            free_body(*self->case_underscore)
            free(self->case_underscore)


# case case_obj1 | case_obj2 | case_obj3:
#     body
@public
class AstCase:
    case_objs: List[AstExpression]
    body: List[AstStatement]

    def print_with_tree_printer(self, tp: TreePrinter, is_last_case: bool) -> None:
        for p = self->case_objs.ptr; p < self->case_objs.end(); p++:
            sub = tp.print_prefix(False)
            printf("case_obj: ")
            p->print_with_tree_printer(sub)

        sub = tp.print_prefix(is_last_case)
        printf("body:\n")
        print_body(self->body, sub)

    def free(self) -> None:
        for p = self->case_objs.ptr; p < self->case_objs.end(); p++:
            p->free()
        free(self->case_objs.ptr)
        free_body(self->body)


# for init; cond; incr:
#     ...body...
@public
class AstForLoop:
    init: AstStatement*   # may be NULL
    cond: AstExpression*  # may be NULL
    incr: AstStatement*   # may be NULL
    body: List[AstStatement]

    def print(self) -> None:
        self->print_with_tree_printer(TreePrinter{})

    def print_with_tree_printer(self, tp: TreePrinter) -> None:
        printf("for loop\n")

        if self->init != NULL:
            sub = tp.print_prefix(False)
            printf("init: ")
            self->init->print_with_tree_printer(sub)

        if self->cond != NULL:
            sub = tp.print_prefix(False)
            printf("cond: ")
            self->cond->print_with_tree_printer(sub)

        if self->incr != NULL:
            sub = tp.print_prefix(False)
            printf("incr: ")
            self->incr->print_with_tree_printer(sub)

        sub = tp.print_prefix(True)
        printf("body:\n")
        print_body(self->body, sub)

    def free(self) -> None:
        if self->init != NULL:
            self->init->free()
            free(self->init)
        if self->cond != NULL:
            self->cond->free()
            free(self->cond)
        if self->incr != NULL:
            self->incr->free()
            free(self->incr)

        for stmt = self->body.ptr; stmt < self->body.end(); stmt++:
            stmt->free()
        free(self->body.ptr)


# name: type = value
@public
class AstNameTypeValue:
    name: byte[100]
    name_location: Location
    type: AstType
    value: AstExpression*  # can be NULL

    def print(self) -> None:
        tp = TreePrinter{}
        self->print_with_tree_printer(&tp)

    # tp can be set to NULL, in that case no trailing newline is printed
    def print_with_tree_printer(self, tp: TreePrinter*) -> None:
        printf("%s: ", self->name)
        self->type.print(True)
        if tp == NULL:
            assert self->value == NULL
        else:
            printf("\n")
            if self->value != NULL:
                sub = tp->print_prefix(True)
                printf("initial value: ")
                self->value->print_with_tree_printer(sub)

    def free(self) -> None:
        self->type.free()
        if self->value != NULL:
            self->value->free()
            free(self->value)


# declare global foo: int
class AstGlobalVarDeclare:
    name: byte[100]
    type: AstType
    public: bool  # is it decorated with @public
    used: bool  # used to detect unused global variables

    def print(self) -> None:
        printf("%s: ", self->name)
        self->type.print(True)
        printf("\n")

    def free(self) -> None:
        self->type.free()


# global foo: int
# TODO: support specifying an initial value
@public
class AstGlobalVarDef:
    name: byte[100]
    type: AstType
    public: bool  # is it decorated with @public
    used: bool  # used to detect unused global variables

    def print(self) -> None:
        printf("%s: ", self->name)
        self->type.print(True)
        printf("\n")

    def free(self) -> None:
        self->type.free()


# Body is ":" followed by statements, represented with simply List[AstStatement].
# We define a few functions to work with bodies, similarly to methods for most other things.
def print_body(body: List[AstStatement], tp: TreePrinter) -> None:
    for i = 0; i < body.len; i++:
        body.ptr[i].print_with_tree_printer(tp.print_prefix(i == body.len - 1))


def free_body(body: List[AstStatement]) -> None:
    for p = body.ptr; p < body.end(); p++:
        p->free()
    free(body.ptr)


# function name and parameters in "def" or "declare"
@public
class AstSignature:
    name_location: Location
    name: byte[100]  # name of function or method, after "def" keyword
    args: List[AstNameTypeValue]
    takes_varargs: bool  # True for functions like printf()
    return_type: AstType

    def print(self) -> None:
        printf("%s(", self->name)
        for p = self->args.ptr; p < self->args.end(); p++:
            if p > self->args.ptr:
                printf(", ")

            if (
                strcmp(p->name, "self") == 0
                and p->type.kind == AstTypeKind.Named
                and p->type.name[0] == '\0'
            ):
                # self with implicitly given type
                printf("self")
            else:
                p->print_with_tree_printer(NULL)

        if self->takes_varargs:
            if self->args.len != 0:
                printf(", ")
            printf("...")

        printf(") -> ")
        self->return_type.print(True)
        printf("\n")

    def free(self) -> None:
        for p = self->args.ptr; p < self->args.end(); p++:
            p->free()
        free(self->args.ptr)
        self->return_type.free()


# import "./foo.jou"
@public
class AstImport:
    specified_path: byte*  # Path in jou code e.g. "stdlib/io.jou"
    resolved_path: byte*  # Absolute path or relative to current working directory e.g. "/home/akuli/jou/stdlib/io.jou"
    used: bool  # For warning messages

    def print(self) -> None:
        printf(
            "import \"%s\", which resolves to \"%s\"\n",
            self->specified_path, self->resolved_path,
        )

    def free(self) -> None:
        free(self->specified_path)
        free(self->resolved_path)


# link "./foo.a"
@public
class AstLink:
    specified_flags: byte*  # Path in jou code e.g. "../libs/foo.a"
    resolved_flags: byte*  # Contains absolute paths or relative to current working directory e.g. "/home/akuli/jou/libs/foo.a"

    def print(self) -> None:
        printf("link \"%s\" (resolves to \"%s\")\n", self->specified_flags, self->resolved_flags)

    def free(self) -> None:
        free(self->specified_flags)
        free(self->resolved_flags)


# Represents the AST of one Jou file.
@public
class AstFile:
    path: byte*  # not owned
    is_main_file: bool  # is this the file passed in Jou compiler command? False means imported file
    body: List[AstStatement]
    types: FileTypes  # populated in typecheck, zero-initialized before typecheck runs

    def print(self) -> None:
        printf("===== AST for file \"%s\" =====\n", self->path)
        for p = self->body.ptr; p < self->body.end(); p++:
            p->print()

    def free(self) -> None:
        free_body(self->body)
        self->types.free()  # also works if self->types is zero-initialized


# def foo() -> bar:
#     ...
@public
class AstFunctionOrMethod:
    ast_signature: AstSignature
    body: List[AstStatement]
    types: FunctionOrMethodTypes  # populated in typecheck, zero-initialized before typecheck runs
    public: bool  # is it decorated with @public
    used: bool  # used to detect unused functions

    def print(self) -> None:
        self->print_with_tree_printer(TreePrinter{})

    def print_with_tree_printer(self, tp: TreePrinter) -> None:
        self->ast_signature.print()
        print_body(self->body, tp)

    def free(self) -> None:
        self->ast_signature.free()
        free_body(self->body)
        if self->types.signature.name[0] != '\0':
            # type-checking ran, the types are set and they need freeing
            self->types.free()


# union:
#     foo: type1
#     bar: type2
@public
class AstUnionFields:
    fields: AstNameTypeValue*
    nfields: int

    def print(self) -> None:
        self->print_with_tree_printer(TreePrinter{})

    def print_with_tree_printer(self, tp: TreePrinter) -> None:
        for i = 0; i < self->nfields; i++:
            subprinter = tp.print_prefix(i == self->nfields-1)
            self->fields[i].print_with_tree_printer(&subprinter)  # TODO: does this need to be optional/pointer?

    def free(self) -> None:
        for i = 0; i < self->nfields; i++:
            self->fields[i].free()
        free(self->fields)


# class Foo:
#     ...members...
@public
class AstClassDef:
    name: byte[100]
    generic_typevar_names: List[byte[100]]  # the "T1" and "T2" of "class Foo[T1, T2]", empty means not generic
    body: List[AstStatement]
    type: Type*  # populated in typecheck, NULL before typecheck runs
    public: bool  # is it decorated with @public
    used: bool  # used to detect unused classes

    def is_generic(self) -> bool:
        return self->generic_typevar_names.len > 0

    def print(self) -> None:
        self->print_with_tree_printer(TreePrinter{})

    def print_with_tree_printer(self, tp: TreePrinter) -> None:
        printf("class \"%s\"\n", self->name)
        print_body(self->body, tp)

    def free(self) -> None:
        free(self->generic_typevar_names.ptr)
        free_body(self->body)


# enum Foo:
#     Member1
#     Member2
#     Member3
@public
class AstEnumDef:
    name: byte[100]
    name_location: Location
    members: List[byte[100]]
    type: Type*  # populated in typecheck, NULL before typecheck runs
    public: bool  # is it decorated with @public
    used: bool  # used to detect unused enums

    def print(self) -> None:
        self->print_with_tree_printer(TreePrinter{})

    def print_with_tree_printer(self, tp: TreePrinter) -> None:
        printf("enum \"%s\" with %d members\n", self->name, self->members.len)
        for i = 0; i < self->members.len; i++:
            tp.print_prefix(i == self->members.len - 1)
            puts(self->members.ptr[i])

    def free(self) -> None:
        free(self->members.ptr)
