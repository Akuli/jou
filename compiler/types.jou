import "stdlib/mem.jou"
import "stdlib/str.jou"


@public
class ClassField:
    name: byte[100]
    type: Type*
    # If multiple fields have the same union_id, they belong to the same union.
    # It means that only one of the fields can be used at a time.
    union_id: int


class ClassData:
    generic_params: Type**   # this is the "int" part of List[int]
    n_generic_params: int   # 0 means this is not a generic class
    fields: ClassField*
    nfields: int
    methods: Signature*
    nmethods: int

    def substitute_generic_params_to_fields(self, from: Type**, to: Type**, n: int) -> ClassField*:
        if self->nfields == 0:
            return NULL

        result: ClassField* = malloc(sizeof(result[0]) * self->nfields)
        assert result != NULL
        memcpy(result, self->fields, sizeof(result[0]) * self->nfields)
        for f = result; f < &result[self->nfields]; f++:
            f->type = f->type->substitute_generic_params(from, to, n)
        return result

    def substitute_generic_params_to_methods(self, from: Type**, to: Type**, n: int) -> Signature*:
        if self->nmethods == 0:
            return NULL

        result: Signature* = malloc(sizeof(result[0]) * self->nmethods)
        assert result != NULL
        memcpy(result, self->methods, sizeof(result[0]) * self->nmethods)
        for sig = result; sig < &result[self->nmethods]; sig++:
            *sig = sig->copy()
            for argtype = sig->argtypes; argtype < &sig->argtypes[sig->nargs]; argtype++:
                *argtype = (*argtype)->substitute_generic_params(from, to, n)
            if sig->return_type != NULL:
                sig->return_type = sig->return_type->substitute_generic_params(from, to, n)
        return result


class ArrayType:
    item_type: Type*
    len: int


class EnumType:
    count: int
    names: byte[100]*


@public
enum TypeKind:
    SignedInteger
    UnsignedInteger
    Bool
    FloatingPoint  # float or double
    Pointer
    VoidPointer
    Array
    Class
    TypeVar  # the unknown type "T" of "class List[T]"
    Enum


@public
class Type:
    name: byte[500]   # All types have a name for error messages and debugging.
    kind: TypeKind
    union:
        size_in_bits: int  # SignedInteger, UnsignedInteger, FloatingPoint
        value_type: Type*  # Pointer
        classdata: ClassData  # Class
        array: ArrayType  # Array
        enum_members: EnumType

    def is_integer_type(self) -> bool:
        return self->kind == TypeKind.SignedInteger or self->kind == TypeKind.UnsignedInteger

    def is_number_type(self) -> bool:
        return self->is_integer_type() or self->kind == TypeKind.FloatingPoint

    def is_pointer_type(self) -> bool:
        return self->kind == TypeKind.Pointer or self->kind == TypeKind.VoidPointer

    # Returns a type that represents pointer to the original type.
    # Result is cached. Don't worry about freeing it.
    def pointer_type(self) -> Type*:
        info = cast_type_to_typeinfo(self)
        if info->pointer == NULL:
            ptr: TypeInfo* = calloc(1, sizeof *ptr)
            ptr->type = Type{kind=TypeKind.Pointer, value_type=self}
            snprintf(ptr->type.name, sizeof ptr->type.name, "%s*", self->name)
            info->pointer = ptr
        return &info->pointer->type

    # Returns a type that represents array where items are the original type.
    # Result is cached. Don't worry about freeing it.
    def array_type(self, len: int) -> Type*:
        info = cast_type_to_typeinfo(self)

        assert len > 0
        for t = info->related_types; t < &info->related_types[info->n_related_types]; t++:
            if (
                (*t)->type.kind == TypeKind.Array
                and (*t)->type.array.item_type == self
                and (*t)->type.array.len == len
            ):
                return &(*t)->type

        arr: TypeInfo* = calloc(1, sizeof *arr)
        arr->type = Type{kind = TypeKind.Array, array = ArrayType{item_type = self, len = len}}
        snprintf(arr->type.name, sizeof arr->type.name, "%s[%d]", self->name, len)

        info->related_types = realloc(info->related_types, sizeof(info->related_types[0]) * (info->n_related_types + 1))
        assert info->related_types != NULL
        info->related_types[info->n_related_types++] = arr
        return &arr->type

    # This method is used to create List[int] from a generic List[T].
    # The result is cached similarly to arrays.
    def substitute_generic_params(self, from: Type**, to: Type**, n: int) -> Type*:
        for i = 0; i < n; i++:
            assert from[i]->kind == TypeKind.TypeVar

        match self->kind:
            case TypeKind.TypeVar:
                # the T of List[T] becomes the int of List[int]
                for i = 0; i < n; i++:
                    if from[i] == self:
                        return to[i]
                return self

            case TypeKind.Class:
                if self->classdata.n_generic_params == 0:
                    # Do nothing for non-generic classes
                    return self

                n_generic_params = self->classdata.n_generic_params
                generic_params: Type** = malloc(sizeof(generic_params[0]) * n_generic_params)
                assert generic_params != NULL
                for i = 0; i < self->classdata.n_generic_params; i++:
                    generic_params[i] = self->classdata.generic_params[i]->substitute_generic_params(from, to, n)

                # Results are cached in related_types, just like arrays.
                # Before we go further, let's check if the type we want is already cached.
                info = cast_type_to_typeinfo(self)
                for r = info->related_types; r < &info->related_types[info->n_related_types]; r++:
                    t = &(*r)->type
                    if (
                        t->kind == TypeKind.Class
                        and t->classdata.n_generic_params == self->classdata.n_generic_params
                        and memcmp(t->classdata.generic_params, generic_params, sizeof(generic_params[0]) * n_generic_params) == 0
                    ):
                        free(generic_params)
                        return t

                # Cache the incomplete result. This helps avoid infinite recursion when
                # a class contains a pointer to itself. When visiting the pointer, we see
                # the already cached type.
                new_info: TypeInfo* = calloc(1, sizeof(*new_info))
                assert new_info != NULL
                info->related_types = realloc(info->related_types, sizeof(info->related_types[0]) * (info->n_related_types + 1))
                assert info->related_types != NULL
                info->related_types[info->n_related_types++] = new_info
                result = &new_info->type
                *result = *self
                result->name = create_type_name_with_params(self->name, generic_params, n_generic_params)

                # Recursively convert everything inside the class.
                result->classdata.generic_params = generic_params
                result->classdata.fields = self->classdata.substitute_generic_params_to_fields(from, to, n)
                result->classdata.methods = self->classdata.substitute_generic_params_to_methods(from, to, n)
                return result

            case TypeKind.Pointer:
                new_value_type = self->value_type->substitute_generic_params(from, to, n)
                return new_value_type->pointer_type()

            case TypeKind.Array:
                new_item_type = self->array.item_type->substitute_generic_params(from, to, n)
                return new_item_type->array_type(self->array.len)

            case (
                TypeKind.SignedInteger
                | TypeKind.UnsignedInteger
                | TypeKind.FloatingPoint
                | TypeKind.Bool
                | TypeKind.Enum
                | TypeKind.VoidPointer
            ):
                return self

    # Suppose we have a generic class Foo[T]. It may be referenced as Foo[int]
    # before the fields and methods of Foo are populated. In that case, the
    # Foo[int] class will continue to have no methods or fields.
    #
    # This method fixes that. If Foo[int] has been created, its fields and
    # methods are recomputed from the fields and methods of Foo[T].
    def update_fields_and_methods_to_generic_instances(self) -> None:
        assert self->kind == TypeKind.Class
        assert self->classdata.n_generic_params > 0

        from = self->classdata.generic_params
        n = self->classdata.n_generic_params

        info = cast_type_to_typeinfo(self)
        for r = info->related_types; r < &info->related_types[info->n_related_types]; r++:
            t = &(*r)->type
            if t->kind != TypeKind.Class or t->classdata.n_generic_params != n:
                continue

            to = t->classdata.generic_params

            if t->classdata.nfields < self->classdata.nfields:
                free(t->classdata.fields)
                t->classdata.fields = self->classdata.substitute_generic_params_to_fields(from, to, n)
                t->classdata.nfields = self->classdata.nfields

            if t->classdata.nmethods < self->classdata.nmethods:
                for sig = t->classdata.methods; sig < &t->classdata.methods[t->classdata.nmethods]; sig++:
                    sig->free()
                free(t->classdata.methods)
                t->classdata.methods = self->classdata.substitute_generic_params_to_methods(from, to, n)
                t->classdata.nmethods = self->classdata.nmethods

    def short_description(self) -> byte*:
        match self->kind:
            case TypeKind.Class:
                return "a class"
            case TypeKind.Enum:
                return "an enum"
            case TypeKind.Pointer | TypeKind.VoidPointer:
                return "a pointer type"
            case TypeKind.SignedInteger | TypeKind.UnsignedInteger | TypeKind.FloatingPoint:
                return "a number type"
            case TypeKind.Array:
                return "an array type"
            case TypeKind.Bool:
                return "the built-in bool type"
            case TypeKind.TypeVar:
                return "an unknown type"

    def find_class_field(self, name: byte*) -> ClassField*:
        if self->kind != TypeKind.Class:
            return NULL

        for f = self->classdata.fields; f < &self->classdata.fields[self->classdata.nfields]; f++:
            if strcmp(f->name, name) == 0:
                return f
        return NULL

    def find_method(self, name: byte*) -> Signature*:
        if self->kind != TypeKind.Class:
            return NULL

        for sig = self->classdata.methods; sig < &self->classdata.methods[self->classdata.nmethods]; sig++:
            if strcmp(sig->name, name) == 0:
                return sig
        return NULL

    def find_enum_member(self, name: byte*) -> int:
        if self->kind != TypeKind.Enum:
            return -1

        for i = 0; i < self->enum_members.count; i++:
            if strcmp(self->enum_members.names[i], name) == 0:
                return i
        return -1


# The TypeInfo for type T contains the type T* (if it has been used)
# and all array and pointer types with element type T.
class TypeInfo:
    type: Type
    pointer: TypeInfo*
    related_types: TypeInfo**
    n_related_types: long

    def free_related_types(self) -> None:
        if self->pointer != NULL:
            free_type(&self->pointer->type)
        for t = self->related_types; t < &self->related_types[self->n_related_types]; t++:
            assert &(*t)->type != NULL
            free_type(&(*t)->type)
        free(self->related_types)


# You can think of Type as public members and TypeInfo as private members. From
# that point of view, this function gives you access to the privates.
def cast_type_to_typeinfo(t: Type*) -> TypeInfo*:
    info = t as TypeInfo*
    assert t == &info->type  # the 'type' field is first member and has 0 bytes offset
    return info


# Types are cached into global state. This makes a lot of things easier
# because you don't need to copy and free the types everywhere. This is
# important: previously it was a lot of work to find forgotten copies and
# frees with valgrind.
#
# This also simplifies checking whether two types are the same type: you
# can simply use "==" between two "const Type *" pointers.
#
# Class types are a bit different. When you make a class, you get a
# pointer that you must pass to free_type() later. You can still "=="
# compare types, because two different classes with the same members are
# not the same type.
class GlobalTypeState:
    integers: TypeInfo[2][65]  # integers[i][j] = i-bit integer, j=1 for signed, j=0 for unsigned
    boolean: TypeInfo
    doublelele: TypeInfo
    floater: TypeInfo
    voidptr: TypeInfo
    other_types: TypeInfo**
    n_other_types: int

global global_type_state: GlobalTypeState

@public
global boolType: Type*      # bool
@public
global shortType: Type*     # short (16-bit signed)
@public
global intType: Type*       # int (32-bit signed)
@public
global longType: Type*      # long (64-bit signed)
@public
global byteType: Type*      # byte (8-bit unsigned)
@public
global floatType: Type*     # float (32-bit)
@public
global doubleType: Type*    # double (64-bit)
@public
global voidPtrType: Type*   # void*


@public
def init_types() -> None:
    memset(&global_type_state, 0, sizeof(global_type_state))

    boolType = &global_type_state.boolean.type
    shortType = &global_type_state.integers[16][1].type
    intType = &global_type_state.integers[32][1].type
    longType = &global_type_state.integers[64][1].type
    byteType = &global_type_state.integers[8][0].type
    floatType = &global_type_state.floater.type
    doubleType = &global_type_state.doublelele.type
    voidPtrType = &global_type_state.voidptr.type

    global_type_state.boolean.type = Type{name = "bool", kind = TypeKind.Bool }
    global_type_state.voidptr.type = Type{name = "void*", kind = TypeKind.VoidPointer }
    global_type_state.floater.type = Type{name = "float", kind = TypeKind.FloatingPoint, size_in_bits = 32 }
    global_type_state.doublelele.type = Type{name = "double", kind = TypeKind.FloatingPoint, size_in_bits = 64 }

    for size = 8; size <= 64; size *= 2:
        global_type_state.integers[size][0].type.kind = TypeKind.UnsignedInteger
        global_type_state.integers[size][1].type.kind = TypeKind.SignedInteger

        global_type_state.integers[size][0].type.size_in_bits = size
        global_type_state.integers[size][1].type.size_in_bits = size

        sprintf(global_type_state.integers[size][0].type.name, "<%d-bit unsigned integer>", size)
        sprintf(global_type_state.integers[size][1].type.name, "<%d-bit signed integer>", size)

    strcpy(global_type_state.integers[8][0].type.name, "byte")
    strcpy(global_type_state.integers[16][1].type.name, "short")
    strcpy(global_type_state.integers[32][1].type.name, "int")
    strcpy(global_type_state.integers[64][1].type.name, "long")


# Usually you don't need to free a type. This is in a function to make you
# think twice about it.
# TODO: should probably be a method in TypeInfo
def free_type(t: Type*) -> None:
    assert t != NULL
    if t->kind == TypeKind.Class:
        for sig = t->classdata.methods; sig < &t->classdata.methods[t->classdata.nmethods]; sig++:
            sig->free()
        free(t->classdata.generic_params)
        free(t->classdata.fields)
        free(t->classdata.methods)

    cast_type_to_typeinfo(t)->free_related_types()
    free(t)


@public
def free_global_type_state() -> None:
    global_type_state.boolean.free_related_types()
    global_type_state.floater.free_related_types()
    global_type_state.doublelele.free_related_types()
    global_type_state.voidptr.free_related_types()
    for size = 8; size <= 64; size *= 2:
        for is_signed = 0; is_signed <= 1; is_signed++:
            global_type_state.integers[size][is_signed].free_related_types()
    for i = 0; i < global_type_state.n_other_types; i++:
        free_type(&global_type_state.other_types[i]->type)
    free(global_type_state.other_types)


@public
def get_integer_type(size_in_bits: int, is_signed: bool) -> Type*:
    assert size_in_bits==8 or size_in_bits==16 or size_in_bits==32 or size_in_bits==64
    return &global_type_state.integers[size_in_bits][is_signed as int].type


# Ensures that the type is freed when compiler is done. Operating system would
# do it anyway, but communicating this to valgrind is complicated because of
# how pointers and arrays work.
def satisfy_valgrind(ti: TypeInfo*) -> None:
    arr = &global_type_state.other_types
    global_type_state.other_types = realloc(
        global_type_state.other_types,
        sizeof(global_type_state.other_types[0]) * (global_type_state.n_other_types + 1),
    )
    assert global_type_state.other_types != NULL
    global_type_state.other_types[global_type_state.n_other_types++] = ti


def create_simple_type(name: byte*, kind: TypeKind) -> Type*:
    result: TypeInfo* = calloc(1, sizeof *result)
    result->type = Type{kind = kind}

    assert strlen(name) < sizeof result->type.name
    strcpy(result->type.name, name)

    satisfy_valgrind(result)
    return &result->type


# Creates a class with no members. Used for classes before their members are known.
@public
def create_empty_class(name: byte*) -> Type*:
    return create_simple_type(name, TypeKind.Class)


# Used for generics. This creates the unknown type "T" when defining class "List[T]".
@public
def create_typevar(name: byte*) -> Type*:
    return create_simple_type(name, TypeKind.TypeVar)


# TODO: Might be a good idea to copy the given enum member names.
@public
def create_enum(name: byte*, membercount: int, membernames: byte[100]*) -> Type*:
    result: TypeInfo* = calloc(1, sizeof *result)
    result->type = Type{
        kind = TypeKind.Enum,
        enum_members = EnumType{count=membercount, names=membernames},
    }

    assert strlen(name) < sizeof result->type.name
    strcpy(result->type.name, name)

    satisfy_valgrind(result)
    return &result->type


# Returns a string like "ClassName[Param1, Param2, Param3]", e.g. "List[int]"
# If class name already has "[", only the part before "[" is used.
@public
def create_type_name_with_params(class_name: byte*, params: Type**, nparams: int) -> byte[500]:
    class_name_len = strcspn(class_name, "[")

    assert nparams >= 1
    total_len = class_name_len + strlen("[]") + (nparams - 1)*strlen(", ")
    for i = 0; i < nparams; i++:
        total_len += strlen(params[i]->name)

    result: byte[500]
    if total_len < sizeof(result):
        sprintf(result, "%.*s[", class_name_len as int, class_name)
        for i = 0; i < nparams; i++:
            if i != 0:
                strcat(result, ", ")
            strcat(result, params[i]->name)
        strcat(result, "]")
    else:
        snprintf(result, sizeof(result), "%.*s[...]", class_name_len as int, class_name)

    return result


@public
class Signature:
    name: byte[100]  # Function or method name. For methods it does not include the name of the class.
    nargs: int
    argtypes: Type**
    argnames: byte[100]*
    takes_varargs: bool  # true for functions like printf()
    return_type: Type*    # NULL, if does not return a value
    is_noreturn: bool

    def free(self) -> None:
        free(self->argnames)
        free(self->argtypes)

    def get_self_class(self) -> Type*:
        if self->nargs > 0 and strcmp(self->argnames[0], "self") == 0:
            match self->argtypes[0]->kind:
                case TypeKind.Pointer:
                    return self->argtypes[0]->value_type
                case TypeKind.Class:
                    return self->argtypes[0]
                case _:
                    assert False
        return NULL

    def is_main_function(self) -> bool:
        return self->get_self_class() == NULL and strcmp(self->name, "main") == 0

    # Useful for error messages, not much else.
    def function_or_method(self) -> byte*:
        if self->get_self_class() == NULL:
            return "function"
        else:
            return "method"

    def to_string(self, include_return_type: bool, include_self: bool) -> byte*:
        result = strdup(self->name)
        assert result != NULL

        result = realloc(result, strlen(result) + 2)
        assert result != NULL
        strcat(result, "(")

        for i = 0; i < self->nargs; i++:
            if strcmp(self->argnames[i], "self") == 0 and not include_self:
                continue

            assert sizeof self->argnames[i] == 100
            assert sizeof self->argtypes[i]->name == 500
            result = realloc(result, strlen(result) + 1000)
            assert result != NULL
            strcat(result, self->argnames[i])
            strcat(result, ": ")
            strcat(result, self->argtypes[i]->name)
            if i < self->nargs - 1:
                strcat(result, ", ")

        result = realloc(result, strlen(result) + 100)
        assert result != NULL

        if self->takes_varargs:
            if self->nargs != 0:
                strcat(result, ", ")
            strcat(result, "...")
        strcat(result, ")")

        if include_return_type:
            assert sizeof(self->return_type->name) == 500
            result = realloc(result, strlen(result) + 600)
            assert result != NULL

            strcat(result, " -> ")
            if self->is_noreturn:
                strcat(result, "noreturn")
            elif self->return_type == NULL:
                strcat(result, "None")
            else:
                strcat(result, self->return_type->name)

        return result

    def copy(self) -> Signature:
        result = *self

        result.argtypes = malloc(sizeof(result.argtypes[0]) * result.nargs)
        memcpy(result.argtypes, self->argtypes, sizeof(result.argtypes[0]) * result.nargs)

        result.argnames = malloc(sizeof(result.argnames[0]) * result.nargs)
        memcpy(result.argnames, self->argnames, sizeof(result.argnames[0]) * result.nargs)

        return result
