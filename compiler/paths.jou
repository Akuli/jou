import "stdlib/ascii.jou"
import "stdlib/list.jou"
import "stdlib/mem.jou"
import "stdlib/str.jou"
import "stdlib/io.jou"
import "stdlib/process.jou"

import "./command_line_args.jou"
import "./hash.jou"

if WINDOWS:
    declare GetModuleFileNameA(hModule: void*, lpFilename: byte*, nSize: int) -> int
elif MACOS:
    declare _NSGetExecutablePath(buf: byte*, bufsize: int*) -> int
else:
    declare readlink(linkpath: byte*, result: byte*, result_size: long) -> long

if WINDOWS:
    declare _mkdir(path: byte*) -> int
else:
    declare mkdir(path: byte*, mode: int) -> int  # posix

if WINDOWS:
    declare _unlink(path: byte*) -> int
else:
    declare unlink(path: byte*) -> int

@public
declare dirname(path: byte*) -> byte*

if WINDOWS:
    class WIN32_FIND_DATAA:
        # WIN32_FIND_DATAA is 320 bytes. We can't fill in the actual members
        # here because jou adds a lot of padding.
        dummy: byte[320]

    # TODO: this should be a `const`, but that creates compiler error
    def INVALID_HANDLE_VALUE() -> int64:
        return -1

    declare FindFirstFileA(FileName: byte*, FindFileData: WIN32_FIND_DATAA*) -> int64
    declare FindNextFileA(hFindFile: int64, FindFileData: WIN32_FIND_DATAA*) -> int
    declare FindClose(hFindFile: int64) -> int

else:
    class DIR:
        pass
    class dirent:
        pass

    # I ran the following C program to find the offset of d_name in the dirent struct:
    #
    #    #include <dirent.h>
    #    #include <stddef.h>
    #    #include <stdio.h>
    #    int main()
    #    {
    #        printf("%d\n", (int) offsetof(struct dirent, d_name));
    #        return 0;
    #    }
    if NETBSD:
        const DIRENT_NAME_OFFSET: int = 13
    else:
        # Assume linux
        const DIRENT_NAME_OFFSET: int = 19

    if NETBSD:
        # On NetBSD, "opendir" and "readdir" are legacy functions.
        # We can't use them because they generate a linker warning.
        # The dirent.h header magically renames them at compile time to the following names.
        declare __opendir30(name: byte*) -> DIR*
        declare __readdir30(dirp: DIR*) -> dirent*
        def opendir(name: byte*) -> DIR*:
            return __opendir30(name)
        def readdir(dirp: DIR*) -> dirent*:
            return __readdir30(dirp)
    else:
        declare opendir(name: byte*) -> DIR*
        declare readdir(dirp: DIR*) -> dirent*

    declare closedir(dirp: DIR*) -> int


# The listdir() function returns a list of names (not full paths) of everything
# in a given directory, just like os.listdir() in Python. Long names are ignored.
#
# TODO: put this to stdlib instead of here?
def listdir(path: byte*) -> List[byte[100]]:
    result = List[byte[100]]{}

    if WINDOWS:
        find_spec: byte*
        asprintf(&find_spec, "%s\\*", path)  # Find anything

        find_data: WIN32_FIND_DATAA
        handle = FindFirstFileA(path, &find_data)

        # Seems like there's no easy way to distinguish empty directory and error.
        if handle != INVALID_HANDLE_VALUE():
            found_something = True
            while found_something:
                cFileName = &(&find_data as byte*)[44]  # cFileName field is at offset 44
                short_name: byte[100] = ""
                if strlen(cFileName) < sizeof(short_name):
                    strcpy(short_name, cFileName)
                    result.append(short_name)
                found_something = (FindNextFileA(handle, &find_data) != 0)
            FindClose(handle)

    else:
        dir = opendir(path)

        if dir == NULL:
            fprintf(stderr, "error: cannot list directory '%s'\n", path)
            exit(1)

        while True:
            entry = readdir(dir)
            if entry == NULL:
                break

            d_name = &(entry as byte*)[DIRENT_NAME_OFFSET]
            short_name: byte[100] = ""
            if strlen(d_name) < sizeof(short_name):
                strcpy(short_name, d_name)
                result.append(short_name)

        closedir(dir)

    return result


@public
def file_exists(path: byte*) -> bool:
    f = fopen(path, "r")
    if f == NULL:
        return False
    else:
        fclose(f)
        return True


@public
def find_current_executable() -> byte*:
    if MACOS:
        n = 1
        result: byte* = malloc(n)
        ret = _NSGetExecutablePath(result, &n)  # sets n to desired size
        assert ret < 0  # didn't fit
        result = realloc(result, n)
        ret = _NSGetExecutablePath(result, &n)
        if ret == 0:
            # success
            return result

    else:
        buf = NULL
        for size = 2 as long; True; size *= 2:
            buf = realloc(buf, size)
            memset(buf, 0, size)

            if WINDOWS:
                ret = GetModuleFileNameA(NULL, buf, size as int)
            else:
                ret = readlink("/proc/self/exe", buf, size)

            if ret <= 0:
                break  # error
            if ret < size:
                # buffer is big enough, it fits
                return buf

    # TODO: show os error message? (GetLastError / errno)
    fprintf(stderr, "error: cannot locate currently running executable, needed for finding the Jou standard library\n")
    exit(1)


@public
def find_stdlib() -> byte*:
    checked: byte*[3]
    memset(&checked, 0, sizeof checked)

    exedir = find_current_executable()
    while WINDOWS and strstr(exedir, "\\") != NULL:
        *strstr(exedir, "\\") = '/'

    for i = 0; i < sizeof checked / sizeof checked[0]; i++:
        tmp = strdup(dirname(exedir))
        free(exedir)
        exedir = tmp

        if strlen(exedir) <= 3:
            # give up, seems like we reached root of file system (e.g. "C:/" or "/")
            break

        path: byte*
        asprintf(&path, "%s/stdlib", exedir)

        iojou: byte*
        asprintf(&iojou, "%s/io.jou", path)
        exists = file_exists(iojou)
        free(iojou)

        if exists:
            for k = 0; k < i; k++:
                free(checked[k])
            free(exedir)
            return path

        checked[i] = path

    # TODO: test this
    fprintf(stderr, "error: cannot find the Jou standard library in any of the following locations:\n")
    for i = 0; i < sizeof checked / sizeof checked[0] and checked[i] != NULL; i++:
        fprintf(stderr, "  %s\n", checked[i])
    exit(1)


def simple_mkdir(path: byte*) -> None:
    # TODO: check if errno == EEXIST
    # Currently no good way to access EEXIST constant
    if WINDOWS:
        _mkdir(path)
    else:
        mkdir(path, 0o777)  # this is what mkdir in bash does according to strace


def write_gitignore(p: byte*) -> None:
    filename: byte*
    asprintf(&filename, "%s/.gitignore", p)
    if not file_exists(filename):
        # write '*' into gitignore, so that git won't track any compiled files
        f = fopen(filename, "w")
        if f != NULL:
            fprintf(f, "*")
            fclose(f)
    free(filename)


# "/home/akuli/folder/file.jou" --> "file.jou"
def skip_slashes(name: byte*) -> byte*:
    p = strrchr(name, '/')
    if p != NULL:
        p++
        name = p

    p = strrchr(name, '\\')
    if p != NULL:
        p++
        name = p

    return name


# When compiling file foo.jou, we use jou_compiled/foo/ subdirectory.
#
# This is currently needed to avoid race conditions when running multiple files
# at the same time. Feel free to clean this up if you implement locking.
# See also: https://github.com/Akuli/jou/issues/743
def get_path_to_jou_compiled_subfolder() -> byte*:
    # Place jou_compiled into the same directory with the main file we are compiling.
    # No strong reason for doing this. Feel free to change this if it causes problems.
    infile = strdup(command_line_args.infile)
    jou_compiled: byte*
    asprintf(&jou_compiled, "%s/jou_compiled", dirname(infile))
    free(infile)

    simple_mkdir(jou_compiled)
    write_gitignore(jou_compiled)

    name = skip_slashes(command_line_args.infile)
    name_len = strlen(name)
    if name_len > 4 and ends_with(name, ".jou"):
        name_len -= 4

    subfolder: byte*
    asprintf(&subfolder, "%s/%.*s", jou_compiled, name_len as int, name)
    simple_mkdir(subfolder)

    free(jou_compiled)
    return subfolder


# Deletes files in a directory whose name ends with the given suffix.
def delete_by_suffix(dir: byte*, suffix: byte*) -> None:
    list = listdir(dir)

    for p = list.ptr; p < list.end(); p++:
        if ends_with(*p, suffix):
            full_path: byte*
            asprintf(&full_path, "%s/%s", dir, *p)

            if WINDOWS:
                ret = _unlink(full_path)
            else:
                ret = unlink(full_path)

            if ret == 0 and command_line_args.verbosity >= 1:
                printf("Deleted %s\n", full_path)

            free(full_path)

    free(list.ptr)


def get_simple_name(jou_file_path: byte*) -> byte[50]:
    jou_file_path = skip_slashes(jou_file_path)

    result: byte[50]
    memset(result, 0, sizeof(result))
    result_len = 0

    while result_len + 1 < sizeof(result):
        # We have room to add a character

        if jou_file_path[0] == '\0':
            # No more characters to add
            break

        if result_len > 0 and strcmp(jou_file_path, ".jou") == 0:
            # do not add ".jou" suffix
            break

        c = *jou_file_path++
        if c == '.':
            c = '_'
        result[result_len++] = c

    return result


# See doc/lazy-recompile.md for an explaanation of the hashes.
#
# For example, if foo.jou is compiled with -O1 and -O2, this function returns
# different hashes, computed from the pairs ("foo.jou", 1) and ("foo.jou", 2).
# This means we store two compiled versions of foo.jou for the two optimization
# levels, and we always have it ready regardless of which level is used.
def calculate_identifier_hash(jou_file_path: byte*) -> Hash:
    h = new_hash()
    h.add_byte(command_line_args.optlevel as byte)
    h.add_bytes(jou_file_path, strlen(jou_file_path))
    return h


@public
def get_path_to_object_file_in_jou_compiled(jou_file_path: byte*, content_hash: Hash, exists: bool*) -> byte*:
    subfolder = get_path_to_jou_compiled_subfolder()

    simple_name = get_simple_name(jou_file_path)
    file_path_hash = calculate_identifier_hash(jou_file_path)

    # See doc/lazy-recompile.md for an explaanation of the file naming.
    # Example file name: simple_name_0011223344556677_8899aabbccddeeff.o

    assert sizeof(simple_name) == 50
    filename: byte[200]
    sprintf(filename, "%s_%016llx_%016llx.o", simple_name, content_hash.hash, file_path_hash.hash)

    full_path: byte*
    asprintf(&full_path, "%s/%s", subfolder, filename)

    *exists = file_exists(full_path)

    if not *exists:
        # We will create the file. Delete any previously compiled version of the same source file.
        suffix_len = 19  # "_" between hashes, 16 characters for hash, ".o" at end
        suffix = &filename[strlen(filename) - suffix_len]
        delete_by_suffix(subfolder, suffix)

    free(subfolder)
    return full_path


@public
def decide_exe_path() -> byte*:
    if command_line_args.outfile != NULL:
        return strdup(command_line_args.outfile)

    name = skip_slashes(command_line_args.infile)
    name_len = strlen(name)
    if name_len > 4 and ends_with(name, ".jou"):
        name_len -= 4

    if WINDOWS:
        suffix = ".exe"
    else:
        suffix = ""

    subfolder = get_path_to_jou_compiled_subfolder()

    result: byte*
    asprintf(&result, "%s/%.*s%s", subfolder, name_len as int, name, suffix)

    free(subfolder)
    return result


def delete_slice(start: byte*, end: byte*) -> None:
    memmove(start, end, strlen(end) + 1)

# In paths, "foo/../" is usually unnecessary, because it goes to a folder "foo" and then
# immediately back up. However, it makes a difference in a few cases:
#
# 1. folder "foo" doesn't exist
# 2. folder "foo" is a symlink to a different place
# 3. we are actually looking at "../../" (so "foo" is "..")
#
# Special cases 1 and 2 are not relevant in the Jou compiler, but special case 3 is relevant
# when importing from "../../file.jou" (bad style, but should work).
#
# This function deletes one unnecessary "foo/../", and may be called recursively to delete
# all of them.
def simplify_dotdot_once(path: byte*) -> bool:
    assert strstr(path, "\\") == NULL  # should be already taken care of when calling this

    for p = strstr(path, "/../"); p != NULL; p = strstr(&p[1], "/../"):
        end = &p[4]
        start = p
        while start > path and start[-1] != '/':
            start--

        if not starts_with(start, "../"):
            delete_slice(start, end)
            return True

    return False

@public
def simplify_path(path: byte*) -> None:
    if WINDOWS:
        # Backslash to forward slash.
        for p = path; *p != '\0'; p++:
            if *p == '\\':
                *p = '/'

    # Delete "." components.
    while starts_with(path, "./"):
        delete_slice(path, &path[2])

    while True:
        p = strstr(path, "/./")
        if p == NULL:
            break  # TODO: walrus operator  p := strstr(...)
        delete_slice(p, &p[2])

    # Delete unnecessary ".." components.
    while simplify_dotdot_once(path):
        pass


# Insert substring to string, assuming it fits.
def insert(string: byte*, substring: byte*) -> None:
    sublen = strlen(substring)
    memmove(&string[sublen], string, strlen(string) + 1)
    memcpy(string, substring, sublen)


# Rewrites linker flags passed to `link` statements in Jou files so that the
# paths are correct regardless of current working directory.
#
# Examples where the given Jou file is "/home/akuli/folder/file.jou":
#
#   "-L./foo/"  --> "'-L/home/akuli/folder/./foo/'"
#   "-L../foo/"  --> "'-L/home/akuli/folder/../foo/'"
#   "-L../../foo/"  --> "'-L/home/akuli/folder/../../foo/'"
#
# The extra quotes are needed when we are compiling in a folder whose name
# contains spaces.
@public
def handle_relative_paths_in_linker_flags(flags: byte*, jou_file_path: byte*) -> byte*:
    jou_file_path2 = strdup(jou_file_path)
    folder = dirname(jou_file_path2)  # may modify jou_file_path2

    if WINDOWS:
        quote = "\""
    else:
        quote = "'"

    # Allocate enough memory even for the following worst case scenario:
    #   - flags is full of "./", so "./" occurs strlen(flags)/2 times (note floor division)
    #   - for each "./" we add the folder, "/", and a pair of quotes
    #   - add '\0' to terminate the string
    result: byte* = malloc(strlen(flags) + (strlen(flags)/2)*(strlen(folder) + 3) + 1)
    assert result != NULL
    strcpy(result, flags)

    quoting = False

    for p = &result[strlen(result) - 1]; p >= result; p--:
        if is_ascii_whitespace(*p) and quoting:
            # add quote before whatever thing we added that needs quoting
            insert(&p[1], quote)
            quoting = False

        if not starts_with(p, "./") and not starts_with(p, "../"):
            continue

        # If we have "../" do nothing when we see the "./" part
        if p > result and starts_with(&p[-1], "../"):
            continue

        # If we have multiple "../" wait until we get to the first one
        if &p[-3] >= result and starts_with(&p[-3], "../"):
            continue

        if not quoting:
            # add quote after
            q = p
            while *q != '\0' and not is_ascii_whitespace(*q):
                q++
            insert(q, quote)
            quoting = True

        insert(p, "/")
        insert(p, folder)  # goes in front of the "/"

    if quoting:
        insert(result, quote)

    free(jou_file_path2)  # no longer need the folder

    # We may have allocated much more memory than needed for result, shrink it to the right size
    return realloc(result, strlen(result) + 1)
