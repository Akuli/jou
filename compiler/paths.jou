import "stdlib/ascii.jou"
import "stdlib/mem.jou"
import "stdlib/str.jou"
import "stdlib/io.jou"
import "stdlib/process.jou"

import "./command_line_args.jou"

if WINDOWS:
    declare GetModuleFileNameA(hModule: void*, lpFilename: byte*, nSize: int) -> int
elif MACOS:
    declare _NSGetExecutablePath(buf: byte*, bufsize: int*) -> int
else:
    declare readlink(linkpath: byte*, result: byte*, result_size: long) -> long

if WINDOWS:
    declare _mkdir(path: byte*) -> int
else:
    declare mkdir(path: byte*, mode: int) -> int  # posix

@public
declare dirname(path: byte*) -> byte*

declare stat(path: byte*, buf: byte[1000]*) -> int  # lol


@public
def find_current_executable() -> byte*:
    if MACOS:
        n = 1
        result: byte* = malloc(n)
        ret = _NSGetExecutablePath(result, &n)  # sets n to desired size
        assert ret < 0  # didn't fit
        result = realloc(result, n)
        ret = _NSGetExecutablePath(result, &n)
        if ret == 0:
            # success
            return result

    else:
        buf = NULL
        for size = 2L; True; size *= 2:
            buf = realloc(buf, size)
            memset(buf, 0, size)

            if WINDOWS:
                ret = GetModuleFileNameA(NULL, buf, size as int)
            else:
                ret = readlink("/proc/self/exe", buf, size)

            if ret <= 0:
                break  # error
            if ret < size:
                # buffer is big enough, it fits
                return buf

    # TODO: show os error message? (GetLastError / errno)
    fprintf(stderr, "error: cannot locate currently running executable, needed for finding the Jou standard library\n")
    exit(1)


@public
def find_stdlib() -> byte*:
    checked: byte*[3]
    memset(&checked, 0, sizeof checked)

    exedir = find_current_executable()
    while WINDOWS and strstr(exedir, "\\") != NULL:
        *strstr(exedir, "\\") = '/'

    for i = 0; i < sizeof checked / sizeof checked[0]; i++:
        tmp = strdup(dirname(exedir))
        free(exedir)
        exedir = tmp

        if strlen(exedir) <= 3:
            # give up, seems like we reached root of file system (e.g. "C:/" or "/")
            break

        path: byte*
        asprintf(&path, "%s/stdlib", exedir)

        iojou: byte*
        asprintf(&iojou, "%s/io.jou", path)
        buf: byte[1000]
        stat_result = stat(iojou, &buf)
        free(iojou)

        if stat_result == 0:
            for k = 0; k < i; k++:
                free(checked[k])
            free(exedir)
            return path

        checked[i] = path

    # TODO: test this
    fprintf(stderr, "error: cannot find the Jou standard library in any of the following locations:\n")
    for i = 0; i < sizeof checked / sizeof checked[0] and checked[i] != NULL; i++:
        fprintf(stderr, "  %s\n", checked[i])
    exit(1)


def write_gitignore(p: byte*) -> None:
    filename: byte*
    asprintf(&filename, "%s/.gitignore", p)

    f = fopen(filename, "r")
    if f != NULL:
        # already exists
        fclose(f)
    else:
        # write '*' into gitignore, so that git won't track any compiled files
        f = fopen(filename, "w")
        if f != NULL:
            fprintf(f, "*")
            fclose(f)

    free(filename)


def mkdir_exist_ok(path: byte*) -> None:
    # TODO: check if errno == EEXIST
    # Currently no good way to access EEXIST constant
    if WINDOWS:
        _mkdir(path)
    else:
        mkdir(path, 0o777)  # this is what mkdir in bash does according to strace


@public
def get_path_to_file_in_jou_compiled(filename: byte*) -> byte*:
    # Place compiled files so that it's difficult to get race conditions when
    # compiling multiple Jou files simultaneously (tests do that)
    tmp = strdup(command_line_args.infile)
    infile_folder = strdup(dirname(tmp))
    free(tmp)

    subfolder = get_filename_without_jou_suffix(command_line_args.infile)

    result: byte* = malloc(strlen(infile_folder) + strlen(subfolder) + strlen(filename) + 100)
    assert result != NULL

    sprintf(result, "%s/jou_compiled", infile_folder)
    mkdir_exist_ok(result)
    write_gitignore(result)

    sprintf(result, "%s/jou_compiled/%s", infile_folder, subfolder)
    mkdir_exist_ok(result)

    sprintf(result, "%s/jou_compiled/%s/%s", infile_folder, subfolder, filename)

    free(infile_folder)
    free(subfolder)
    return result



@public
def get_filename_without_jou_suffix(path: byte*) -> byte*:
    last_slash = strrchr(path, '/')
    if last_slash != NULL:
        path = &last_slash[1]

    if WINDOWS:
        last_slash = strrchr(path, '\\')
        if last_slash != NULL:
            path = &last_slash[1]

    len = strlen(path)
    if len > 4 and ends_with(path, ".jou"):
        len -= 4

    result: byte* = malloc(len+1)
    assert result != NULL
    memcpy(result, path, len)
    result[len] = '\0'

    return result


@public
def decide_exe_path() -> byte*:
    if command_line_args.outfile != NULL:
        return strdup(command_line_args.outfile)

    name = get_filename_without_jou_suffix(command_line_args.infile)
    if WINDOWS:
        name = realloc(name, strlen(name) + 10)
        strcat(name, ".exe")

    path = get_path_to_file_in_jou_compiled(name)
    free(name)
    return path


def delete_slice(start: byte*, end: byte*) -> None:
    memmove(start, end, strlen(end) + 1)

# In paths, "foo/../" is usually unnecessary, because it goes to a folder "foo" and then
# immediately back up. However, it makes a difference in a few cases:
#
# 1. folder "foo" doesn't exist
# 2. folder "foo" is a symlink to a different place
# 3. we are actually looking at "../../" (so "foo" is "..")
#
# Special cases 1 and 2 are not relevant in the Jou compiler, but special case 3 is relevant
# when importing from "../../file.jou" (bad style, but should work).
#
# This function deletes one unnecessary "foo/../", and may be called recursively to delete
# all of them.
def simplify_dotdot_once(path: byte*) -> bool:
    assert strstr(path, "\\") == NULL  # should be already taken care of when calling this

    for p = strstr(path, "/../"); p != NULL; p = strstr(&p[1], "/../"):
        end = &p[4]
        start = p
        while start > path and start[-1] != '/':
            start--

        if not starts_with(start, "../"):
            delete_slice(start, end)
            return True

    return False

@public
def simplify_path(path: byte*) -> None:
    if WINDOWS:
        # Backslash to forward slash.
        for p = path; *p != '\0'; p++:
            if *p == '\\':
                *p = '/'

    # Delete "." components.
    while starts_with(path, "./"):
        delete_slice(path, &path[2])

    while True:
        p = strstr(path, "/./")
        if p == NULL:
            break  # TODO: walrus operator  p := strstr(...)
        delete_slice(p, &p[2])

    # Delete unnecessary ".." components.
    while simplify_dotdot_once(path):
        pass


# Insert substring to string, assuming it fits.
def insert(string: byte*, substring: byte*) -> None:
    sublen = strlen(substring)
    memmove(&string[sublen], string, strlen(string) + 1)
    memcpy(string, substring, sublen)


# Rewrites linker flags passed to `link` statements in Jou files so that the
# paths are correct regardless of current working directory.
#
# Examples where the given Jou file is "/home/akuli/folder/file.jou":
#
#   "-L./foo/"  --> "'-L/home/akuli/folder/./foo/'"
#   "-L../foo/"  --> "'-L/home/akuli/folder/../foo/'"
#   "-L../../foo/"  --> "'-L/home/akuli/folder/../../foo/'"
#
# The extra quotes are needed when we are compiling in a folder whose name
# contains spaces.
@public
def handle_relative_paths_in_linker_flags(flags: byte*, jou_file_path: byte*) -> byte*:
    jou_file_path2 = strdup(jou_file_path)
    folder = dirname(jou_file_path2)  # may modify jou_file_path2

    if WINDOWS:
        quote = "\""
    else:
        quote = "'"

    # Allocate enough memory even for the following worst case scenario:
    #   - flags is full of "./", so "./" occurs strlen(flags)/2 times (note floor division)
    #   - for each "./" we add the folder, "/", and a pair of quotes
    #   - add '\0' to terminate the string
    result: byte* = malloc(strlen(flags) + (strlen(flags)/2)*(strlen(folder) + 3) + 1)
    assert result != NULL
    strcpy(result, flags)

    quoting = False

    for p = &result[strlen(result) - 1]; p >= result; p--:
        if is_ascii_whitespace(*p) and quoting:
            # add quote before whatever thing we added that needs quoting
            insert(&p[1], quote)
            quoting = False

        if not starts_with(p, "./") and not starts_with(p, "../"):
            continue

        # If we have "../" do nothing when we see the "./" part
        if p > result and p[-1] == '.':
            continue

        # If we have multiple "../" wait until we get to the first one
        if &p[-3] >= result and starts_with(&p[-3], "../"):
            continue

        if not quoting:
            # add quote after
            q = p
            while *q != '\0' and not is_ascii_whitespace(*q):
                q++
            insert(q, quote)
            quoting = True

        insert(p, "/")
        insert(p, folder)  # goes in front of the "/"

    if quoting:
        insert(result, quote)

    free(jou_file_path2)  # no longer need the folder

    # We may have allocated much more memory than needed for result, shrink it to the right size
    return realloc(result, strlen(result) + 1)


if WINDOWS:
    def replace(s: byte*, old: byte, new: byte) -> None:
        for i = 0; s[i] != '\0'; i++:
            if s[i] == old:
                s[i] = new


# Run this file with jou to test handling paths in linker files, it's complicated...
def main() -> int:
    # Output: '-L/home/akuli/my folder/./foo/' '-L/home/akuli/my folder/../foo/' '-L/home/akuli/my folder/../../foo/'
    s = handle_relative_paths_in_linker_flags("-L./foo/ -L../foo/ -L../../foo/", "/home/akuli/my folder/file.jou")
    if WINDOWS:
        replace(s, '"', '\'')  # not possible to do platform-specific output for Jou tests yet
    puts(s)
    free(s)

    # Output: '/my folder/./'
    s = handle_relative_paths_in_linker_flags("./", "/my folder/file.jou")
    if WINDOWS:
        replace(s, '"', '\'')  # not possible to do platform-specific output for Jou tests yet
    puts(s)
    free(s)

    # Quotes are always added, even if they are unnecessary. This might change later.
    # Output: '/myfolder/./'
    s = handle_relative_paths_in_linker_flags("./", "/myfolder/file.jou")
    if WINDOWS:
        replace(s, '"', '\'')  # not possible to do platform-specific output for Jou tests yet
    puts(s)
    free(s)

    # Output: /this/is/absolute/path
    s = handle_relative_paths_in_linker_flags("/this/is/absolute/path", "/folder/file.jou")
    if WINDOWS:
        replace(s, '"', '\'')  # not possible to do platform-specific output for Jou tests yet
    puts(s)
    free(s)

    return 0
