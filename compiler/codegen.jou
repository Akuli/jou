import "stdlib/math.jou"
import "stdlib/mem.jou"
import "stdlib/str.jou"

import "./evaluate.jou"
import "./typecheck/common.jou"
import "./cf_graph.jou"
import "./llvm.jou"
import "./target.jou"
import "./types.jou"
import "./constants.jou"


def find_block(cfg: CfGraph*, b: CfBlock*) -> int:
    for i = 0; i < cfg->n_all_blocks; i++:
        if cfg->all_blocks[i] == b:
            return i
    assert False


# LLVM doesn't have a built-in union type, and you're supposed to abuse other types for that:
# https://mapping-high-level-constructs-to-llvm-ir.readthedocs.io/en/latest/basic-constructs/unions.html
#
# My first idea was to use an array of bytes that is big enough to fit anything.
# However, that might not be aligned properly.
#
# Then I tried choosing the member type that has the biggest align, and making a large enough array of it.
# Because the align is always a power of two, the memory will be suitably aligned for all member types.
# But it didn't work for some reason I still don't understand.
#
# Then I figured out how clang does it and did it the same way.
# We make a struct that contains:
# - the most aligned type as chosen before
# - array of i8 as padding to make it the right size.
# But for some reason that didn't work either.
#
# As a "last resort" I just use an array of i64 large enough and hope it's aligned as needed.
def codegen_union_type(types: LLVMType**, ntypes: int) -> LLVMType*:
    # For some reason uncommenting this makes stuff compile almost 2x slower...
    #if ntypes == 1:
    #    return types[0]

    sizeneeded = 0L
    for i = 0; i < ntypes; i++:
        size1 = LLVMABISizeOfType(target.target_data, types[i])
        size2 = LLVMStoreSizeOfType(target.target_data, types[i])

        # If this assert fails, you need to figure out which of the size functions should be used.
        # I don't know what their difference is.
        # And if you need the alignment, there's 3 different functions for that...
        assert size1 == size2
        sizeneeded = llmax(sizeneeded, size1)

    return LLVMArrayType(LLVMInt64Type(), ((sizeneeded+7)/8) as int)


def codegen_class_type(type: Type*) -> LLVMType*:
    assert type->kind == TypeKind.Class

    n = type->classdata.nfields

    flat_elems: LLVMType** = malloc(sizeof(flat_elems[0]) * n)
    for i = 0; i < n; i++:
        flat_elems[i] = codegen_type(type->classdata.fields[i].type)

    # Combine together fields of the same union.
    combined: LLVMType** = malloc(sizeof(combined[0]) * n)
    combinedlen = 0
    for start = 0; start < n; start = end:
        end = start + 1
        while end < n and type->classdata.fields[start].union_id == type->classdata.fields[end].union_id:
            end++
        combined[combinedlen++] = codegen_union_type(&flat_elems[start], end-start)

    result = LLVMStructType(combined, combinedlen, False as int)
    free(flat_elems)
    free(combined)
    return result


def codegen_type(type: Type*) -> LLVMType*:
    match type->kind:
        case TypeKind.Array:
            return LLVMArrayType(codegen_type(type->array.item_type), type->array.len)
        case TypeKind.Pointer | TypeKind.VoidPointer:
            # Element type doesn't matter in new LLVM versions.
            return LLVMPointerType(LLVMInt8Type(), 0)
        case TypeKind.FloatingPoint:
            if type->size_in_bits == 32:
                return LLVMFloatType()
            if type->size_in_bits == 64:
                return LLVMDoubleType()
            assert False
        case TypeKind.SignedInteger | TypeKind.UnsignedInteger:
            return LLVMIntType(type->size_in_bits)
        case TypeKind.Bool:
            return LLVMInt1Type()
        case TypeKind.OpaqueClass:
            # this is compiler internal/temporary thing and should never end up here
            assert False
        case TypeKind.Class:
            return codegen_class_type(type)
        case TypeKind.Enum:
            return LLVMInt32Type()


def codegen_function_type(sig: Signature*) -> LLVMType*:
    argtypes: LLVMType** = malloc(sig->nargs * sizeof(argtypes[0]))
    for i = 0; i < sig->nargs; i++:
        argtypes[i] = codegen_type(sig->argtypes[i])

    # TODO: tell llvm, if we know a function is noreturn ?
    if sig->returntype == NULL:  # "-> noreturn" or "-> None"
        returntype = LLVMVoidType()
    else:
        returntype = codegen_type(sig->returntype)

    functype = LLVMFunctionType(returntype, argtypes, sig->nargs, sig->takes_varargs as int)
    free(argtypes)
    return functype


def special_constant_to_llvm(name: byte*) -> LLVMValue*:
    v = get_special_constant(name)
    assert v != -1
    return LLVMConstInt(LLVMInt1Type(), v, False as int)


def build_signed_mod(builder: LLVMBuilder*, lhs: LLVMValue*, rhs: LLVMValue*) -> LLVMValue*:
    # Jou's % operator ensures that a%b has same sign as b:
    # jou_mod(a, b) = llvm_mod(llvm_mod(a, b) + b, b)
    llmod = LLVMBuildSRem(builder, lhs, rhs, "smod_tmp")
    sum = LLVMBuildAdd(builder, llmod, rhs, "smod_tmp")
    return LLVMBuildSRem(builder, sum, rhs, "smod")


def build_signed_div(builder: LLVMBuilder*, lhs: LLVMValue*, rhs: LLVMValue*) -> LLVMValue*:
    # LLVM's provides two divisions. One truncates, the other is an "exact div"
    # that requires there is no remainder. Jou uses floor division which is
    # neither of the two, but is quite easy to implement:
    #
    #    floordiv(a, b) = exact_div(a - jou_mod(a, b), b)
    #
    top = LLVMBuildSub(builder, lhs, build_signed_mod(builder, lhs, rhs), "sdiv_tmp")
    return LLVMBuildExactSDiv(builder, top, rhs, "sdiv")


class CodeGen:
    module: LLVMModule*
    builder: LLVMBuilder*
    cfvars: LocalVariable**
    cfvars_end: LocalVariable**
    # All local variables are represented as pointers to stack space, even
    # if they are never reassigned. LLVM will optimize the mess.
    llvm_locals: LLVMValue**
    is_main_file: bool

    def get_pointer_to_local_var(self, cfvar: LocalVariable*) -> LLVMValue*:
        assert cfvar != NULL

        # The loop below looks stupid, but I don't see a better alternative.
        #
        # I want CFG variables to be used as pointers, so that it's easy to refer to a
        # variable's name and type, check if you have the same variable, etc. But I
        # can't make a List of variables when building CFG, because existing variable
        # pointers would become invalid as the list grows. The solution is to allocate
        # each variable separately when building the CFG.
        #
        # Another idea I had was to count the number of variables needed beforehand,
        # so I wouldn't need to ever resize the list of variables, but the CFG building
        # is already complicated enough as is.
        for i = 0; &self->cfvars[i] < self->cfvars_end; i++:
            if self->cfvars[i] == cfvar:
                return self->llvm_locals[i]
        assert False

    # Returns the value of a local variable. Short name, because it's used a lot.
    def getlocal(self, cfvar: LocalVariable*) -> LLVMValue*:
        assert cfvar != NULL

        for i = 0; &self->cfvars[i] < self->cfvars_end; i++:
            if self->cfvars[i] == cfvar:
                var_ptr = self->llvm_locals[i]
                var_type = codegen_type(self->cfvars[i]->type)
                return LLVMBuildLoad2(self->builder, var_type, var_ptr, cfvar->name)
        assert False

    def setlocal(self, cfvar: LocalVariable*, value: LLVMValue*) -> None:
        assert cfvar != NULL
        for i = 0; &self->cfvars[i] < self->cfvars_end; i++:
            if self->cfvars[i] == cfvar:
                var_ptr = self->llvm_locals[i]
                # TODO: The following line can be removed once we drop LLVM 14 support.
                var_ptr = LLVMBuildBitCast(self->builder, var_ptr, LLVMPointerType(LLVMTypeOf(value), 0), "legacy_llvm14_cast")
                LLVMBuildStore(self->builder, value, var_ptr)
                return
        assert False

    def do_function_or_method_decl(self, sig: Signature*) -> LLVMValue*:
        fullname: byte[200]
        if sig->get_self_class() != NULL:
            snprintf(fullname, sizeof fullname, "%s.%s", sig->get_self_class()->name, sig->name)
        else:
            assert sizeof(fullname) >= sizeof(sig->name)
            assert sizeof(sig->name) > 50  # this is an array, not a pointer to dynamic length string
            strcpy(fullname, sig->name)

        # Make it so that this can be called many times without issue
        func = LLVMGetNamedFunction(self->module, fullname)
        if func != NULL:
            return func

        functype = codegen_function_type(sig)
        return LLVMAddFunction(self->module, fullname, functype)

    def do_call(self, sig: Signature*, args: LLVMValue**, nargs: int) -> LLVMValue*:
        debug_name: byte[100] = ""
        if sig->returntype != NULL:
            snprintf(debug_name, sizeof debug_name, "%s_return_value", sig->name)

        function: LLVMValue* = self->do_function_or_method_decl(sig)
        function_type = codegen_function_type(sig)
        return LLVMBuildCall2(self->builder, function_type, function, args, nargs, debug_name)

    def do_string(self, s: byte*) -> LLVMValue*:
        array = LLVMConstString(s, strlen(s) as int, False as int)
        global_var = LLVMAddGlobal(self->module, LLVMTypeOf(array), "string_literal")
        LLVMSetLinkage(global_var, LLVMLinkage.Private)  # This makes it a static global variable
        LLVMSetInitializer(global_var, array)

        string_type = LLVMPointerType(LLVMInt8Type(), 0)
        return LLVMBuildBitCast(self->builder, global_var, string_type, "string_ptr")


    def do_constant(self, c: Constant*) -> LLVMValue*:
        match c->kind:
            case ConstantKind.Bool:
                return LLVMConstInt(LLVMInt1Type(), c->boolean as long, False as int)
            case ConstantKind.Integer:
                return LLVMConstInt(codegen_type(c->get_type()), c->integer.value, c->integer.is_signed as int)
            case ConstantKind.Float | ConstantKind.Double:
                return LLVMConstRealOfString(codegen_type(c->get_type()), c->double_or_float_text)
            case ConstantKind.Null:
                return LLVMConstNull(codegen_type(voidPtrType))
            case ConstantKind.String:
                return self->do_string(c->str)
            case ConstantKind.EnumMember:
                return LLVMConstInt(LLVMInt32Type(), c->enum_member.memberidx, False as int)

    def do_arithmetic_instruction(self, ins: CfInstruction*) -> None:
        lhs = self->getlocal(ins->operands[0])
        rhs = self->getlocal(ins->operands[1])

        assert ins->operands[0]->type == ins->operands[1]->type
        type = ins->operands[0]->type

        match type->kind:
            case TypeKind.FloatingPoint:
                match ins->kind:
                    case CfInstructionKind.NumAdd:
                        self->setlocal(ins->destvar, LLVMBuildFAdd(self->builder, lhs, rhs, "float_sum"))
                    case CfInstructionKind.NumSub:
                        self->setlocal(ins->destvar, LLVMBuildFSub(self->builder, lhs, rhs, "float_diff"))
                    case CfInstructionKind.NumMul:
                        self->setlocal(ins->destvar, LLVMBuildFMul(self->builder, lhs, rhs, "float_prod"))
                    case CfInstructionKind.NumDiv:
                        self->setlocal(ins->destvar, LLVMBuildFDiv(self->builder, lhs, rhs, "float_quot"))
                    case CfInstructionKind.NumMod:
                        self->setlocal(ins->destvar, LLVMBuildFRem(self->builder, lhs, rhs, "float_mod"))
                    case _:
                        assert False
            case TypeKind.SignedInteger:
                match ins->kind:
                    case CfInstructionKind.NumAdd:
                        self->setlocal(ins->destvar, LLVMBuildAdd(self->builder, lhs, rhs, "int_sum"))
                    case CfInstructionKind.NumSub:
                        self->setlocal(ins->destvar, LLVMBuildSub(self->builder, lhs, rhs, "int_diff"))
                    case CfInstructionKind.NumMul:
                        self->setlocal(ins->destvar, LLVMBuildMul(self->builder, lhs, rhs, "int_prod"))
                    case CfInstructionKind.NumDiv:
                        self->setlocal(ins->destvar, build_signed_div(self->builder, lhs, rhs))
                    case CfInstructionKind.NumMod:
                        self->setlocal(ins->destvar, build_signed_mod(self->builder, lhs, rhs))
                    case _:
                        assert False
            case TypeKind.UnsignedInteger:
                match ins->kind:
                    case CfInstructionKind.NumAdd:
                        self->setlocal(ins->destvar, LLVMBuildAdd(self->builder, lhs, rhs, "uint_sum"))
                    case CfInstructionKind.NumSub:
                        self->setlocal(ins->destvar, LLVMBuildSub(self->builder, lhs, rhs, "uint_diff"))
                    case CfInstructionKind.NumMul:
                        self->setlocal(ins->destvar, LLVMBuildMul(self->builder, lhs, rhs, "uint_prod"))
                    case CfInstructionKind.NumDiv:
                        self->setlocal(ins->destvar, LLVMBuildUDiv(self->builder, lhs, rhs, "uint_quot"))
                    case CfInstructionKind.NumMod:
                        self->setlocal(ins->destvar, LLVMBuildURem(self->builder, lhs, rhs, "uint_mod"))
                    case _:
                        assert False
            case _:
                assert False

    # Try not to look at this too much... It is a wall of code.
    def codegen_instruction(self, ins: CfInstruction*) -> None:
        match ins->kind:
            case CfInstructionKind.Call:
                args: LLVMValue** = malloc(ins->noperands * sizeof(args[0]))
                for i = 0; i < ins->noperands; i++:
                    args[i] = self->getlocal(ins->operands[i])
                return_value = self->do_call(&ins->signature, args, ins->noperands)
                if ins->destvar != NULL:
                    self->setlocal(ins->destvar, return_value)
                free(args)
            case CfInstructionKind.Constant:
                self->setlocal(ins->destvar, self->do_constant(&ins->constant))
            case CfInstructionKind.SpecialConstant:
                self->setlocal(ins->destvar, special_constant_to_llvm(ins->scname))
            case CfInstructionKind.StringArray:
                self->setlocal(ins->destvar, LLVMConstString(ins->strarray.str, ins->strarray.len, True as int))
            case CfInstructionKind.SizeOf:
                self->setlocal(ins->destvar, LLVMSizeOf(codegen_type(ins->type)))
            case CfInstructionKind.AddressOfLocalVar:
                self->setlocal(ins->destvar, self->get_pointer_to_local_var(ins->operands[0]))
            case CfInstructionKind.AddressOfGlobalVar:
                self->setlocal(ins->destvar, LLVMGetNamedGlobal(self->module, ins->globalname))
            case CfInstructionKind.PtrLoad:
                self->setlocal(ins->destvar, LLVMBuildLoad2(self->builder, codegen_type(ins->operands[0]->type->value_type), self->getlocal(ins->operands[0]), "ptr_load"))
            case CfInstructionKind.PtrStore:
                ptr = self->getlocal(ins->operands[0])
                # TODO: The following line can be removed once we drop LLVM 14 support.
                ptr = LLVMBuildBitCast(self->builder, ptr, LLVMPointerType(LLVMTypeOf(self->getlocal(ins->operands[1])), 0), "legacy_llvm14_cast")
                LLVMBuildStore(self->builder, self->getlocal(ins->operands[1]), ptr)
            case CfInstructionKind.PtrToInt64:
                self->setlocal(ins->destvar, LLVMBuildPtrToInt(self->builder, self->getlocal(ins->operands[0]), LLVMInt64Type(), "ptr_as_long"))
            case CfInstructionKind.Int64ToPtr:
                self->setlocal(ins->destvar, LLVMBuildIntToPtr(self->builder, self->getlocal(ins->operands[0]), codegen_type(ins->destvar->type), "long_as_ptr"))
            case CfInstructionKind.PtrClassField:
                classtype = ins->operands[0]->type->value_type
                assert classtype->kind == TypeKind.Class
                f = classtype->classdata.fields
                while strcmp(f->name, ins->fieldname) != 0:
                    f++
                    assert f < &classtype->classdata.fields[classtype->classdata.nfields]
                val = LLVMBuildStructGEP2(self->builder, codegen_type(classtype), self->getlocal(ins->operands[0]), f->union_id, ins->fieldname)
                self->setlocal(ins->destvar, val)
            case CfInstructionKind.PtrMemsetToZero:
                size = LLVMSizeOf(codegen_type(ins->operands[0]->type->value_type))
                LLVMBuildMemSet(self->builder, self->getlocal(ins->operands[0]), LLVMConstInt(LLVMInt8Type(), 0, False as int), size, 0)
            case CfInstructionKind.PtrAddInt:
                ptr_var = self->getlocal(ins->operands[0])
                value_type = codegen_type(ins->operands[0]->type->value_type)
                int_var = self->getlocal(ins->operands[1])
                self->setlocal(ins->destvar, LLVMBuildGEP2(self->builder, value_type, ptr_var, &int_var, 1, "ptr_add_int"))
            case CfInstructionKind.NumCast:
                from = ins->operands[0]->type
                to = ins->destvar->type
                assert from->is_number_type() and to->is_number_type()

                if from->is_integer_type() and to->is_integer_type():
                    # Examples:
                    #  signed 8-bit 0xFF (-1) --> 16-bit 0xFFFF (-1 or max value)
                    #  unsigned 8-bit 0xFF (255) --> 16-bit 0x00FF (255)
                    self->setlocal(ins->destvar, LLVMBuildIntCast2(self->builder, self->getlocal(ins->operands[0]), codegen_type(to), (from->kind == TypeKind.SignedInteger) as int, "int_cast"))
                elif from->is_integer_type() and to->kind == TypeKind.FloatingPoint:
                    # integer --> double / float
                    if from->kind == TypeKind.SignedInteger:
                        self->setlocal(ins->destvar, LLVMBuildSIToFP(self->builder, self->getlocal(ins->operands[0]), codegen_type(to), "cast"))
                    else:
                        self->setlocal(ins->destvar, LLVMBuildUIToFP(self->builder, self->getlocal(ins->operands[0]), codegen_type(to), "cast"))
                elif from->kind == TypeKind.FloatingPoint and to->is_integer_type():
                    if to->kind == TypeKind.SignedInteger:
                        self->setlocal(ins->destvar, LLVMBuildFPToSI(self->builder, self->getlocal(ins->operands[0]), codegen_type(to), "cast"))
                    else:
                        self->setlocal(ins->destvar, LLVMBuildFPToUI(self->builder, self->getlocal(ins->operands[0]), codegen_type(to), "cast"))
                elif from->kind == TypeKind.FloatingPoint and to->kind == TypeKind.FloatingPoint:
                    self->setlocal(ins->destvar, LLVMBuildFPCast(self->builder, self->getlocal(ins->operands[0]), codegen_type(to), "cast"))
                else:
                    assert False
            case CfInstructionKind.BoolNegate:
                self->setlocal(ins->destvar, LLVMBuildXor(self->builder, self->getlocal(ins->operands[0]), LLVMConstInt(LLVMInt1Type(), 1, False as int), "bool_negate"))
            case CfInstructionKind.VarCpy | CfInstructionKind.PtrCast | CfInstructionKind.Int32ToEnum | CfInstructionKind.EnumToInt32:
                self->setlocal(ins->destvar, self->getlocal(ins->operands[0]))
            case CfInstructionKind.NumAdd | CfInstructionKind.NumSub | CfInstructionKind.NumMul | CfInstructionKind.NumDiv | CfInstructionKind.NumMod:
                self->do_arithmetic_instruction(ins)
            case CfInstructionKind.NumEq:
                if ins->operands[0]->type->is_integer_type():
                    self->setlocal(ins->destvar, LLVMBuildICmp(self->builder, LLVMIntPredicate.EQ, self->getlocal(ins->operands[0]), self->getlocal(ins->operands[1]), "num_eq"))
                else:
                    self->setlocal(ins->destvar, LLVMBuildFCmp(self->builder, LLVMRealPredicate.OEQ, self->getlocal(ins->operands[0]), self->getlocal(ins->operands[1]), "num_eq"))
            case CfInstructionKind.NumLt:
                if ins->operands[0]->type->kind == TypeKind.UnsignedInteger and ins->operands[1]->type->kind == TypeKind.UnsignedInteger:
                    self->setlocal(ins->destvar, LLVMBuildICmp(self->builder, LLVMIntPredicate.ULT, self->getlocal(ins->operands[0]), self->getlocal(ins->operands[1]), "num_lt"))
                elif ins->operands[0]->type->is_integer_type() and ins->operands[1]->type->is_integer_type():
                    self->setlocal(ins->destvar, LLVMBuildICmp(self->builder, LLVMIntPredicate.SLT, self->getlocal(ins->operands[0]), self->getlocal(ins->operands[1]), "num_lt"))
                else:
                    self->setlocal(ins->destvar, LLVMBuildFCmp(self->builder, LLVMRealPredicate.OLT, self->getlocal(ins->operands[0]), self->getlocal(ins->operands[1]), "num_lt"))

    def do_call_of_special_startup_func(self) -> None:
        if WINDOWS or MACOS or NETBSD:
            functype = LLVMFunctionType(LLVMVoidType(), NULL, 0, False as int)
            func = LLVMAddFunction(self->module, "_jou_startup", functype)
            LLVMBuildCall2(self->builder, functype, func, NULL, 0, "")

    def do_function_or_method_def(self, cfg: CfGraph*) -> None:
        # Main function of main file implicitly becomes public, so that OS can call it.
        implicitly_public = self->is_main_file and cfg->signature.is_main_function()

        self->cfvars = cfg->locals
        self->cfvars_end = &cfg->locals[cfg->nlocals]
        self->llvm_locals = malloc(sizeof(self->llvm_locals[0]) * cfg->nlocals)

        llvm_func = self->do_function_or_method_decl(&cfg->signature)
        if not (cfg->public or implicitly_public):
            # Not @public, do not expose it to other files (also known as static function).
            #
            # Without this, the linker complains if two files define functions with the
            # same name, even if they are not public.
            LLVMSetLinkage(llvm_func, LLVMLinkage.Private)

        blocks: LLVMBasicBlock** = malloc(sizeof(blocks[0]) * cfg->n_all_blocks)
        for i = 0; i < cfg->n_all_blocks; i++:
            name: byte[50]
            sprintf(name, "block%d", i)
            blocks[i] = LLVMAppendBasicBlock(llvm_func, name)

        assert cfg->all_blocks[0] == &cfg->start_block
        LLVMPositionBuilderAtEnd(self->builder, blocks[0])

        if cfg->signature.get_self_class() == NULL and strcmp(cfg->signature.name, "main") == 0:
            # Insert special code at start of main()
            self->do_call_of_special_startup_func()

        # Allocate stack space for local variables at start of function.
        return_value: LLVMValue* = NULL
        for i = 0; i < cfg->nlocals; i++:
            v = cfg->locals[i]
            self->llvm_locals[i] = LLVMBuildAlloca(self->builder, codegen_type(v->type), v->name)
            if strcmp(v->name, "return") == 0:
                return_value = self->llvm_locals[i]

        # Place arguments into the first n local variables.
        for i = 0; i < cfg->signature.nargs; i++:
            self->setlocal(cfg->locals[i], LLVMGetParam(llvm_func, i))

        for i = 0; i < cfg->n_all_blocks; i++:
            b = &cfg->all_blocks[i]
            LLVMPositionBuilderAtEnd(self->builder, blocks[i])

            for ins = (*b)->instructions; ins < &(*b)->instructions[(*b)->ninstructions]; ins++:
                self->codegen_instruction(ins)

            if *b == &cfg->end_block:
                assert (*b)->ninstructions == 0
                # The "return" variable may have been deleted as unused.
                # In that case return_value is NULL but signature.returntype isn't.
                if return_value != NULL:
                    return_type = codegen_type(cfg->signature.returntype)
                    LLVMBuildRet(self->builder, LLVMBuildLoad2(self->builder, return_type, return_value, "return_value"))
                elif cfg->signature.returntype != NULL or cfg->signature.is_noreturn:
                    LLVMBuildUnreachable(self->builder)
                else:
                    LLVMBuildRetVoid(self->builder)
            elif (*b)->iftrue != NULL and (*b)->iffalse != NULL:
                if (*b)->iftrue == (*b)->iffalse:
                    LLVMBuildBr(self->builder, blocks[find_block(cfg, (*b)->iftrue)])
                else:
                    assert (*b)->branchvar != NULL
                    LLVMBuildCondBr(
                        self->builder,
                        self->getlocal((*b)->branchvar),
                        blocks[find_block(cfg, (*b)->iftrue)],
                        blocks[find_block(cfg, (*b)->iffalse)])
            elif (*b)->iftrue == NULL and (*b)->iffalse == NULL:
                LLVMBuildUnreachable(self->builder)
            else:
                assert False

        free(blocks)
        free(self->llvm_locals)


@public
def codegen(cfgfile: CfGraphFile*, ft: FileTypes*, is_main_file: bool) -> LLVMModule*:
    gen = CodeGen{
        module = LLVMModuleCreateWithName(cfgfile->filename),
        builder = LLVMCreateBuilder(),
        is_main_file = is_main_file,
    }

    LLVMSetTarget(gen.module, target.triple)
    LLVMSetDataLayout(gen.module, target.data_layout)

    for v = ft->globals; v < &ft->globals[ft->nglobals]; v++:
        t = codegen_type(v->type)
        globalptr = LLVMAddGlobal(gen.module, t, v->name)
        if v->defined_in_current_file:
            LLVMSetInitializer(globalptr, LLVMConstNull(t))

    for g = cfgfile->graphs; g < &cfgfile->graphs[cfgfile->ngraphs]; g++:
        gen.do_function_or_method_def(*g)

    LLVMDisposeBuilder(gen.builder)
    return gen.module
