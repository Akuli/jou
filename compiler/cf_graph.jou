# Control Flow Graph.
# Class names not prefixed with Cfg because it looks too much like "config" to me

import "stdlib/mem.jou"
import "stdlib/io.jou"

import "./errors_and_warnings.jou"
import "./utils.jou"
import "./constants.jou"
import "./typecheck/common.jou"
import "./types.jou"


def very_short_number_type_description(t: Type*) -> byte*:
    if t->kind == TypeKind.FloatingPoint:
        return "floating"
    if t->kind == TypeKind.SignedInteger:
        return "signed"
    if t->kind == TypeKind.UnsignedInteger:
        return "unsigned"
    assert False


class CfStringArray:
    str: byte*
    len: int

enum CfInstructionKind:
    Constant
    SpecialConstant  # e.g. "WINDOWS", unlike CF_Constant this doesn't trigger "this code will never run" warnings
    StringArray
    Call  # function or method call, depending on whether self_type is NULL (see below)
    AddressOfLocalVar
    AddressOfGlobalVar
    SizeOf
    PtrMemsetToZero  # takes one operand, a pointer: memset(ptr, 0, sizeof(*ptr))
    PtrStore  # *op1 = op2 (does not use destvar, takes 2 operands)
    PtrLoad  # aka dereference
    PtrToInt64
    Int64ToPtr
    PtrClassField  # takes 1 operand (pointer), sets destvar to &op->fieldname
    PtrCast
    PtrAddInt
    # Left and right side of number operations must be of the same type (except CfInstructionKind.NumCast).
    NumAdd
    NumSub
    NumMul
    NumDiv
    NumMod
    NumEq
    NumLt
    NumCast
    EnumToInt32
    Int32ToEnum
    BoolNegate  # TODO: get rid of this?
    VarCpy  # similar to assignment statements: var1 = var2

class CfInstruction:
    location: Location
    kind: CfInstructionKind
    union:
        constant: Constant       # CfInstructionKind.Constant
        strarray: CfStringArray  # CfInstructionKind.StringArray
        signature: Signature     # CfInstructionKind.Call
        fieldname: byte[100]     # CfInstructionKind.PtrClassField
        globalname: byte[100]    # CfInstructionKind.AddressOfGlobalVar
        scname: byte[100]        # CfInstructionKind.SpecialConstant
        type: Type*              # CfInstructionKind.SizeOf

    operands: LocalVariable**  # e.g. numbers to add, function arguments
    noperands: int
    destvar: LocalVariable*  # NULL when it doesn't make sense, e.g. functions that return void
    hide_unreachable_warning: bool # usually false, can be set to true to avoid unreachable warning false positives

    def print(self) -> None:
        printf("    line %-4d  ", self->location.lineno)

        if self->destvar != NULL:
            self->destvar->print()
            printf(" = ")

        match self->kind:
            case CfInstructionKind.AddressOfLocalVar:
                printf("address of ")
                self->operands[0]->print()
                printf(" (local variable)")
            case CfInstructionKind.AddressOfGlobalVar:
                printf("address of %s (global variable)", self->globalname)
            case CfInstructionKind.SizeOf:
                printf("sizeof %s", self->type->name)
            case CfInstructionKind.BoolNegate:
                printf("boolean negation of ")
                self->operands[0]->print()
            case CfInstructionKind.Call:
                if self->signature.get_self_class() != NULL:
                    printf("call method %s.", self->signature.get_self_class()->name)
                else:
                    printf("call function ")
                printf("%s(", self->signature.name)
                for i = 0; i < self->noperands; i++:
                    if i != 0:
                        printf(", ")
                    self->operands[i]->print()
                printf(")")
            case CfInstructionKind.NumCast:
                printf("number cast ")
                self->operands[0]->print()
                printf(
                    " (%d-bit %s --> %d-bit %s)",
                    self->operands[0]->type->size_in_bits,
                    very_short_number_type_description(self->operands[0]->type),
                    self->destvar->type->size_in_bits,
                    very_short_number_type_description(self->destvar->type),
                )
            case CfInstructionKind.EnumToInt32:
                printf("cast ")
                self->operands[0]->print()
                printf(" from enum to 32-bit signed int")
            case CfInstructionKind.Int32ToEnum:
                printf("cast ")
                self->operands[0]->print()
                printf(" from 32-bit signed int to enum")
            case CfInstructionKind.PtrToInt64:
                printf("cast ")
                self->operands[0]->print()
                printf(" to 64-bit integer")
            case CfInstructionKind.Int64ToPtr:
                printf("cast ")
                self->operands[0]->print()
                printf(" from 64-bit integer to pointer")
            case CfInstructionKind.Constant:
                self->constant.print()
            case CfInstructionKind.SpecialConstant:
                printf("special constant \"%s\"", self->scname)
            case CfInstructionKind.StringArray:
                printf("string array ")
                print_string(self->strarray.str, self->strarray.len)
            case (
                CfInstructionKind.NumAdd
                | CfInstructionKind.NumSub
                | CfInstructionKind.NumMul
                | CfInstructionKind.NumDiv
                | CfInstructionKind.NumMod
                | CfInstructionKind.NumEq
                | CfInstructionKind.NumLt
            ):
                match self->kind:
                    case CfInstructionKind.NumAdd:
                        printf("num add ")
                    case CfInstructionKind.NumSub:
                        printf("num sub ")
                    case CfInstructionKind.NumMul:
                        printf("num mul ")
                    case CfInstructionKind.NumDiv:
                        printf("num div ")
                    case CfInstructionKind.NumMod:
                        printf("num mod ")
                    case CfInstructionKind.NumEq:
                        printf("num eq ")
                    case CfInstructionKind.NumLt:
                        printf("num lt ")
                    case _:
                        assert False
                self->operands[0]->print()
                printf(", ")
                self->operands[1]->print()
            case CfInstructionKind.PtrLoad:
                # Extra parentheses to make these stand out a bit.
                printf("*(")
                self->operands[0]->print()
                printf(")")
            case CfInstructionKind.PtrStore:
                printf("*(")
                self->operands[0]->print()
                printf(") = ")
                self->operands[1]->print()
            case CfInstructionKind.PtrAddInt:
                printf("ptr ")
                self->operands[0]->print()
                printf(" + integer ")
                self->operands[1]->print()
            case CfInstructionKind.PtrClassField:
                self->operands[0]->print()
                printf(" + offset of field \"%s\"", self->fieldname)
            case CfInstructionKind.PtrCast:
                printf("pointer cast ")
                self->operands[0]->print()
            case CfInstructionKind.PtrMemsetToZero:
                printf("set value of pointer ")
                self->operands[0]->print()
                printf(" to zero bytes")
            case CfInstructionKind.VarCpy:
                self->operands[0]->print()
            case _:
                assert False
        printf("\n")

    def free(self) -> None:
        match self->kind:
            case CfInstructionKind.Constant:
                self->constant.free()
            case CfInstructionKind.StringArray:
                free(self->strarray.str)
            case CfInstructionKind.Call:
                self->signature.free()
            case _:
                free(self->operands)

    def add_operand(self, operand: LocalVariable*) -> None:
        self->operands = realloc(self->operands, sizeof(self->operands[0]) * (self->noperands + 1))
        assert self->operands != NULL
        self->operands[self->noperands++] = operand


class CfBlock:
    instructions: CfInstruction*
    ninstructions: int
    branchvar: LocalVariable*  # boolean value used to decide where to jump next

    # iftrue and iffalse are NULL for special end block and after calling a noreturn function.
    # When iftrue and iffalse are the same, the branchvar is not used and may be NULL.
    iftrue: CfBlock*
    iffalse: CfBlock*

    def free(self) -> None:
        for ins = self->instructions; ins < &self->instructions[self->ninstructions]; ins++:
            ins->free()
        free(self->instructions)


class CfGraph:
    signature: Signature
    start_block: CfBlock  # First block
    end_block: CfBlock  # Always empty. Return statement jumps here.
    all_blocks: CfBlock**
    n_all_blocks: int
    locals: LocalVariable**   # First n variables are the function arguments
    nlocals: int

    def print(self) -> None:
        printed_varnames_idx = 0

        sigstr: byte* = self->signature.to_string(True, True)
        printf("Function %s\n", sigstr)
        free(sigstr)

        printf("  Variables:\n")
        for var = self->locals; var < &self->locals[self->nlocals]; var++:
            printf("    ")
            (*var)->print_to_width(20)
            printf("  %s\n", (*var)->type->name)

        for blockidx = 0; blockidx < self->n_all_blocks; blockidx++:
            b = self->all_blocks[blockidx]

            printf("  Block %d", blockidx)
            #printf(" at %p", b)

            if b == &self->start_block:
                printf(" (start block)")
            if b == &self->end_block:
                assert b->ninstructions == 0
                printf(" is the end block.\n")
                continue

            printf(":\n")

            for ins = b->instructions; ins < &b->instructions[b->ninstructions]; ins++:
                ins->print()

            if b == &self->end_block:
                assert b->iftrue == NULL
                assert b->iffalse == NULL
            elif b->iftrue == NULL and b->iffalse == NULL:
                printf("    Execution stops here. We have called a noreturn function.\n")
            else:
                trueidx = -1
                falseidx = -1
                for i = 0; i < self->n_all_blocks; i++:
                    if self->all_blocks[i] == b->iftrue:
                        trueidx = i
                    if self->all_blocks[i]==b->iffalse:
                        falseidx = i
                assert trueidx != -1
                assert falseidx != -1
                if trueidx == falseidx:
                    printf("    Jump to block %d.\n", trueidx)
                else:
                    assert b->branchvar != NULL
                    printf("    If ")
                    b->branchvar->print()
                    printf(" is True jump to block %d, otherwise block %d.\n", trueidx, falseidx)

        printf("\n")

    def free(self) -> None:
        self->signature.free()
        for b = self->all_blocks; b < &self->all_blocks[self->n_all_blocks]; b++:
            (*b)->free()
            if *b != &self->start_block and *b != &self->end_block:
                free(*b)
        for v = self->locals; v < &self->locals[self->nlocals]; v++:
            free(*v)
        free(self->all_blocks)
        free(self->locals)


class CfGraphFile:
    filename: byte*
    graphs: CfGraph**  # only for defined functions
    ngraphs: int

    def print(self) -> None:
        printf("===== Control Flow Graphs for file \"%s\" =====\n", self->filename)
        for cfg = self->graphs; cfg < &self->graphs[self->ngraphs]; cfg++:
            (*cfg)->print()

    def free(self) -> None:
        for cfg = self->graphs; cfg < &self->graphs[self->ngraphs]; cfg++:
            (*cfg)->free()
            free(*cfg)
        free(self->graphs)
