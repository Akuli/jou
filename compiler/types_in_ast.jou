# This file defines classes that hold type information in the AST.
#
# These are included in the AST, but they are not set when the AST is
# created (parsing). Instead, they are filled in later during type checking.
# Previously I passed around the results of type checking with return values,
# but it was not as convenient as this is.

import "stdlib/str.jou"
import "stdlib/mem.jou"

import "./types.jou"
import "./constants.jou"


@public
class ExpressionTypes:
    # Type of value that the expression evaluates to, before implicit casts are applied.
    # This is NULL before type checking, and if the expression  calling '-> None' function/method.
    orig_type: Type*

    # Type after applying implicit cast, if any. If there's no implicit cast, same as original_type.
    # This is NULL before type checking, and if the expression  calling '-> None' function/method.
    implicit_cast_type: Type*

    # Flags to indicate whether special kinds of implicit casts happened
    implicit_array_to_pointer_cast: bool    # Foo[N] to Foo*


@public
class LocalVariable:
    name: byte[100]  # Same name as in user's code, empty for temporary variables created by compiler
    type: Type*


# Type information about a function or method defined in the current file.
# Not created for anything imported from another file.
@public
class FunctionOrMethodTypes:
    signature: Signature
    locals: LocalVariable*
    nlocals: int

    def find_local_var(self, name: byte*) -> LocalVariable*:
        for var = self->locals; var < &self->locals[self->nlocals]; var++:
            if strcmp(var->name, name) == 0:
                return var
        return NULL

    def add_variable(self, t: Type*, name: byte*) -> None:
        var = LocalVariable{type = t}

        assert name != NULL
        assert self->find_local_var(name) == NULL
        assert strlen(name) < sizeof(var.name)
        strcpy(var.name, name)

        self->locals = realloc(self->locals, sizeof(self->locals[0]) * (self->nlocals + 1))
        assert self->locals != NULL
        self->locals[self->nlocals++] = var

    def free(self) -> None:
        free(self->locals)
        self->signature.free()


class GlobalVariable:
    name: byte[100]  # Same as in user's code, never empty
    type: Type*
    usedptr: bool*  # If non-NULL, set to true when the variable is used. This is how we detect unused imports.

class TypeAndUsedPtr:
    type: Type*
    usedptr: bool*  # used to detect unused imports

class SignatureAndUsedPtr:
    signature: Signature
    usedptr: bool*  # used to detect unused imports


@public
class NamedConstant:
    name: byte[100]
    value: Constant

@public
class FileTypes:
    globals: GlobalVariable*
    nglobals: int
    constants: NamedConstant*
    nconstants: int
    available_types: TypeAndUsedPtr*
    n_available_types: int
    functions: SignatureAndUsedPtr*
    nfunctions: int

    def add_function(self, signature: Signature*, usedptr: bool*) -> None:
        self->functions = realloc(self->functions, sizeof(self->functions[0]) * (self->nfunctions + 1))
        assert self->functions != NULL
        self->functions[self->nfunctions++] = SignatureAndUsedPtr{signature = signature->copy(), usedptr = usedptr}

    def add_type(self, t: Type*, usedptr: bool*) -> None:
        self->available_types = realloc(self->available_types, sizeof(self->available_types[0]) * (self->n_available_types + 1))
        assert self->available_types != NULL
        self->available_types[self->n_available_types++] = TypeAndUsedPtr{type = t, usedptr = usedptr}

    def add_global_var(self, name: byte*, type: Type*, usedptr: bool*) -> GlobalVariable*:
        g = GlobalVariable{type = type, usedptr = usedptr}
        assert strlen(name) < sizeof g.name
        strcpy(g.name, name)

        self->globals = realloc(self->globals, sizeof(self->globals[0]) * (self->nglobals + 1))
        assert self->globals != NULL
        self->globals[self->nglobals++] = g
        return &self->globals[self->nglobals - 1]

    def add_constant(self, name: byte*, value: Constant*) -> NamedConstant*:
        self->constants = realloc(self->constants, sizeof(self->constants[0]) * (self->nconstants + 1))
        assert self->constants != NULL

        c = &self->constants[self->nconstants++]
        assert strlen(name) < sizeof(c->name)
        strcpy(c->name, name)
        c->value = value->copy()
        return c

    # This is safe to call if self has been zero-initialized.
    def free(self) -> None:
        for func = self->functions; func < &self->functions[self->nfunctions]; func++:
            func->signature.free()
        free(self->globals)
        free(self->available_types)
        free(self->functions)
        free(self->constants)

    def find_type(self, name: byte*) -> Type*:
        for t = self->available_types; t < &self->available_types[self->n_available_types]; t++:
            if strcmp(t->type->name, name) == 0:
                if t->usedptr != NULL:
                    *t->usedptr = True
                return t->type
        return NULL

    def find_function(self, name: byte*) -> Signature*:
        for f = self->functions; f < &self->functions[self->nfunctions]; f++:
            if strcmp(f->signature.name, name) == 0:
                if f->usedptr != NULL:
                    *f->usedptr = True
                return &f->signature
        return NULL

    def find_global_var(self, name: byte*) -> Type*:
        for var = self->globals; var < &self->globals[self->nglobals]; var++:
            if strcmp(var->name, name) == 0:
                if var->usedptr != NULL:
                    *var->usedptr = True
                return var->type
        return NULL

    # Note: For special constants like "WINDOWS" this returns NULL, be aware!!!
    def find_constant(self, name: byte*) -> Constant*:
        for c = self->constants; c < &self->constants[self->nconstants]; c++:
            if strcmp(c->name, name) == 0:
                return &c->value
        return NULL
