# See doc/compiler_internals/uvg.md

import "stdlib/str.jou"
import "stdlib/list.jou"
import "stdlib/mem.jou"

import "./uvg.jou"
import "./errors_and_warnings.jou"


enum VarStatus:
    Unvisited           # Don't know anything about this variable yet.
    Undefined           # Holds a garbage value.
    Defined             # This variable has been set to some non-garbage value.
    PossiblyUndefined   # Could hold a garbage or non-garbage value.
    DontAnalyze         # The "don't analyze" UVG instruction has been used.

const VAR_STATUS_COUNT: int = 5


if False:
    def print_statuses(uvg: Uvg*, statuses: VarStatus*) -> None:
        printf("VAR STATUSES:")
        for v = 0; v < uvg->varnames.len; v++:
            printf(" %s=", uvg->varnames[v])
            match statuses[v]:
                case VarStatus.Unvisited:
                    printf("{}")
                case VarStatus.Undefined:
                    printf("{u}")
                case VarStatus.Defined:
                    printf("{d}")
                case VarStatus.PossiblyUndefined:
                    printf("{u,d}")
                case VarStatus.DontAnalyze:
                    printf("-")
        printf("\n")


# a and b are statuses from different branches that both jump to the same block.
# Should have these properties:
#
#   merge(a, VarStatus.Unvisited) == a
#   merge(a, a) == a
#   merge(a, b) == merge(b, a)
#   merge(a, merge(b, c)) == merge(merge(a, b), c)
#
# In other words:
#   - It makes sense to merge an unordered collection of statuses.
#   - Unvisited corresponds with merging an empty set of statuses.
#   - Having the same status several times doesn't affect anything.
#
# Or even more simply: It makes sense to think of statuses as sets. Merging
# means taking the union of those sets. Unvisited is the empty set.
def merge(a: VarStatus, b: VarStatus) -> VarStatus:
    if a == b:
        return a

    if a == VarStatus.DontAnalyze or b == VarStatus.DontAnalyze:
        return VarStatus.DontAnalyze

    if a == VarStatus.Unvisited:
        return b
    if b == VarStatus.Unvisited:
        return a

    assert a == VarStatus.Undefined or a == VarStatus.Defined or a == VarStatus.PossiblyUndefined
    assert b == VarStatus.Undefined or b == VarStatus.Defined or b == VarStatus.PossiblyUndefined
    assert a != b
    return VarStatus.PossiblyUndefined


# TODO: Not possible to use VAR_STATUS_COUNT as array size yet
global merge_table: VarStatus[5][5]
global merge_table_ready: bool

def init_merge_table() -> None:
    assert VAR_STATUS_COUNT == 5

    if merge_table_ready:
        return

    for a = 0; a < VAR_STATUS_COUNT; a++:
        for b = 0; b < VAR_STATUS_COUNT; b++:
            merge_table[a][b] = merge(a as VarStatus, b as VarStatus)

    merge_table_ready = True


def build_statuses_at_end_before_analyzing(uvg: Uvg*) -> VarStatus**:
    # statuses_at_end[b][v] = status of variable v at end of block b
    statuses_at_end: VarStatus** = malloc(sizeof(statuses_at_end[0]) * uvg->blocks.len)
    assert statuses_at_end != NULL
    for b = 0; b < uvg->blocks.len; b++:
        statuses_at_end[b] = malloc(sizeof(statuses_at_end[b][0]) * uvg->varnames.len)
        if uvg->varnames.len != 0:
            assert statuses_at_end[b] != NULL
        for v = 0; v < uvg->varnames.len; v++:
            statuses_at_end[b][v] = VarStatus.Unvisited
    return statuses_at_end


def build_statuses_at_start_of_block(uvg: Uvg*, statuses_at_end: VarStatus**, block: UvgBlock*) -> VarStatus*:
    n = uvg->varnames.len
    if n == 0:
        return NULL

    statuses: VarStatus* = malloc(sizeof(statuses[0]) * n)
    assert statuses != NULL

    if block == uvg->blocks.ptr[0]:
        # The start block, everything is initially undefined
        for v = 0; v < n; v++:
            statuses[v] = VarStatus.Undefined
    else:
        for v = 0; v < n; v++:
            statuses[v] = VarStatus.Unvisited

    # Merge statuses of source blocks that jump to the current block
    for b = 0; b < uvg->blocks.len; b++:
        if uvg->blocks.ptr[b]->jumps_to(block):
            # This function is O(n^2) but barely so, the following loop should be really fast in practice
            for v = 0; v < n; v++:
                statuses[v] = merge_table[statuses_at_end[b][v] as int][statuses[v] as int]

    return statuses


def handle_missing_return_statement(uvg: Uvg*, location: Location) -> None:
    # Check if there is a "return" statement that user wrote.
    n = 0
    for b = 0; b < uvg->blocks.len; b++:
        if uvg->blocks.ptr[b]->terminator.kind == UvgTerminatorKind.Return:
            n++

    # There is always automatically generated "return" statement at the end of the function.
    assert n >= 1

    msg: byte[500]
    if n == 1:
        # There are no return statements. Tell user to add them and why they are needed.
        snprintf(
            msg, sizeof(msg),
            "%s '%s' must return a value, because it is defined with '-> %s'",
            uvg->signature->function_or_method(),
            uvg->signature->name,
            uvg->signature->return_type->name,
        )
        fail(location, msg)
    else:
        # There are some return statements but they don't cover all cases.
        snprintf(
            msg, sizeof(msg),
            "%s '%s' doesn't seem to return a value in all cases",
            uvg->signature->function_or_method(),
            uvg->signature->name,
        )
        show_warning(location, msg)


def update_statuses_based_on_instructions(uvg: Uvg*, statuses: VarStatus*, block: UvgBlock*, warn: bool) -> None:
    msg: byte[500]

    for ins = block->instructions.ptr; ins < block->instructions.end(); ins++:
        match ins->kind:
            case UvgInstructionKind.Set:
                if statuses[ins->var] != VarStatus.DontAnalyze:
                    statuses[ins->var] = VarStatus.Defined
            case UvgInstructionKind.Use:
                if warn and uvg->varnames.ptr[ins->var][0] != '$':
                    match statuses[ins->var]:
                        case VarStatus.Defined | VarStatus.DontAnalyze:
                            pass
                        case VarStatus.Undefined:
                            if strcmp(uvg->varnames.ptr[ins->var], "return") == 0:
                                handle_missing_return_statement(uvg, ins->location)
                            else:
                                snprintf(msg, sizeof(msg), "the value of '%s' is undefined", uvg->varnames.ptr[ins->var])
                                show_warning(ins->location, msg)
                        case VarStatus.PossiblyUndefined:
                            if strcmp(uvg->varnames.ptr[ins->var], "return") == 0:
                                handle_missing_return_statement(uvg, ins->location)
                            else:
                                snprintf(msg, sizeof(msg), "the value of '%s' may be undefined", uvg->varnames.ptr[ins->var])
                                show_warning(ins->location, msg)
                        case VarStatus.Unvisited:
                            pass
            case UvgInstructionKind.Statement:
                pass
            case UvgInstructionKind.DontAnalyze:
                statuses[ins->var] = VarStatus.DontAnalyze


def analyze_block(uvg: Uvg*, statuses_at_end: VarStatus**, blockidx: int, warn: bool) -> bool:
    statuses = build_statuses_at_start_of_block(uvg, statuses_at_end, uvg->blocks.ptr[blockidx])
    update_statuses_based_on_instructions(uvg, statuses, uvg->blocks.ptr[blockidx], warn)

    if memcmp(statuses, statuses_at_end[blockidx], sizeof(statuses[0]) * uvg->varnames.len) != 0:
        # Statuses changed
        assert not warn  # warnings should be applied at the end when statuses are stable
        free(statuses_at_end[blockidx])
        statuses_at_end[blockidx] = statuses
        return True
    else:
        free(statuses)
        return False


def find_true(arr: bool*, len: long) -> int:
    for i = 0; i < len; i++:
        if arr[i]:
            return i
    return -1


def show_block_unreachable_warning(b: UvgBlock*) -> bool:
    for ins = b->instructions.ptr; ins < b->instructions.end(); ins++:
        if ins->kind == UvgInstructionKind.Statement:
            show_warning(ins->location, "this code will never run")
            return True
    return False


# This function sets marked[i] to True whenever blocks[i] is reachable from blocks[start].
# Block A is reachable from block B, if B may jump (perhaps through other blocks) into A.
#
# If bidirectional is True, either block may be the one that jumps into the other.
# This is used to show only one unreachable warning when an unreachable part of code
# consists of many blocks.
#
# If ignore is not NULL and ignore[i] is True, we pretend that blocks[i] doesn't exist.
def mark_reachable_blocks(blocks: List[UvgBlock*], ignore: bool*, marked: bool*, bidirectional: bool, start: int) -> None:
    assert 0 <= start and start < blocks.len
    assert ignore == NULL or not ignore[start]
    assert not marked[start]
    marked[start] = True
    for i = 0; i < blocks.len; i++:
        if (
            (ignore == NULL or not ignore[i])
            and not marked[i]
            and (blocks.ptr[start]->jumps_to(blocks.ptr[i]) or (bidirectional and blocks.ptr[i]->jumps_to(blocks.ptr[start])))
        ):
            mark_reachable_blocks(blocks, ignore, marked, bidirectional, i)


@public
def uvg_analyze(uvg: Uvg*) -> None:
    init_merge_table()

    assert uvg->blocks.len >= 1  # must have at least start block

    queue: bool* = calloc(sizeof(queue[0]), uvg->blocks.len)
    reachable: bool* = calloc(sizeof(reachable[0]), uvg->blocks.len)
    u_warned: bool* = calloc(sizeof(u_warned[0]), uvg->blocks.len)
    assert queue != NULL
    assert reachable != NULL
    assert u_warned != NULL

    mark_reachable_blocks(uvg->blocks, NULL, reachable, False, 0)

    # Analyze blocks until we arrive at a stable state where variable statuses don't change.
    statuses_at_end = build_statuses_at_end_before_analyzing(uvg)
    queue[0] = True
    while True:
        blockidx = find_true(queue, uvg->blocks.len)
        if blockidx == -1:
            break
        queue[blockidx] = False
        if analyze_block(uvg, statuses_at_end, blockidx, False):
            for b = 0; b < uvg->blocks.len; b++:
                if uvg->blocks.ptr[blockidx]->jumps_to(uvg->blocks.ptr[b]):
                    queue[b] = True

    for b = 0; b < uvg->blocks.len; b++:
        if reachable[b]:
            analyze_block(uvg, statuses_at_end, b, True)
        elif not u_warned[b]:
            # Attempt to show unreachable warning. Will fail if the block is
            # basically empty, then its unreachability doesn't matter.
            if show_block_unreachable_warning(uvg->blocks.ptr[b]):
                # Warning was shown. Do not show it for related unreachable blocks.
                mark_reachable_blocks(uvg->blocks, reachable, u_warned, True, b)

    free(queue)
    free(reachable)
    free(u_warned)
    for b = 0; b < uvg->blocks.len; b++:
        free(statuses_at_end[b])
    free(statuses_at_end)
