import "stdlib/str.jou"
import "stdlib/list.jou"
import "stdlib/mem.jou"
import "stdlib/io.jou"
import "stdlib/process.jou"

import "./command_line_args.jou"

if WINDOWS:
    import "./paths.jou"
else:
    import "../config.jou"


def quote_paths(paths: List[byte*]) -> byte*:
    size = 10L
    for p = paths.ptr; p < paths.end(); p++:
        size += strlen(*p) + 10

    result: byte* = malloc(size)
    strcpy(result, "")
    for p = paths.ptr; p < paths.end(); p++:
        # TODO: quote better?
        strcat(result, " \"")
        strcat(result, *p)
        strcat(result, "\"")

    return result


# On Linux, we prefer LLVM tools (clang and llvm-ar) of the same LLVM version.
# On Windows, the tools are in mingw64/bin folder.
if WINDOWS:
    def get_mingw_command(exe_filename: byte*, args: byte*) -> byte*:
        # Assume mingw with clang has been downloaded with windows_setup.sh.
        #
        # During the bootstrapping, the location of mingw is something
        # like ../../../mingw64 relative to jou.exe location, and it is passed
        # with an environment variable.
        mingw_dir = getenv("JOU_MINGW_DIR")
        if mingw_dir != NULL:
            # Environment variable given
            mingw_dir = strdup(mingw_dir)
        else:
            # Assume the folder that contains jou.exe also contains mingw64
            jou_exe = find_current_executable()
            asprintf(&mingw_dir, "%s\\mingw64", dirname(jou_exe))
            free(jou_exe)

        result: byte*

        # Windows quoting is weird. The outermost quotes get stripped here.
        asprintf(&result, "\"\"%s\\bin\\%s\" %s\"", exe_filename, args)


@public
def run_linker(objpaths: List[byte*], exepath: byte*, linker_flags: byte*) -> None:
    quoted_object_files = quote_paths(objpaths)

    args: byte*
    asprintf(&args, "%s -o \"%s\" %s", quoted_object_files, exepath, linker_flags)
    free(quoted_object_files)

    command: byte*
    if WINDOWS:
        # Could also use clang, but gcc has less dependencies so we can make the Windows zips smaller.
        command = get_mingw_command("gcc.exe", args)
    else:
        asprintf(&command, "'%s' %s", JOU_CLANG_PATH, args)
    free(args)

    if command_line_args.verbosity >= 1:
        printf("Running linker: %s\n", command)

    if system(command) != 0:
        exit(1)
    free(command)


@public
def run_exe(exepath: byte*, valgrind: bool) -> int:
    command: byte*
    if WINDOWS:
        asprintf(&command, "\"%s\"", exepath)
        while strstr(command, "/") != NULL:
            *strstr(command, "/") = '\\'
    else:
        if valgrind:
            asprintf(&command, "valgrind -q --leak-check=full --show-leak-kinds=all --error-exitcode=1 '%s'", exepath)
        else:
            asprintf(&command, "'%s'", exepath)

    # Make sure that everything else shows up before the user's prints.
    fflush(stdout)
    fflush(stderr)

    ret = system(command)
    free(command)

    if ret == 0:
        return 0  # success
    else:
        return 1  # TODO: extract actual error code / return value
