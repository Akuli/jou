# This file implements a builder that can build either LLVM or UVG, depending
# on which is needed.
#
# Ideally there would be inheritance, so that you could simply pass in
# whichever builder you need to the code that visits AST and calls methods on
# the builder, but Jou has no way to do inheritance yet.

import "stdlib/mem.jou"

import "../errors_and_warnings.jou"
import "../constants.jou"
import "../llvm.jou"
import "../types.jou"
import "../uvg.jou"
import "./llvm_builder.jou"
import "./uvg_builder.jou"


@public
class EitherBuilderValue:
    lvalue: LBuilderValue
    uvalue: int


@public
class EitherBuilderBlock:
    lblock: LLVMBasicBlock*
    ublock: UvgBlock*  # funny naming :)


@public
class EitherBuilder:
    lbuilder: LBuilder*  # may be NULL
    ubuilder: UBuilder*  # may be NULL

    def begin_function(self, sig: Signature*, public: bool) -> None:
        if self->lbuilder != NULL:
            self->lbuilder->begin_function(sig, public)
        if self->ubuilder != NULL:
            self->ubuilder->begin_function(sig, public)

    def end_function(self) -> None:
        if self->lbuilder != NULL:
            self->lbuilder->end_function()
        if self->ubuilder != NULL:
            self->ubuilder->end_function()

    def set_location(self, location: Location) -> None:
        if self->lbuilder != NULL:
            self->lbuilder->set_location(location)
        if self->ubuilder != NULL:
            self->ubuilder->set_location(location)

    # Allocates enough stack space in the function to hold a value of given type.
    # Returns a pointer to the stack space.
    # If allocated stack memory is not a local variable, varname must be NULL.
    def stack_alloc(self, t: Type*, varname: byte*) -> EitherBuilderValue:
        result = EitherBuilderValue{}
        if self->lbuilder != NULL:
            result.lvalue = self->lbuilder->stack_alloc(t, varname)
        if self->ubuilder != NULL:
            result.uvalue = self->ubuilder->stack_alloc(t, varname)
        return result

    # *ptr = value
    def set_ptr(self, ptr: EitherBuilderValue, value: EitherBuilderValue) -> None:
        if self->lbuilder != NULL:
            self->lbuilder->set_ptr(ptr.lvalue, value.lvalue)
        else:
            self->ubuilder->set_ptr(ptr.uvalue, value.uvalue)

    # *ptr
    def dereference(self, ptr: EitherBuilderValue) -> EitherBuilderValue:
        result = EitherBuilderValue{}
        if self->lbuilder != NULL:
            result.lvalue = self->lbuilder->dereference(ptr.lvalue)
        if self->ubuilder != NULL:
            result.uvalue = self->ubuilder->dereference(ptr.uvalue)
        return result

    # Returns &ptr[index]
    def indexed_pointer(self, ptr: EitherBuilderValue, index: EitherBuilderValue) -> EitherBuilderValue:
        result = EitherBuilderValue{}
        if self->lbuilder != NULL:
            result.lvalue = self->lbuilder->indexed_pointer(ptr.lvalue, index.lvalue)
        if self->ubuilder != NULL:
            result.uvalue = self->ubuilder->indexed_pointer(ptr.uvalue, index.uvalue)
        return result

    # Returns &ptr->field
    def class_field_pointer(self, ptr: EitherBuilderValue, field_name: byte*) -> EitherBuilderValue:
        result = EitherBuilderValue{}
        if self->lbuilder != NULL:
            result.lvalue = self->lbuilder->class_field_pointer(ptr.lvalue, field_name)
        if self->ubuilder != NULL:
            result.uvalue = self->ubuilder->class_field_pointer(ptr.uvalue, field_name)
        return result

    # Returns &global_variable. Type needs to be passed in because a new builder
    # unaware of global variables is created for each function.
    def global_var_ptr(self, name: byte*, var_type: Type*) -> EitherBuilderValue:
        result = EitherBuilderValue{}
        if self->lbuilder != NULL:
            result.lvalue = self->lbuilder->global_var_ptr(name, var_type)
        if self->ubuilder != NULL:
            result.uvalue = self->ubuilder->global_var_ptr(name, var_type)
        return result

    # Returns the i'th argument given to function
    def get_argument(self, i: int, argtype: Type*) -> EitherBuilderValue:
        result = EitherBuilderValue{}
        if self->lbuilder != NULL:
            result.lvalue = self->lbuilder->get_argument(i, argtype)
        if self->ubuilder != NULL:
            result.uvalue = self->ubuilder->get_argument(i, argtype)
        return result

    # Function or method call. If method, self with the correct type must be included in args.
    def call(self, sig: Signature*, args: EitherBuilderValue*, nargs: int) -> EitherBuilderValue:
        result = EitherBuilderValue{}
        if self->lbuilder != NULL:
            largs: LBuilderValue* = malloc(sizeof(largs[0]) * nargs)
            assert largs != NULL
            for i = 0; i < nargs; i++:
                largs[i] = args[i].lvalue
            result.lvalue = self->lbuilder->call(sig, largs, nargs)
            free(largs)
        if self->ubuilder != NULL:
            uargs: int* = malloc(sizeof(uargs[0]) * nargs)
            assert uargs != NULL
            for i = 0; i < nargs; i++:
                uargs[i] = args[i].uvalue
            result.uvalue = self->ubuilder->call(sig, uargs, nargs)
            free(uargs)
        return result

    # string as array of bytes
    def string_array(self, s: byte*, array_size: int) -> EitherBuilderValue:
        result = EitherBuilderValue{}
        if self->lbuilder != NULL:
            result.lvalue = self->lbuilder->string_array(s, array_size)
        if self->ubuilder != NULL:
            result.uvalue = self->ubuilder->string_array(s, array_size)
        return result

    # string as '\0' terminated pointer
    def string(self, s: byte*) -> EitherBuilderValue:
        result = EitherBuilderValue{}
        if self->lbuilder != NULL:
            result.lvalue = self->lbuilder->string(s)
        if self->ubuilder != NULL:
            result.uvalue = self->ubuilder->string(s)
        return result

    def boolean(self, b: bool) -> EitherBuilderValue:
        result = EitherBuilderValue{}
        if self->lbuilder != NULL:
            result.lvalue = self->lbuilder->boolean(b)
        if self->ubuilder != NULL:
            result.uvalue = self->ubuilder->boolean(b)
        return result

    def integer(self, t: Type*, value: long) -> EitherBuilderValue:
        result = EitherBuilderValue{}
        if self->lbuilder != NULL:
            result.lvalue = self->lbuilder->integer(t, value)
        if self->ubuilder != NULL:
            result.uvalue = self->ubuilder->integer(t, value)
        return result

    def float_or_double(self, t: Type*, string: byte*) -> EitherBuilderValue:
        result = EitherBuilderValue{}
        if self->lbuilder != NULL:
            result.lvalue = self->lbuilder->float_or_double(t, string)
        if self->ubuilder != NULL:
            result.uvalue = self->ubuilder->float_or_double(t, string)
        return result

    def zero_of_type(self, t: Type*) -> EitherBuilderValue:
        result = EitherBuilderValue{}
        if self->lbuilder != NULL:
            result.lvalue = self->lbuilder->zero_of_type(t)
        if self->ubuilder != NULL:
            result.uvalue = self->ubuilder->zero_of_type(t)
        return result

    def enum_member(self, t: Type*, name: byte*) -> EitherBuilderValue:
        result = EitherBuilderValue{}
        if self->lbuilder != NULL:
            result.lvalue = self->lbuilder->enum_member(t, name)
        if self->ubuilder != NULL:
            result.uvalue = self->ubuilder->enum_member(t, name)
        return result

    # TODO: delete this?
    def constant(self, c: Constant*) -> EitherBuilderValue:
        match c->kind:
            case ConstantKind.Bool:
                return self->boolean(c->boolean)
            case ConstantKind.Integer:
                return self->integer(c->get_type(), c->integer.value)
            case ConstantKind.Float | ConstantKind.Double:
                return self->float_or_double(c->get_type(), c->double_or_float_text)
            case ConstantKind.Null:
                return self->zero_of_type(voidPtrType)
            case ConstantKind.String:
                return self->string(c->str)
            case ConstantKind.EnumMember:
                return self->enum_member(c->get_type(), c->get_type()->enummembers.names[c->enum_member.memberidx])
        assert False

    # a + b
    def add(self, a: EitherBuilderValue, b: EitherBuilderValue) -> EitherBuilderValue:
        result = EitherBuilderValue{}
        if self->lbuilder != NULL:
            result.lvalue = self->lbuilder->add(a.lvalue, b.lvalue)
        if self->ubuilder != NULL:
            result.uvalue = self->ubuilder->add(a.uvalue, b.uvalue)
        return result

    # a - b
    def sub(self, a: EitherBuilderValue, b: EitherBuilderValue) -> EitherBuilderValue:
        result = EitherBuilderValue{}
        if self->lbuilder != NULL:
            result.lvalue = self->lbuilder->sub(a.lvalue, b.lvalue)
        if self->ubuilder != NULL:
            result.uvalue = self->ubuilder->sub(a.uvalue, b.uvalue)
        return result

    # a * b
    def mul(self, a: EitherBuilderValue, b: EitherBuilderValue) -> EitherBuilderValue:
        result = EitherBuilderValue{}
        if self->lbuilder != NULL:
            result.lvalue = self->lbuilder->mul(a.lvalue, b.lvalue)
        if self->ubuilder != NULL:
            result.uvalue = self->ubuilder->mul(a.uvalue, b.uvalue)
        return result

    # a / b
    def div(self, a: EitherBuilderValue, b: EitherBuilderValue) -> EitherBuilderValue:
        result = EitherBuilderValue{}
        if self->lbuilder != NULL:
            result.lvalue = self->lbuilder->div(a.lvalue, b.lvalue)
        if self->ubuilder != NULL:
            result.uvalue = self->ubuilder->div(a.uvalue, b.uvalue)
        return result

    # a % b
    def mod(self, a: EitherBuilderValue, b: EitherBuilderValue) -> EitherBuilderValue:
        result = EitherBuilderValue{}
        if self->lbuilder != NULL:
            result.lvalue = self->lbuilder->mod(a.lvalue, b.lvalue)
        if self->ubuilder != NULL:
            result.uvalue = self->ubuilder->mod(a.uvalue, b.uvalue)
        return result

    # a == b
    def eq(self, a: EitherBuilderValue, b: EitherBuilderValue) -> EitherBuilderValue:
        result = EitherBuilderValue{}
        if self->lbuilder != NULL:
            result.lvalue = self->lbuilder->eq(a.lvalue, b.lvalue)
        if self->ubuilder != NULL:
            result.uvalue = self->ubuilder->eq(a.uvalue, b.uvalue)
        return result

    # a < b
    def lt(self, a: EitherBuilderValue, b: EitherBuilderValue) -> EitherBuilderValue:
        result = EitherBuilderValue{}
        if self->lbuilder != NULL:
            result.lvalue = self->lbuilder->lt(a.lvalue, b.lvalue)
        if self->ubuilder != NULL:
            result.uvalue = self->ubuilder->lt(a.uvalue, b.uvalue)
        return result

    # not value
    def not_(self, value: EitherBuilderValue) -> EitherBuilderValue:
        result = EitherBuilderValue{}
        if self->lbuilder != NULL:
            result.lvalue = self->lbuilder->not_(value.lvalue)
        if self->ubuilder != NULL:
            result.uvalue = self->ubuilder->not_(value.uvalue)
        return result

    # sizeof(any value of given type)
    def size_of(self, t: Type*) -> EitherBuilderValue:
        result = EitherBuilderValue{}
        if self->lbuilder != NULL:
            result.lvalue = self->lbuilder->size_of(t)
        if self->ubuilder != NULL:
            result.uvalue = self->ubuilder->size_of(t)
        return result

    # memset(ptr, 0, sizeof(*ptr))
    def memset_to_zero(self, ptr: EitherBuilderValue) -> None:
        if self->lbuilder != NULL:
            self->lbuilder->memset_to_zero(ptr.lvalue)
        if self->ubuilder != NULL:
            self->ubuilder->memset_to_zero(ptr.uvalue)

    # value as to
    def cast(self, value: EitherBuilderValue, to: Type*) -> EitherBuilderValue:
        result = EitherBuilderValue{}
        if self->lbuilder != NULL:
            result.lvalue = self->lbuilder->cast(value.lvalue, to)
        if self->ubuilder != NULL:
            result.uvalue = self->ubuilder->cast(value.uvalue, to)
        return result

    # Blocks are used to implement e.g. if statements and loops.
    def add_block(self) -> EitherBuilderBlock:
        result = EitherBuilderBlock{}
        if self->lbuilder != NULL:
            result.lblock = self->lbuilder->add_block()
        if self->ubuilder != NULL:
            result.ublock = self->ubuilder->add_block()
        return result

    # Decide which block will contain the resulting instructions.
    def set_current_block(self, block: EitherBuilderBlock) -> None:
        if self->lbuilder != NULL:
            self->lbuilder->set_current_block(block.lblock)
        if self->ubuilder != NULL:
            self->ubuilder->set_current_block(block.ublock)

    # Conditional branch:
    #
    #   if cond:
    #       then
    #   else:
    #       otherwise
    #
    # This terminates the current block and hence leaves the builder in a
    # "no current block" state, i.e. you must call set_current_block()
    # before the builder is usable again.
    def branch(self, cond: EitherBuilderValue, then: EitherBuilderBlock, otherwise: EitherBuilderBlock) -> None:
        if self->lbuilder != NULL:
            self->lbuilder->branch(cond.lvalue, then.lblock, otherwise.lblock)
        if self->ubuilder != NULL:
            self->ubuilder->branch(cond.uvalue, then.ublock, otherwise.ublock)

    # Go to the block. Similar to branch() but no condition. LLVM calls this
    # "unconditional branch", which IMO doesn't make sense because it always
    # jumps and hence doesn't branch.
    #
    # This terminates the current block and hence leaves the builder in a
    # "no current block" state, i.e. you must call set_current_block()
    # before the builder is usable again.
    def jump(self, next_block: EitherBuilderBlock) -> None:
        if self->lbuilder != NULL:
            self->lbuilder->jump(next_block.lblock)
        if self->ubuilder != NULL:
            self->ubuilder->jump(next_block.ublock)

    # Add an instruction that should never run.
    # May be used by optimizer, but also tells LLVM that the block ends here.
    def unreachable(self) -> None:
        if self->lbuilder != NULL:
            self->lbuilder->unreachable()
        if self->ubuilder != NULL:
            self->ubuilder->unreachable()

    # Return from function/method. Value should be NULL if the function is '-> None'.
    def ret(self, value: EitherBuilderValue*) -> None:
        if self->lbuilder != NULL:
            if value == NULL:
                self->lbuilder->ret(NULL)
            else:
                self->lbuilder->ret(&value->lvalue)
        if self->ubuilder != NULL:
            if value == NULL:
                self->ubuilder->ret(NULL)
            else:
                self->ubuilder->ret(&value->uvalue)
