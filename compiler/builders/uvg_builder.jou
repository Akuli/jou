import "../uvg.jou"
import "../types.jou"


# Not named LLVMBuilder because that is the name of LLVM's thing.
class UBuilder:
    def begin_function(self, sig: Signature*, public: bool) -> None:
        assert False  # TODO

    def end_function(self) -> None:
        assert False  # TODO

    def stack_alloc(self, t: Type*) -> int:
        assert False  # TODO

    def set_ptr(self, ptr: int, value: int) -> None:
        assert False  # TODO

    def dereference(self, ptr: int) -> int:
        assert False  # TODO

    def indexed_pointer(self, ptr: int, index: int) -> int:
        assert False  # TODO

    def class_field_pointer(self, ptr: int, field_name: byte*) -> int:
        assert False  # TODO

    def global_var_ptr(self, name: byte*, var_type: Type*) -> int:
        assert False  # TODO

    def get_argument(self, i: int, argtype: Type*) -> int:
        assert False  # TODO

    def call(self, sig: Signature*, args: int*, nargs: int) -> int:
        assert False  # TODO

    def string_array(self, s: byte*, array_size: int) -> int:
        assert False  # TODO

    def string(self, s: byte*) -> int:
        assert False  # TODO

    def boolean(self, b: bool) -> int:
        assert False  # TODO

    def integer(self, t: Type*, value: long) -> int:
        assert False  # TODO

    def float_or_double(self, t: Type*, string: byte*) -> int:
        assert False  # TODO

    def zero_of_type(self, t: Type*) -> int:
        assert False  # TODO

    def enum_member(self, t: Type*, name: byte*) -> int:
        assert False  # TODO

    # a + b
    def add(self, a: int, b: int) -> int:
        assert False  # TODO

    # a - b
    def sub(self, a: int, b: int) -> int:
        assert False  # TODO

    # a * b
    def mul(self, a: int, b: int) -> int:
        assert False  # TODO

    # a / b
    def div(self, a: int, b: int) -> int:
        assert False  # TODO

    # a % b
    def mod(self, a: int, b: int) -> int:
        assert False  # TODO

    # a == b
    def eq(self, a: int, b: int) -> int:
        assert False  # TODO

    # a < b
    def lt(self, a: int, b: int) -> int:
        assert False  # TODO

    # not value
    def not_(self, value: int) -> int:
        assert False  # TODO

    # sizeof(any value of given type)
    def size_of(self, t: Type*) -> int:
        assert False  # TODO

    # memset(ptr, 0, sizeof(*ptr))
    def memset_to_zero(self, ptr: int) -> None:
        assert False  # TODO

    # value as to
    def cast(self, value: int, to: Type*) -> int:
        assert False  # TODO

    # Blocks are used to implement e.g. if statements and loops.
    def add_block(self) -> UvgBlock*:
        assert False  # TODO

    # Decide which block will contain the resulting instructions.
    def set_current_block(self, block: UvgBlock*) -> None:
        assert False  # TODO

    def branch(self, cond: int, then: UvgBlock*, otherwise: UvgBlock*) -> None:
        assert False  # TODO

    def jump(self, next_block: UvgBlock*) -> None:
        assert False  # TODO

    def unreachable(self) -> None:
        assert False  # TODO

    def ret(self, value: int*) -> None:
        assert False  # TODO
