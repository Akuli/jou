import "stdlib/mem.jou"

import "../uvg_analyze.jou"
import "../ast.jou"
import "../errors_and_warnings.jou"
import "../types.jou"
import "../uvg.jou"
import "./ast_to_builder.jou"
import "./either_builder.jou"


# Within this class, we use the following special UVG variable IDs.
# TODO: ideally these would be constants, not functions.

# A value that is not a pointer, or is some pointer that we don't keep track of.
def ANONYMOUS_VALUE_ID() -> int:
    return -1

# Boolean value known to be true at compile time.
def TRUE_ID() -> int:
    return -2

# Boolean value known to be false at compile time.
def FALSE_ID() -> int:
    return -3


class UBuilder:
    uvg: Uvg
    current_block: UvgBlock*
    location: Location
    warn_unreachable: bool

    def begin_function(self, sig: Signature*, public: bool) -> None:
        self->uvg.signature = sig
        self->current_block = self->uvg.add_block()
        self->warn_unreachable = True

    def end_function(self) -> None:
        self->warn_unreachable = False
        self->ret(NULL)
        self->warn_unreachable = True
        self->current_block = NULL
        self->location = Location{}

    def set_location(self, location: Location) -> None:
        self->location = location

    def add_instruction(self, ins: UvgInstruction) -> None:
        assert ins.var >= 0

        assert self->location.path != NULL
        assert self->location.lineno != 0
        ins.location = self->location
        ins.warn_unreachable = self->warn_unreachable

        b = self->current_block
        assert b != NULL

        b->instructions = realloc(b->instructions, sizeof(b->instructions[0]) * (b->ninstructions + 1))
        assert b->instructions != NULL
        b->instructions[b->ninstructions++] = ins

    def use(self, var: int) -> None:
        if var >= 0:
            self->add_instruction(UvgInstruction{kind = UvgInstructionKind.Use, var = var})

    def set(self, var: int) -> None:
        if var >= 0:
            self->add_instruction(UvgInstruction{kind = UvgInstructionKind.Set, var = var})

    def dont_analyze(self, var: int) -> None:
        if var >= 0:
            self->add_instruction(UvgInstruction{kind = UvgInstructionKind.DontAnalyze, var = var})

    def stack_alloc(self, t: Type*, varname: byte*) -> int:
        if varname != NULL:
            # Currently the UVG does not support multiple variables with the same name.
            assert not self->uvg.has_local_var(varname)
        return self->uvg.get_local_var_ptr(varname)

    def set_ptr(self, ptr: int, value: int) -> None:
        self->dont_analyze(value)
        self->set(ptr)

    def dereference(self, ptr: int) -> int:
        self->use(ptr)
        return ANONYMOUS_VALUE_ID()

    def indexed_pointer(self, ptr: int, index: int) -> int:
        self->dont_analyze(ptr)
        return ANONYMOUS_VALUE_ID()

    def class_field_pointer(self, ptr: int, field_name: byte*) -> int:
        self->dont_analyze(ptr)
        return ANONYMOUS_VALUE_ID()

    def global_var_ptr(self, name: byte*, var_type: Type*) -> int:
        return ANONYMOUS_VALUE_ID()

    def get_argument(self, i: int, argtype: Type*) -> int:
        return ANONYMOUS_VALUE_ID()

    def call(self, sig: Signature*, args: int*, nargs: int) -> int:
        for i = 0; i < nargs; i++:
            self->dont_analyze(args[i])
        return ANONYMOUS_VALUE_ID()

    def string_array(self, s: byte*, array_size: int) -> int:
        return ANONYMOUS_VALUE_ID()

    def string(self, s: byte*) -> int:
        return ANONYMOUS_VALUE_ID()

    def boolean(self, b: bool) -> int:
        if b:
            return TRUE_ID()
        else:
            return FALSE_ID()

    def integer(self, t: Type*, value: long) -> int:
        return ANONYMOUS_VALUE_ID()

    def float_or_double(self, t: Type*, string: byte*) -> int:
        return ANONYMOUS_VALUE_ID()

    def zero_of_type(self, t: Type*) -> int:
        return ANONYMOUS_VALUE_ID()

    def enum_member(self, t: Type*, name: byte*) -> int:
        return ANONYMOUS_VALUE_ID()

    # a + b
    def add(self, a: int, b: int) -> int:
        return ANONYMOUS_VALUE_ID()

    # a - b
    def sub(self, a: int, b: int) -> int:
        return ANONYMOUS_VALUE_ID()

    # a * b
    def mul(self, a: int, b: int) -> int:
        return ANONYMOUS_VALUE_ID()

    # a / b
    def div(self, a: int, b: int) -> int:
        return ANONYMOUS_VALUE_ID()

    # a % b
    def mod(self, a: int, b: int) -> int:
        return ANONYMOUS_VALUE_ID()

    # a == b
    def eq(self, a: int, b: int) -> int:
        return ANONYMOUS_VALUE_ID()

    # a < b
    def lt(self, a: int, b: int) -> int:
        return ANONYMOUS_VALUE_ID()

    # not value
    def not_(self, value: int) -> int:
        match value:
            case TRUE_ID():
                return FALSE_ID()
            case FALSE_ID():
                return TRUE_ID()
            case _:
                return ANONYMOUS_VALUE_ID()

    # sizeof(any value of given type)
    def size_of(self, t: Type*) -> int:
        return ANONYMOUS_VALUE_ID()

    # memset(ptr, 0, sizeof(*ptr))
    def memset_to_zero(self, ptr: int) -> None:
        self->set(ptr)

    # value as to
    def cast(self, value: int, to: Type*) -> int:
        if to->is_pointer_type():
            # Needed to keep track of pointers to local variables, implicit casts are basically everywhere
            return value
        elif to == boolType and (value == TRUE_ID() or value == FALSE_ID()):
            # Thips helps with e.g. if statements and loops where condition is a literal "True".
            # There is an implicit cast from bool to bool.
            return value
        else:
            # e.g. cast pointer to long
            self->dont_analyze(value)
            return ANONYMOUS_VALUE_ID()

    # Blocks are used to implement e.g. if statements and loops.
    def add_block(self) -> UvgBlock*:
        return self->uvg.add_block()

    # Decide which block will contain the resulting instructions.
    def set_current_block(self, block: UvgBlock*) -> None:
        self->current_block = block

    def branch(self, cond: int, then: UvgBlock*, otherwise: UvgBlock*) -> None:
        match cond:
            case TRUE_ID():
                self->jump(then)
            case FALSE_ID():
                self->jump(otherwise)
            case _:
                assert self->current_block != NULL
                assert self->current_block->terminator.kind == UvgTerminatorKind.NotSet
                self->current_block->terminator = UvgTerminator{
                    kind = UvgTerminatorKind.Branch,
                    branch = UvgBranch{then = then, otherwise = otherwise},
                }
                self->current_block = NULL

    def jump(self, next_block: UvgBlock*) -> None:
        assert self->current_block != NULL
        assert self->current_block->terminator.kind == UvgTerminatorKind.NotSet
        self->current_block->terminator = UvgTerminator{
            kind = UvgTerminatorKind.Jump,
            jump_block = next_block,
        }
        self->current_block = NULL

    def unreachable(self) -> None:
        assert self->current_block != NULL
        assert self->current_block->terminator.kind == UvgTerminatorKind.NotSet
        self->current_block->terminator = UvgTerminator{kind = UvgTerminatorKind.Unreachable}
        self->current_block = NULL

    def ret(self, value: int*) -> None:
        if value != NULL:
            self->set(self->uvg.get_local_var_ptr("return"))

        if self->uvg.signature->returntype != NULL:
            self->use(self->uvg.get_local_var_ptr("return"))

        assert self->current_block != NULL
        assert self->current_block->terminator.kind == UvgTerminatorKind.NotSet
        self->current_block->terminator = UvgTerminator{kind = UvgTerminatorKind.Return}


enum UvgProcessing:
    Print
    Analyze


def do_processing(uvg: Uvg*, proc: UvgProcessing) -> None:
    match proc:
        case UvgProcessing.Print:
            uvg->print()
        case UvgProcessing.Analyze:
            uvg_analyze(uvg)


@public
def build_and_process_uvgs(ast: AstFile*, proc: UvgProcessing) -> None:
    builder = UBuilder{}
    builder_wrapper = EitherBuilder{ubuilder = &builder}

    for stmt = ast->body.statements; stmt < &ast->body.statements[ast->body.nstatements]; stmt++:
        match stmt->kind:
            case AstStatementKind.FunctionDef:
                feed_ast_to_builder(&stmt->function, stmt->location, &builder_wrapper)
                do_processing(&builder.uvg, proc)
                builder.uvg.free()
                memset(&builder.uvg, 0, sizeof(builder.uvg))
            case AstStatementKind.Class:
                for inner = stmt->classdef.body->statements; inner < &stmt->classdef.body->statements[stmt->classdef.body->nstatements]; inner++:
                    if inner->kind == AstStatementKind.MethodDef:
                        feed_ast_to_builder(&inner->method, inner->location, &builder_wrapper)
                        do_processing(&builder.uvg, proc)
                        builder.uvg.free()
                        memset(&builder.uvg, 0, sizeof(builder.uvg))
            case _:
                pass
