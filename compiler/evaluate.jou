import "stdlib/str.jou"
import "stdlib/list.jou"
import "stdlib/mem.jou"

import "./ast.jou"
import "./errors_and_warnings.jou"
import "./constants.jou"
import "./types.jou"


@public
def get_special_constant(name: byte*) -> int:
    match name with strcmp:
        case "WINDOWS":
            return WINDOWS as int
        case "MACOS":
            return MACOS as int
        case "NETBSD":
            return NETBSD as int
        case _:
            return -1


# Return values: 1=true 0=false -1=error
def evaluate_boolean_and_or(expr: AstExpression*, and_or: byte*) -> int:
    assert strcmp(and_or, "and") == 0 or strcmp(and_or, "or") == 0

    value: Constant
    if not evaluate_constant_expression(expr, &value):
        return -1

    if value.kind != ConstantKind.Bool:
        # Use the same error message as typecheck
        msg: byte[500]
        snprintf(msg, sizeof(msg), "'%s' only works with bools, not %s", and_or, value.get_type()->name)
        fail(expr->location, msg)

    return value.boolean as int


# Returns False if the expression is not a simple compile-time constant.
@public
def evaluate_constant_expression(expr: AstExpression*, result: Constant*) -> bool:
    msg: byte[500]

    match expr->kind:
        case AstExpressionKind.Constant:
            *result = expr->constant.copy()
            return True

        case AstExpressionKind.GetVariable:
            # Handle special constants like WINDOWS, MACOS, etc.
            val = get_special_constant(expr->varname)
            if val == -1:
                return False
            *result = Constant{kind = ConstantKind.Bool, boolean = (val == 1)}
            return True

        case AstExpressionKind.And:
            lhs = evaluate_boolean_and_or(&expr->operands[0], "and")
            rhs = evaluate_boolean_and_or(&expr->operands[1], "and")
            if lhs == -1 or rhs == -1:
                return False
            *result = Constant{kind = ConstantKind.Bool, boolean = (lhs == 1 and rhs == 1)}
            return True

        case AstExpressionKind.Or:
            lhs = evaluate_boolean_and_or(&expr->operands[0], "or")
            rhs = evaluate_boolean_and_or(&expr->operands[1], "or")
            if lhs == -1 or rhs == -1:
                return False
            *result = Constant{kind = ConstantKind.Bool, boolean = (lhs == 1 or rhs == 1)}
            return True

        case AstExpressionKind.Not:
            if not evaluate_constant_expression(&expr->operands[0], result):
                return False

            if result->kind != ConstantKind.Bool:
                # Error message is same as during type checking
                snprintf(msg, sizeof(msg), "value after 'not' must be a bool, not %s", result->get_type()->name)
                fail(expr->location, msg)

            result->boolean = not result->boolean
            return True

        case AstExpressionKind.Negate:
            if not evaluate_constant_expression(&expr->operands[0], result):
                return False

            # TODO: make this more general
            if result->get_type() != intType:
                return False

            # TODO: is casting to int and back necessary to get the right overflow behaviors?
            result->integer.value = -(result->integer.value as int)
            return True

        case _:
            return False


@public
def evaluate_array_length(expr: AstExpression*) -> int:
    # TODO: this should probably support longs
    c: Constant
    if evaluate_constant_expression(expr, &c) and c.get_type() == intType:
        return c.integer.value as int
    fail(expr->location, "cannot evaluate array length at compile time")


def choose_if_elif_branch(if_stmt: AstIfStatement*) -> List[AstStatement]*:
    cond: Constant

    # Return the first branch whose condition is true.
    # Return NULL if we fail to evaluate a condition and it must be checked at runtime.
    for p = if_stmt->if_and_elifs.ptr; p < if_stmt->if_and_elifs.end(); p++:
        if (not evaluate_constant_expression(&p->condition, &cond)) or cond.kind != ConstantKind.Bool:
            return NULL

        if cond.boolean:
            return &p->body

    # All conditions are known to be false.
    return &if_stmt->else_body


# Replaces the statement body->ptr[i] with statements from a given list.
def replace(body: List[AstStatement]*, i: int, new: List[AstStatement]) -> None:
    body->ptr[i].free()
    body->grow(body->len + new.len, sizeof(body->ptr[0]))

    # How many statements after index i we want to preserve
    nkeep = body->len - (i+1)

    # Delete body->ptr[i] and shift everything after it to their new place
    memmove(&body->ptr[i + new.len], &body->ptr[i+1], nkeep * sizeof(body->ptr[0]))

    # Put the new statements to their place.
    memcpy(&body->ptr[i], new.ptr, new.len * sizeof(new.ptr[0]))

    body->len += new.len - 1  # -1 for index i which was removed


def evaluate_if_statements_in_body(body: List[AstStatement]*, must_succeed: bool) -> None:
    # Must use indexes, because mutating the body may reallocate it to different memory location.
    for i = 0; i < body->len; i++:
        match body->ptr[i].kind:
            case AstStatementKind.If:
                if_stmt = &body->ptr[i].if_statement

                branch = choose_if_elif_branch(if_stmt)
                if branch == NULL and must_succeed:
                    fail(body->ptr[i].location, "cannot evaluate condition at compile time")

                if branch != NULL:
                    # The if/elif statement always takes the same branch.
                    # Replace the whole if/elif with that branch.
                    replacement = *branch
                    *branch = List[AstStatement]{}  # avoid double-free
                    replace(body, i, replacement)
                    free(replacement.ptr)
                    i--  # cancels i++ to do same index again, so that we handle nested if statements
                    continue

                # Recurse into inner if statements. Needed when compile-time if
                # statement is inside a runtime if statement.
                for p = if_stmt->if_and_elifs.ptr; p < if_stmt->if_and_elifs.end(); p++:
                    evaluate_if_statements_in_body(&p->body, False)
                evaluate_if_statements_in_body(&if_stmt->else_body, False)

            case AstStatementKind.WhileLoop:
                evaluate_if_statements_in_body(&body->ptr[i].while_loop.body, False)
            case AstStatementKind.ForLoop:
                evaluate_if_statements_in_body(&body->ptr[i].for_loop.body, False)
            case AstStatementKind.Class:
                evaluate_if_statements_in_body(&body->ptr[i].classdef.body, True)
            case AstStatementKind.FunctionDef:
                evaluate_if_statements_in_body(&body->ptr[i].function.body, False)
            case AstStatementKind.MethodDef:
                evaluate_if_statements_in_body(&body->ptr[i].method.body, False)
            case (
                AstStatementKind.ExpressionStatement
                | AstStatementKind.Link
                | AstStatementKind.Assert
                | AstStatementKind.Pass
                | AstStatementKind.Return
                | AstStatementKind.Match
                | AstStatementKind.Break
                | AstStatementKind.Continue
                | AstStatementKind.DeclareLocalVar
                | AstStatementKind.Assign
                | AstStatementKind.InPlaceAdd
                | AstStatementKind.InPlaceSub
                | AstStatementKind.InPlaceMul
                | AstStatementKind.InPlaceDiv
                | AstStatementKind.InPlaceMod
                | AstStatementKind.FunctionDeclare
                | AstStatementKind.Enum
                | AstStatementKind.GlobalVariableDeclare
                | AstStatementKind.GlobalVariableDef
                | AstStatementKind.Import
                | AstStatementKind.ClassField
                | AstStatementKind.ClassUnion
                | AstStatementKind.Const
            ):
                # these statements cannot contain if statements, no need to recurse inside
                pass


@public
def evaluate_compile_time_if_statements(file: AstFile*) -> None:
    evaluate_if_statements_in_body(&file->body, True)
