# Boring boilerplate code to free up data structures used in compilation.

import "stdlib/mem.jou"

import "./types.jou"
import "./typecheck/common.jou"

def free_file_types(ft: FileTypes*) -> None:
    for t = ft->owned_types; t < &ft->owned_types[ft->n_owned_types]; t++:
        free_type(*t)
    for func = ft->functions; func < &ft->functions[ft->nfunctions]; func++:
        func->signature.free()
    for fom = ft->fomtypes; fom < &ft->fomtypes[ft->nfomtypes]; fom++:
        for et = fom->expr_types; et < &fom->expr_types[fom->n_expr_types]; et++:
            free(*et)
        free(fom->expr_types)
        free(fom->locals)  # Don't free individual locals because they're owned by CFG now
        fom->signature.free()
    free(ft->globals)
    free(ft->types)
    free(ft->owned_types)
    free(ft->functions)
    free(ft->fomtypes)
