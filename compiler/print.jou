import "stdlib/io.jou"

import "./structs.jou"


def print_string(s: byte*, len: int) -> None:
    putchar('"')
    for i = 0; i < len or (len == -1 and s[i] != '\0'); i++:
        if 32 <= s[i] and s[i] <= 126:
            # printable ascii character
            putchar(s[i])
        elif s[i] == '\n':
            printf("\\n")
        else:
            printf("\\x%02x", s[i])     # TODO: \x is not yet recognized by the tokenizer
    putchar('"')


def print_constant(c: Constant*) -> None:
    if c->kind == ConstantKind::EnumMember:
        printf("enum member %d of %s", c->enum_member.memberidx, c->enum_member.enumtype->name)
    elif c->kind == ConstantKind::Bool:
        if c->boolean:
            printf("True")
        else:
            printf("False")
    elif c->kind == ConstantKind::Float:
        printf("float %s", c->double_or_float_text)
    elif c->kind == ConstantKind::Double:
        printf("double %s", c->double_or_float_text)
    elif c->kind == ConstantKind::Integer:
        if c->integer.is_signed:
            signed_or_unsigned = "signed"
        else:
            signed_or_unsigned = "unsigned"
        printf(
            "%lld (%d-bit %s)",
            c->integer.value,
            c->integer.size_in_bits,
            signed_or_unsigned,
        )
    elif c->kind == ConstantKind::Null:
        printf("NULL")
    elif c->kind == ConstantKind::String:
        print_string(c->str, -1)
    else:
        assert False
