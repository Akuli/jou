# This file is used to calculate 64-bit hashes. They are used to check whether
# source files have changed so that we need to recompile.
#
# The hash algorithm we use is FNV-1a:
# https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
# It is super easy to implement. We use the 64-bit variant to get a reasonably
# low probability for collisions.
#
# Of course, this is not cryptographically secure, but it doesn't matter for a
# compiler: if someone can place whatever they want into `jou_compiled`, you're
# doomed anyway :)

import "stdlib/io.jou"
import "stdlib/mem.jou"
import "stdlib/process.jou"
import "stdlib/str.jou"

import "./paths.jou"


# TODO: xor should be built in to language, not implemented here
def xor_bytes(a: byte, b: byte) -> byte:
    result = 0
    power_of_two = 1

    while a != 0 or b != 0:
        if a % 2 != b % 2:
            result += power_of_two
        a /= 2 as byte
        b /= 2 as byte
        power_of_two *= 2

    return result as byte


# Do not instantiate this as `Hash{}`, that uses wrong initial value.
# Use new_hash() function.
@public
class Hash:
    hash: uint64
    created_correctly: bool

    # Add data to hash
    def add_byte(self, b: byte) -> None:
        assert self->created_correctly  # If this fails, use new_hash() function
        (&self->hash as byte*)[0] = xor_bytes(self->hash as byte, b)
        self->hash *= 0x100_0000_01b3L as uint64

    def add_bytes(self, data: byte*, len: long) -> None:
        for i = 0L; i < len; i++:
            self->add_byte(data[i])

    def add_bool(self, b: bool) -> None:
        self->add_byte(b as byte)

    def add_int(self, i: int) -> None:
        self->add_bytes(&i as byte*, sizeof(i))

    def add_int64(self, i: int64) -> None:
        self->add_bytes(&i as byte*, sizeof(i))

    def add_uint64(self, i: uint64) -> None:
        self->add_bytes(&i as byte*, sizeof(i))

    def add_string(self, s: byte*) -> None:
        len = strlen(s)
        self->add_int64(len)
        self->add_bytes(s, len)


@public
def new_hash() -> Hash:
    h = 0 as uint64
    # Hash of empty data
    # Set value to 0xcbf29ce484222325 (assumes little endian)
    # TODO: not possible to put this in a const
    memcpy(&h, "\x25\x23\x22\x84\xe4\x9c\xf2\xcb", sizeof(h))
    return Hash{hash = h, created_correctly = True}


global cached_compiler_hash: Hash


# Returns a value that changes when the compiler is recompiled.
@public
def hash_of_compiler() -> Hash:
    if cached_compiler_hash.hash != 0:
        return cached_compiler_hash

    path = find_current_executable()
    f = fopen(path, "rb")
    free(path)
    if f == NULL:
        ok = False
    else:
        cached_compiler_hash = new_hash()
        buf: byte[4096]
        fail = False
        while True:
            n = fread(buf, 1, sizeof(buf), f)
            if n == 0:
                break
            cached_compiler_hash.add_bytes(buf, n)
        ok = (ferror(f) == 0)
        fclose(f)

    if not ok:
        fprintf(stderr, "error: failed to calculate hash of the Jou compiler executable\n")
        exit(1)

    return cached_compiler_hash
