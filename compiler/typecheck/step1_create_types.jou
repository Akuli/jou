# First step of type checking is to create types, so that they exist when later
# stages reference the types.
#
# After the first step, classes defined in Jou exist, but they are all opaque
# and contain no members. This way, when step 2 checks function signatures,
# they can refer to classes that are defined anywhere in the project, e.g.
# later in the same file.
#
# Enums are simple. The first step creates them and also fills in their members,
# although it doesn't really matter whether that's done in step 1 or 2.

import "stdlib/str.jou"
import "stdlib/mem.jou"

import "../ast.jou"
import "../errors_and_warnings.jou"
import "../types.jou"
import "./common.jou"


# When defining a generic class Foo[T], this function creates the T and
# attaches it to the Foo type. It also renames the type from "Foo" to "Foo[T]".
def handle_generics(t: Type*, classdef: AstClassDef*) -> None:
    assert t->kind == TypeKind.Class
    assert classdef->is_generic()
    for nameptr = classdef->generic_typevar_names.ptr; nameptr < classdef->generic_typevar_names.end(); nameptr++:
        typevar = create_typevar(*nameptr)
        t->classdata.generic_params.append(&typevar, sizeof(typevar))

    old_name: byte[500] = t->name
    t->name = create_type_name_with_params(old_name, t->classdata.generic_params.ptr, t->classdata.generic_params.len as int)


@public
def typecheck_step1_create_types(ast: AstFile*) -> ExportSymbol*:
    exports: ExportSymbol* = NULL
    nexports = 0

    for stmt = ast->body.ptr; stmt < ast->body.end(); stmt++:
        match stmt->kind:
            case AstStatementKind.Class:
                name = stmt->classdef.name
                public = stmt->classdef.public
                usedptr = &stmt->classdef.used
                t = create_empty_class(name)
                if stmt->classdef.is_generic():
                    handle_generics(t, &stmt->classdef)
                stmt->classdef.type = t
            case AstStatementKind.Enum:
                name = stmt->enumdef.name
                public = stmt->enumdef.public
                usedptr = &stmt->enumdef.used
                t = create_enum(name, stmt->enumdef.members.len as int, stmt->enumdef.members.ptr)
                stmt->enumdef.type = t
            case _:
                continue

        existing = ast->types.find_type(name)
        if existing != NULL:
            msg: byte[500]
            snprintf(msg, sizeof(msg), "%s named '%s' already exists", existing->short_description(), name)
            fail(stmt->location, msg)

        if stmt->kind == AstStatementKind.Class and stmt->classdef.is_generic():
            ast->types.add_generic_class(t, usedptr)
        else:
            ast->types.add_type(t, usedptr)

        if public:
            exports = realloc(exports, sizeof(exports[0]) * (nexports+1))
            assert exports != NULL
            if stmt->kind == AstStatementKind.Class and stmt->classdef.is_generic():
                k = ExportSymbolKind.GenericClass
            else:
                k = ExportSymbolKind.Type
            exports[nexports++] = ExportSymbol{kind = k, type = t, name = name}

    exports = realloc(exports, sizeof(exports[0]) * (nexports + 1))
    assert exports != NULL
    exports[nexports] = ExportSymbol{}  # list terminator
    return exports
