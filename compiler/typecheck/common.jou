# Contains data structures and functions that are shared among multiple type
# checking steps.

import "stdlib/io.jou"
import "stdlib/math.jou"
import "stdlib/str.jou"
import "stdlib/mem.jou"

import "../ast.jou"
import "../evaluate.jou"
import "../errors_and_warnings.jou"
import "../types.jou"


class GlobalVariable:
    name: byte[100]  # Same as in user's code, never empty
    type: Type*
    defined_in_current_file: bool  # not declare-only (e.g. stdout) or imported
    usedptr: bool*  # If non-NULL, set to true when the variable is used. This is how we detect unused imports.


class LocalVariable:
    id: int  # Unique, but you can also compare pointers to LocalVariable.
    name: byte[100]  # Same name as in user's code, empty for temporary variables created by compiler
    type: Type*

    def print_to_width(self, width: int) -> None:
        if self->name[0] != '\0':
            printf("%-*s", width, self->name)
        else:
            printf("$%-*d", max(width-1, 0), self->id)

    def print(self) -> None:
        self->print_to_width(0)


# Type checking steps 1 and 2 return export symbols to be passed on to the next
# step. That's how the next step accesses the results of the previous step.
enum ExportSymbolKind:
    Function
    Type
    GlobalVar

class ExportSymbol:
    kind: ExportSymbolKind
    name: byte[100]  # TODO: maybe this should be 200 because it can be ClassName.method_name? or something else?
    union:
        funcsignature: Signature
        type: Type*  # ExportSymbolKind.Type and ExportSymbolKind.GlobalVar

    def free(self) -> None:
        if self->kind == ExportSymbolKind.Function:
            self->funcsignature.free()


# Type information about a function or method defined in the current file.
# Not created for anything imported from another file.
class FunctionOrMethodTypes:
    signature: Signature
    locals: LocalVariable**
    nlocals: int

    def find_local_var(self, name: byte*) -> LocalVariable*:
        for var = self->locals; var < &self->locals[self->nlocals]; var++:
            if strcmp((*var)->name, name) == 0:
                return *var
        return NULL

    def add_variable(self, t: Type*, name: byte*) -> LocalVariable*:
        var: LocalVariable* = calloc(1, sizeof *var)
        var->id = self->nlocals
        var->type = t

        assert name != NULL
        assert self->find_local_var(name) == NULL
        assert strlen(name) < sizeof(var->name)
        strcpy(var->name, name)

        self->locals = realloc(self->locals, sizeof(self->locals[0]) * (self->nlocals + 1))
        assert self->locals != NULL
        self->locals[self->nlocals++] = var

        return var


class TypeAndUsedPtr:
    type: Type*
    usedptr: bool*  # used to detect unused imports

class SignatureAndUsedPtr:
    signature: Signature
    usedptr: bool*  # used to detect unused imports


class FileTypes:
    current_fom_types: FunctionOrMethodTypes*  # conceptually this is internal to typecheck.c
    fomtypes: FunctionOrMethodTypes*
    nfomtypes: int
    globals: GlobalVariable*
    nglobals: int
    owned_types: Type**  # These will be freed later
    n_owned_types: int
    types: TypeAndUsedPtr*
    ntypes: int
    functions: SignatureAndUsedPtr*
    nfunctions: int

    def free(self) -> None:
        for t = self->owned_types; t < &self->owned_types[self->n_owned_types]; t++:
            free_type(*t)
        for func = self->functions; func < &self->functions[self->nfunctions]; func++:
            func->signature.free()
        for fom = self->fomtypes; fom < &self->fomtypes[self->nfomtypes]; fom++:
            free(fom->locals)  # Don't free individual locals because they're owned by CFG now
            fom->signature.free()
        free(self->globals)
        free(self->types)
        free(self->owned_types)
        free(self->functions)
        free(self->fomtypes)

    def find_type(self, name: byte*) -> Type*:
        for t = self->types; t < &self->types[self->ntypes]; t++:
            if strcmp(t->type->name, name) == 0:
                if t->usedptr != NULL:
                    *t->usedptr = True
                return t->type
        return NULL

    def find_function(self, name: byte*) -> Signature*:
        for f = self->functions; f < &self->functions[self->nfunctions]; f++:
            if strcmp(f->signature.name, name) == 0:
                if f->usedptr != NULL:
                    *f->usedptr = True
                return &f->signature
        return NULL

    def find_function_or_method(self, selfclass: Type*, name: byte*) -> Signature*:
        if selfclass != NULL:
            return selfclass->find_method(name)
        else:
            return self->find_function(name)

    def find_global_var(self, name: byte*) -> Type*:
        for var = self->globals; var < &self->globals[self->nglobals]; var++:
            if strcmp(var->name, name) == 0:
                if var->usedptr != NULL:
                    *var->usedptr = True
                return var->type
        return NULL

    def find_local_var(self, name: byte*) -> LocalVariable*:
        if self->current_fom_types == NULL:
            return NULL
        return self->current_fom_types->find_local_var(name)

    def find_any_var(self, name: byte*) -> Type*:
        if get_special_constant(name) != -1:
            return boolType

        local = self->find_local_var(name)
        if local != NULL:
            return local->type

        return self->find_global_var(name)


@public
def type_from_ast(ft: FileTypes*, asttype: AstType*) -> Type*:
    msg: byte[500]

    if asttype->is_void() or asttype->is_none() or asttype->is_noreturn():
        snprintf(msg, sizeof(msg), "'%s' cannot be used here because it is not a type", asttype->name)
        fail(asttype->location, msg)

    match asttype->kind:
        case AstTypeKind.Named:
            if strcmp(asttype->name, "short") == 0:
                return shortType
            if strcmp(asttype->name, "int") == 0:
                return intType
            if strcmp(asttype->name, "long") == 0:
                return longType
            if strcmp(asttype->name, "byte") == 0:
                return byteType
            if strcmp(asttype->name, "bool") == 0:
                return boolType
            if strcmp(asttype->name, "float") == 0:
                return floatType
            if strcmp(asttype->name, "double") == 0:
                return doubleType

            found = ft->find_type(asttype->name)
            if found != NULL:
                return found

            snprintf(msg, sizeof(msg), "there is no type named '%s'", asttype->name)
            fail(asttype->location, msg)

        case AstTypeKind.Pointer:
            if asttype->value_type->is_void():
                return voidPtrType
            return type_from_ast(ft, asttype->value_type)->pointer_type()

        case AstTypeKind.Array:
            tmp = type_from_ast(ft, asttype->value_type)
            len = evaluate_array_length(asttype->array.length)
            if len <= 0:
                fail(asttype->array.length->location, "array length must be positive")
            return tmp->array_type(len)
