# Contains data structures and functions that are shared among multiple type
# checking steps.

import "stdlib/str.jou"
import "stdlib/io.jou"

import "../ast.jou"
import "../constants.jou"
import "../evaluate.jou"
import "../errors_and_warnings.jou"
import "../types.jou"
import "../types_in_ast.jou"


# Type checking steps 1 and 2 return export symbols to be passed on to the next
# step. That's how the next step accesses the results of the previous step.
@public
enum ExportSymbolKind:
    Function
    Type
    GenericClass  # similar to Type, contains something like List[T] where T is a type variable
    GlobalVar
    Constant

@public
class ExportSymbol:
    kind: ExportSymbolKind
    name: byte[100]
    union:
        funcsignature: Signature  # ExportSymbolKind.Function
        type: Type*  # ExportSymbolKind.Type, ExportSymbolKind.GlobalVar, ExportSymbolKind.GenericClass
        constant: Constant  # ExportSymbolKind.Const

    def free(self) -> None:
        match self->kind:
            case ExportSymbolKind.Function:
                self->funcsignature.free()
            case ExportSymbolKind.Constant:
                self->constant.free()
            case _:
                pass


@public
def type_from_ast(ft: FileTypes*, containing_class: Type*, asttype: AstType*) -> Type*:
    if containing_class != NULL:
        assert containing_class->kind == TypeKind.Class
        for i = 0; i < containing_class->classdata.n_generic_params; i++:
            # Should be e.g. List[T], where T is a temporary type
            assert containing_class->classdata.generic_params[i]->kind == TypeKind.Temporary

    msg: byte[500]

    if asttype->is_void() or asttype->is_none() or asttype->is_noreturn():
        snprintf(msg, sizeof(msg), "'%s' cannot be used here because it is not a type", asttype->name)
        fail(asttype->location, msg)

    match asttype->kind:
        case AstTypeKind.Named:
            match asttype->name with strcmp:
                case "short":
                    return shortType
                case "int":
                    return intType
                case "long":
                    return longType
                case "byte":
                    return byteType
                case "bool":
                    return boolType
                case "float":
                    return floatType
                case "double":
                    return doubleType
                case _:
                    # Are we inside a generic class? When defining List[T], we want to find the T.
                    if containing_class != NULL:
                        assert containing_class->kind == TypeKind.Class
                        cdata = &containing_class->classdata
                        for i = 0; i < cdata->n_generic_params; i++:
                            if strcmp(cdata->generic_params[i]->name, asttype->name) == 0:
                                return cdata->generic_params[i]

                    found = ft->find_type(asttype->name)
                    if found != NULL:
                        return found
                    snprintf(msg, sizeof(msg), "there is no type named '%s'", asttype->name)
                    fail(asttype->location, msg)

        case AstTypeKind.Pointer:
            if asttype->value_type->is_void():
                return voidPtrType
            return type_from_ast(ft, containing_class, asttype->value_type)->pointer_type()

        case AstTypeKind.Array:
            tmp = type_from_ast(ft, containing_class, asttype->value_type)
            len = evaluate_array_length(asttype->array.length)
            if len <= 0:
                fail(asttype->array.length->location, "array length must be positive")
            return tmp->array_type(len)

        case AstTypeKind.Generic:
            gclass = ft->find_generic_class(asttype->generic.class_name)
            if gclass == NULL:
                snprintf(msg, sizeof(msg), "there is no generic class named '%s'", asttype->generic.class_name)
                fail(asttype->location, msg)
            printf("TODO: substitute into %s\n", gclass->name)
            printf("\n")
            for i = 0; i < asttype->generic.n_param_types; i++:
                asttype->generic.param_types[i].print(True)
                printf("\n")
            assert False
