# Second step of type checking is to check function/method signatures, global
# variables, and bodies of classes. However, we don't look into function or
# method bodies yet, because they reference other functions and methods which
# might not exist.
#
# After the second step, all types, functions, and global variables are ready.
#
# This step assumes that all types exist, but doesn't need to know what fields
# and methods each class has.

import "stdlib/mem.jou"
import "stdlib/str.jou"

import "../ast.jou"
import "../types.jou"
import "../types_in_ast.jou"
import "../errors_and_warnings.jou"
import "./common.jou"


def handle_global_var(ft: FileTypes*, vardecl: AstNameTypeValue*, defined_here: bool) -> ExportSymbol:
    if ft->find_global_var(vardecl->name) != NULL:
        msg: byte[500]
        snprintf(msg, sizeof(msg), "a global variable named '%s' already exists", vardecl->name)
        fail(vardecl->name_location, msg)

    assert vardecl->value == NULL
    g = ft->add_global_var(vardecl->name, type_from_ast(ft, &vardecl->type), NULL)
    g->defined_in_current_file = defined_here
    return ExportSymbol{kind = ExportSymbolKind.GlobalVar, type = g->type, name = g->name}


def handle_signature(ft: FileTypes*, astsig: AstSignature*, self_class: Type*, usedptr: bool*) -> Signature:
    if self_class == NULL:
        function_or_method = "function"
    else:
        function_or_method = "method"

    msg: byte[500]

    if (
        (self_class == NULL and ft->find_function(astsig->name) != NULL)
        or (self_class != NULL and self_class->find_method(astsig->name) != NULL)
    ):
        snprintf(msg, sizeof(msg), "a %s named '%s' already exists", function_or_method, astsig->name)
        fail(astsig->name_location, msg)

    sig = Signature{nargs = astsig->nargs, takes_varargs = astsig->takes_varargs}
    assert sizeof(sig.name) == sizeof(astsig->name)
    strcpy(sig.name, astsig->name)

    size = sizeof(sig.argnames[0]) * sig.nargs
    sig.argnames = malloc(size)
    for i = 0; i < sig.nargs; i++:
        assert sizeof(sig.argnames[i]) == sizeof(astsig->args[i].name)
        strcpy(sig.argnames[i], astsig->args[i].name)

    sig.argtypes = malloc(sizeof(sig.argtypes[0]) * sig.nargs)
    for i = 0; i < sig.nargs; i++:
        if (
            strcmp(sig.argnames[i], "self") == 0
            and astsig->args[i].type.kind == AstTypeKind.Named
            and astsig->args[i].type.name[0] == '\0'
        ):
            # just "self" without a type after it --> default to "self: Foo*" in class Foo
            argtype = self_class->pointer_type()
        else:
            argtype = type_from_ast(ft, &astsig->args[i].type)

        if strcmp(sig.argnames[i], "self") == 0 and argtype != self_class and argtype != self_class->pointer_type():
            snprintf(msg, sizeof(msg), "type of self must be %s* (default) or %s", self_class->name, self_class->name)
            fail(astsig->args[i].type.location, msg)

        sig.argtypes[i] = argtype

    sig.is_noreturn = astsig->return_type.is_noreturn()
    if astsig->return_type.is_none() or astsig->return_type.is_noreturn():
        sig.returntype = NULL
    elif astsig->return_type.is_void():
        snprintf(
            msg, sizeof(msg),
            "void is not a valid return type, use '-> None' if the %s does not return a value",
            function_or_method,
        )
        fail(astsig->return_type.location, msg)
    else:
        sig.returntype = type_from_ast(ft, &astsig->return_type)

    sig.returntype_location = astsig->return_type.location

    if self_class == NULL:
        ft->add_function(&sig, usedptr)

    if sig.is_main_function():
        if sig.returntype != intType:
            fail(astsig->return_type.location, "the main() function must return int")
        if (
            sig.nargs != 0
            and not (
                sig.nargs == 2
                and sig.argtypes[0] == intType
                and sig.argtypes[1] == byteType->pointer_type()->pointer_type()
            )
        ):
            fail(
                astsig->args[0].type.location,
                "if the main() function takes parameters, it should be defined like this: def main(argc: int, argv: byte**) -> int"
            )

    return sig


def handle_class_members(ft: FileTypes*, classdef: AstClassDef*) -> None:
    # Previous type-checking step created an opaque class.
    t = classdef->type
    assert t != NULL
    assert t->kind == TypeKind.OpaqueClass
    t->kind = TypeKind.Class

    memset(&t->classdata, 0, sizeof t->classdata)

    union_id = 0
    for stmt = classdef->body->statements; stmt < &classdef->body->statements[classdef->body->nstatements]; stmt++:
        match stmt->kind:
            case AstStatementKind.ClassField:
                f = ClassField{
                    type = type_from_ast(ft, &stmt->class_field.type),
                    union_id = union_id++,
                }
                assert sizeof(f.name) == sizeof(stmt->class_field.name)
                strcpy(f.name, stmt->class_field.name)

                t->classdata.fields = realloc(t->classdata.fields, sizeof(t->classdata.fields[0]) * (t->classdata.nfields + 1))
                assert t->classdata.fields != NULL
                t->classdata.fields[t->classdata.nfields++] = f

            case AstStatementKind.ClassUnion:
                uid = union_id++
                for ntv = stmt->union_fields.fields; ntv < &stmt->union_fields.fields[stmt->union_fields.nfields]; ntv++:
                    f = ClassField{
                        type = type_from_ast(ft, &ntv->type),
                        union_id = uid,
                    }
                    assert sizeof(f.name) == sizeof(ntv->name)
                    strcpy(f.name, ntv->name)

                    t->classdata.fields = realloc(t->classdata.fields, sizeof(t->classdata.fields[0]) * (t->classdata.nfields + 1))
                    assert t->classdata.fields != NULL
                    t->classdata.fields[t->classdata.nfields++] = f

            case AstStatementKind.MethodDef:
                # Don't handle the method body yet: that is a part of step 3, not step 2
                sig = handle_signature(ft, &stmt->method.ast_signature, t, NULL)
                stmt->method.types.signature = sig

                t->classdata.methods = realloc(t->classdata.methods, sizeof(t->classdata.methods[0]) * (t->classdata.nmethods + 1))
                assert t->classdata.methods != NULL
                t->classdata.methods[t->classdata.nmethods++] = sig.copy()

            case _:
                assert False


@public
def typecheck_step2_populate_types(ast: AstFile*) -> ExportSymbol*:
    exports: ExportSymbol* = NULL
    nexports = 0

    for i = 0; i < ast->body.nstatements; i++:
        stmt = &ast->body.statements[i]

        exports = realloc(exports, sizeof(exports[0]) * (nexports + 1))
        assert exports != NULL

        match stmt->kind:
            case AstStatementKind.Import:
                pass
            case AstStatementKind.GlobalVariableDeclare:
                exports[nexports++] = handle_global_var(&ast->types, &stmt->var_declaration, False)
            case AstStatementKind.GlobalVariableDef:
                exports[nexports++] = handle_global_var(&ast->types, &stmt->var_declaration, True)
            case AstStatementKind.FunctionDeclare | AstStatementKind.FunctionDef:
                sig = handle_signature(&ast->types, &stmt->function.ast_signature, NULL, &stmt->function.used)
                stmt->function.types.signature = sig
                if stmt->function.public:
                    es = ExportSymbol{kind = ExportSymbolKind.Function, funcsignature = sig.copy()}
                    assert sizeof(es.name) == sizeof(sig.name)
                    strcpy(es.name, sig.name)
                    exports[nexports++] = es
            case AstStatementKind.Class:
                handle_class_members(&ast->types, &stmt->classdef)
            case AstStatementKind.Enum:
                pass  # Everything done in previous type-checking steps.
            case _:
                assert False

    exports = realloc(exports, sizeof(exports[0]) * (nexports + 1))
    assert exports != NULL
    exports[nexports] = ExportSymbol{}
    return exports
