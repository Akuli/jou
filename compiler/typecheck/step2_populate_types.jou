# Second step of type checking is to check function/method signatures, global
# variables, and bodies of classes. However, we don't look into function or
# method bodies yet, because they reference other functions and methods which
# might not exist.
#
# After the second step, all types, functions, and global variables are ready.
#
# This step assumes that all types exist, but doesn't need to know what fields
# and methods each class has.

import "stdlib/mem.jou"
import "stdlib/str.jou"

import "../ast.jou"
import "../types.jou"
import "../types_in_ast.jou"
import "../errors_and_warnings.jou"
import "../evaluate.jou"
import "../constants.jou"
import "./common.jou"


def check_no_global_var_or_const(ft: FileTypes*, location: Location, name: byte*) -> None:
    msg: byte[500]

    if ft->find_global_var(name) != NULL:
        snprintf(msg, sizeof(msg), "a global variable named '%s' already exists", name)
        fail(location, msg)

    if ft->find_constant(name) != NULL or get_special_constant(name) != -1:
        snprintf(msg, sizeof(msg), "a global constant named '%s' already exists", name)
        fail(location, msg)


def handle_global_var(ft: FileTypes*, location: Location, name: byte*, type: AstType*, usedptr: bool*) -> ExportSymbol:
    check_no_global_var_or_const(ft, location, name)
    g = ft->add_global_var(name, type_from_ast(ft, NULL, type), usedptr)
    return ExportSymbol{kind = ExportSymbolKind.GlobalVar, type = g->type, name = g->name}


def handle_const(ft: FileTypes*, location: Location, c: AstConstStatement*) -> ExportSymbol:
    check_no_global_var_or_const(ft, location, c->name)

    # evaluate the constant expression
    value: Constant
    if not evaluate_constant_expression(&c->value, &value):
        fail(location, "cannot evaluate value of constant at compile time")

    expected_type = type_from_ast(ft, NULL, &c->type)

    # TODO: allow implicit casts?
    if value.get_type() != expected_type:
        msg: byte[500]
        snprintf(
            msg, sizeof(msg),
            "constant of type %s cannot have a value of type %s",
            expected_type->name,
            value.get_type()->name
        )
        fail(location, msg)

    ft->add_constant(c->name, &value, &c->used)
    return ExportSymbol{kind = ExportSymbolKind.Constant, constant = value, name = c->name}


def handle_signature(ft: FileTypes*, astsig: AstSignature*, self_class: Type*, usedptr: bool*) -> Signature:
    if self_class == NULL:
        function_or_method = "function"
    else:
        function_or_method = "method"

    msg: byte[500]

    if self_class == NULL and ft->find_function(astsig->name) != NULL:
        snprintf(msg, sizeof(msg), "a function named '%s' already exists", astsig->name)
        fail(astsig->name_location, msg)

    sig = Signature{nargs = astsig->nargs, takes_varargs = astsig->takes_varargs}
    assert sizeof(sig.name) == sizeof(astsig->name)
    strcpy(sig.name, astsig->name)

    size = sizeof(sig.argnames[0]) * sig.nargs
    sig.argnames = malloc(size)
    for i = 0; i < sig.nargs; i++:
        assert sizeof(sig.argnames[i]) == sizeof(astsig->args[i].name)
        strcpy(sig.argnames[i], astsig->args[i].name)

    sig.argtypes = malloc(sizeof(sig.argtypes[0]) * sig.nargs)
    for i = 0; i < sig.nargs; i++:
        if (
            strcmp(sig.argnames[i], "self") == 0
            and astsig->args[i].type.kind == AstTypeKind.Named
            and astsig->args[i].type.name[0] == '\0'
        ):
            # just "self" without a type after it --> default to "self: Foo*" in class Foo
            argtype = self_class->pointer_type()
        else:
            argtype = type_from_ast(ft, self_class, &astsig->args[i].type)

        if strcmp(sig.argnames[i], "self") == 0 and argtype != self_class and argtype != self_class->pointer_type():
            snprintf(msg, sizeof(msg), "type of self must be %s* (default) or %s", self_class->name, self_class->name)
            fail(astsig->args[i].type.location, msg)

        sig.argtypes[i] = argtype

    sig.is_noreturn = astsig->return_type.is_noreturn()
    if astsig->return_type.is_none() or astsig->return_type.is_noreturn():
        sig.return_type = NULL
    elif astsig->return_type.is_void():
        snprintf(
            msg, sizeof(msg),
            "void is not a valid return type, use '-> None' if the %s does not return a value",
            function_or_method,
        )
        fail(astsig->return_type.location, msg)
    else:
        sig.return_type = type_from_ast(ft, self_class, &astsig->return_type)

    if self_class == NULL:
        ft->add_function(&sig, usedptr)

    if sig.is_main_function():
        if sig.return_type != intType:
            fail(astsig->return_type.location, "the main() function must return int")
        if (
            sig.nargs != 0
            and not (
                sig.nargs == 2
                and sig.argtypes[0] == intType
                and sig.argtypes[1] == byteType->pointer_type()->pointer_type()
            )
        ):
            fail(
                astsig->args[0].type.location,
                "if the main() function takes parameters, it should be defined like this: def main(argc: int, argv: byte**) -> int"
            )

    return sig


def check_class_member_not_exist(t: Type*, name: byte*, location: Location) -> None:
    msg: byte[500]
    assert t->kind == TypeKind.Class

    field = t->find_class_field(name)
    if field != NULL:
        # TODO: this is complicated, should just use same error message for fields and union members
        assert t->classdata.fields <= field and field < &t->classdata.fields[t->classdata.nfields]

        belongs_to_a_union = (
            (field > t->classdata.fields and field[-1].union_id == field->union_id)
            or (&field[1] < &t->classdata.fields[t->classdata.nfields] and field[1].union_id == field->union_id)
        )

        if belongs_to_a_union:
            snprintf(msg, sizeof(msg), "class %s already has a union member named '%s'", t->name, name)
        else:
            snprintf(msg, sizeof(msg), "class %s already has a field named '%s'", t->name, name)
        fail(location, msg)

    if t->find_method(name) != NULL:
        snprintf(msg, sizeof(msg), "class %s already has a method named '%s'", t->name, name)
        fail(location, msg)


def handle_class_members(ft: FileTypes*, classdef: AstClassDef*) -> None:
    # Previous type-checking step created a temporary type. It now becomes a class.
    t = classdef->type
    assert t != NULL
    assert t->kind == TypeKind.OpaqueClass
    t->kind = TypeKind.Class

    memset(&t->classdata, 0, sizeof t->classdata)

    n = classdef->n_generic_typevars
    if n > 0:
        # When defining generic class List[T], create a temporary type named T.
        t->classdata.n_generic_params = n
        t->classdata.generic_params = malloc(sizeof(t->classdata.generic_params[0]) * n)
        for i = 0; i < n; i++:
            t->classdata.generic_params[i] = create_typevar(classdef->generic_typevar_names[i])

        # Update name of type from "List" to "List[T]"
        old_name: byte[500] = t->name
        t->name = create_type_name_with_params(old_name, t->classdata.generic_params, n)

    union_id = 0
    for stmt = classdef->body->statements; stmt < &classdef->body->statements[classdef->body->nstatements]; stmt++:
        match stmt->kind:
            case AstStatementKind.ClassField:
                f = ClassField{
                    type = type_from_ast(ft, t, &stmt->class_field.type),
                    union_id = union_id++,
                }
                assert sizeof(f.name) == sizeof(stmt->class_field.name)
                strcpy(f.name, stmt->class_field.name)

                check_class_member_not_exist(t, f.name, stmt->location)
                t->classdata.fields = realloc(t->classdata.fields, sizeof(t->classdata.fields[0]) * (t->classdata.nfields + 1))
                assert t->classdata.fields != NULL
                t->classdata.fields[t->classdata.nfields++] = f

            case AstStatementKind.ClassUnion:
                uid = union_id++
                for ntv = stmt->union_fields.fields; ntv < &stmt->union_fields.fields[stmt->union_fields.nfields]; ntv++:
                    for ntv2 = &ntv[1]; ntv2 < &stmt->union_fields.fields[stmt->union_fields.nfields]; ntv2++:
                        if strcmp(ntv->name, ntv2->name) == 0:
                            msg: byte[500]
                            snprintf(msg, sizeof(msg), "duplicate union member '%s'", ntv->name)
                            fail(ntv2->name_location, msg)

                    f = ClassField{
                        type = type_from_ast(ft, t, &ntv->type),
                        union_id = uid,
                    }
                    assert sizeof(f.name) == sizeof(ntv->name)
                    strcpy(f.name, ntv->name)

                    check_class_member_not_exist(t, f.name, ntv->name_location)
                    t->classdata.fields = realloc(t->classdata.fields, sizeof(t->classdata.fields[0]) * (t->classdata.nfields + 1))
                    assert t->classdata.fields != NULL
                    t->classdata.fields[t->classdata.nfields++] = f

            case AstStatementKind.MethodDef:
                # Don't handle the method body yet: that is a part of step 3, not step 2
                sig = handle_signature(ft, &stmt->method.ast_signature, t, NULL)
                stmt->method.types.signature = sig

                check_class_member_not_exist(t, sig.name, stmt->location)
                t->classdata.methods = realloc(t->classdata.methods, sizeof(t->classdata.methods[0]) * (t->classdata.nmethods + 1))
                assert t->classdata.methods != NULL
                t->classdata.methods[t->classdata.nmethods++] = sig.copy()

            case AstStatementKind.Pass:
                pass

            case _:
                assert False


@public
def typecheck_step2_populate_types(ast: AstFile*) -> ExportSymbol*:
    exports: ExportSymbol* = NULL
    nexports = 0

    for i = 0; i < ast->body.nstatements; i++:
        stmt = &ast->body.statements[i]

        exports = realloc(exports, sizeof(exports[0]) * (nexports + 1))
        assert exports != NULL

        match stmt->kind:
            case AstStatementKind.Import | AstStatementKind.Pass:
                pass
            case AstStatementKind.GlobalVariableDeclare:
                exp = handle_global_var(&ast->types, stmt->location, stmt->global_var_declare.name, &stmt->global_var_declare.type, &stmt->global_var_declare.used)
                if stmt->global_var_declare.public:
                    exports[nexports++] = exp
            case AstStatementKind.GlobalVariableDef:
                exp = handle_global_var(&ast->types, stmt->location, stmt->global_var_def.name, &stmt->global_var_def.type, &stmt->global_var_def.used)
                if stmt->global_var_def.public:
                    exports[nexports++] = exp
            case AstStatementKind.Const:
                exp = handle_const(&ast->types, stmt->location, &stmt->const_statement)
                if stmt->const_statement.public:
                    exports[nexports++] = exp
                else:
                    exp.free()
            case AstStatementKind.FunctionDeclare | AstStatementKind.FunctionDef:
                sig = handle_signature(&ast->types, &stmt->function.ast_signature, NULL, &stmt->function.used)
                stmt->function.types.signature = sig
                if stmt->function.public:
                    es = ExportSymbol{kind = ExportSymbolKind.Function, funcsignature = sig.copy()}
                    assert sizeof(es.name) == sizeof(sig.name)
                    strcpy(es.name, sig.name)
                    exports[nexports++] = es
            case AstStatementKind.Class:
                handle_class_members(&ast->types, &stmt->classdef)
            case AstStatementKind.Enum | AstStatementKind.Link:
                pass  # Everything done in previous type-checking steps.
            case _:
                assert False

    exports = realloc(exports, sizeof(exports[0]) * (nexports + 1))
    assert exports != NULL
    exports[nexports] = ExportSymbol{}
    return exports
