import "stdlib/io.jou"
import "stdlib/mem.jou"
import "stdlib/str.jou"
import "stdlib/process.jou"

import "./builders/llvm_builder.jou"
import "./builders/uvg_builder.jou"
import "./command_line_args.jou"
import "./evaluate.jou"
import "./run.jou"
import "./llvm.jou"
import "./typecheck/common.jou"
import "./typecheck/step1_create_types.jou"
import "./typecheck/step2_populate_types.jou"
import "./typecheck/step3_function_and_method_bodies.jou"
import "./target.jou"
import "./types.jou"
import "./token.jou"
import "./parser.jou"
import "./paths.jou"
import "./errors_and_warnings.jou"
import "./tokenizer.jou"
import "./ast.jou"


def defines_main(ast: AstFile*) -> bool:
    for i = 0; i < ast->body.nstatements; i++:
        s = &ast->body.statements[i]
        if s->kind == AstStatementKind.FunctionDef and s->function.types.signature.is_main_function():
            return True
    return False


def statement_conflicts_with_an_import(stmt: AstStatement*, importsym: ExportSymbol*) -> bool:
    match stmt->kind:
        case AstStatementKind.FunctionDeclare | AstStatementKind.FunctionDef:
            return (
                importsym->kind == ExportSymbolKind.Function
                and strcmp(importsym->name, stmt->function.ast_signature.name) == 0
            )
        case AstStatementKind.GlobalVariableDeclare:
            return (
                importsym->kind == ExportSymbolKind.GlobalVar
                and strcmp(importsym->name, stmt->global_var_declare.name) == 0
            )
        case AstStatementKind.GlobalVariableDef:
            return (
                importsym->kind == ExportSymbolKind.GlobalVar
                and strcmp(importsym->name, stmt->global_var_def.name) == 0
            )
        case AstStatementKind.Class:
            return (
                importsym->kind == ExportSymbolKind.Type
                and strcmp(importsym->name, stmt->classdef.name) == 0
            )
        case AstStatementKind.Enum:
            return (
                importsym->kind == ExportSymbolKind.Type
                and strcmp(importsym->name, stmt->enumdef.name) == 0
            )
        case AstStatementKind.Import | AstStatementKind.Link | AstStatementKind.Pass:
            return False
        case _:
            printf("%d\n", stmt->kind as int)
            stmt->print()
            assert False


def print_llvm_ir(module: LLVMModule*, is_optimized: bool) -> None:
    if is_optimized:
        opt_or_unopt = "Optimized"
    else:
        opt_or_unopt = "Unoptimized"

    len = 0L
    filename = LLVMGetSourceFileName(module, &len)
    printf("===== %s LLVM IR for file \"%.*s\" =====\n", opt_or_unopt, len as int, filename)

    s = LLVMPrintModuleToString(module)
    puts(s)
    LLVMDisposeMessage(s)


class FileState:
    path: byte*  # owned
    ast: AstFile
    module: LLVMModule*

    def free(self) -> None:
        self->ast.free()
        free(self->path)

    def add_imported_symbol(self, es: ExportSymbol*, imp: AstImport*) -> None:
        for i = 0; i < self->ast.body.nstatements; i++:
            if statement_conflicts_with_an_import(&self->ast.body.statements[i], es):
                match es->kind:
                    case ExportSymbolKind.Function:
                        wat = "function"
                    case ExportSymbolKind.GlobalVar:
                        wat = "global variable"
                    case ExportSymbolKind.Type:
                        wat = "type"

                msg: byte[500]
                snprintf(msg, sizeof msg, "a %s named '%s' already exists", wat, es->name)
                fail(self->ast.body.statements[i].location, msg)

        match es->kind:
            case ExportSymbolKind.Function:
                self->ast.types.add_function(&es->funcsignature, &imp->used)
            case ExportSymbolKind.Type:
                self->ast.types.add_type(es->type, &imp->used)
            case ExportSymbolKind.GlobalVar:
                self->ast.types.add_global_var(es->name, es->type, &imp->used)

    def warn_about_unused(self) -> None:
        msg: byte[500]

        for stmt = self->ast.body.statements; stmt < &self->ast.body.statements[self->ast.body.nstatements]; stmt++:
            match stmt->kind:
                case AstStatementKind.Import:
                    if not stmt->import_statement.used:
                        snprintf(msg, sizeof msg, "\"%s\" imported but not used", stmt->import_statement.specified_path)
                        show_warning(stmt->location, msg)
                case AstStatementKind.FunctionDef | AstStatementKind.FunctionDeclare:
                    if stmt->kind == AstStatementKind.FunctionDeclare:
                        did_what = "declared"
                    else:
                        did_what = "defined"

                    f = &stmt->function
                    if not f->public and not f->used and not f->types.signature.is_main_function():
                        sigstr = f->types.signature.to_string(False, False)
                        snprintf(msg, sizeof msg, "function %s %s but not used", sigstr, did_what)
                        free(sigstr)
                        show_warning(stmt->location, msg)
                case AstStatementKind.Enum:
                    if not stmt->enumdef.public and not stmt->enumdef.used:
                        snprintf(msg, sizeof msg, "enum %s defined but not used", stmt->enumdef.name)
                        show_warning(stmt->location, msg)
                case AstStatementKind.GlobalVariableDef:
                    if not stmt->global_var_def.public and not stmt->global_var_def.used:
                        snprintf(msg, sizeof msg, "global variable '%s' defined but not used", stmt->global_var_def.name)
                        show_warning(stmt->location, msg)
                case AstStatementKind.GlobalVariableDeclare:
                    if not stmt->global_var_declare.public and not stmt->global_var_declare.used:
                        snprintf(msg, sizeof msg, "global variable '%s' declared but not used", stmt->global_var_declare.name)
                        show_warning(stmt->location, msg)
                case AstStatementKind.Class:
                    if not stmt->classdef.public and not stmt->classdef.used:
                        snprintf(msg, sizeof msg, "class '%s' defined but not used", stmt->classdef.name)
                        show_warning(stmt->location, msg)
                case _:
                    pass

    def build_llvm_ir(self) -> LLVMModule*:
        if command_line_args.verbosity >= 1:
            printf("Building LLVM IR: %s\n", self->path)

        mod = build_llvm_ir(&self->ast)
        self->warn_about_unused()

        if command_line_args.verbosity >= 2:
            print_llvm_ir(mod, False)

        # If this fails, it is not just users writing dumb code, it is a bug in this compiler.
        # This compiler should always fail with an error elsewhere, or generate valid LLVM IR.
        LLVMVerifyModule(mod, LLVMVerifierFailureAction.AbortProcess, NULL)

        if command_line_args.optlevel != 0:
            if command_line_args.verbosity >= 1:
                printf("Optimizing %s (level %d)\n", self->path, command_line_args.optlevel)
            optimize(mod, command_line_args.optlevel)
            if command_line_args.verbosity >= 2:
                print_llvm_ir(mod, True)

        return mod


def check_imports_at_start_of_file(body: AstBody*) -> None:
    i = 0
    while i < body->nstatements and body->statements[i].kind == AstStatementKind.Import:
        i++

    for ; i < body->nstatements; i++:
        if body->statements[i].kind == AstStatementKind.Import:
            fail(body->statements[i].location, "imports must be in the beginning of the file")


class CompileState:
    stdlib_path: byte*
    files: FileState*
    nfiles: int

    def free(self) -> None:
        for fs = self->files; fs < &self->files[self->nfiles]; fs++:
            fs->free()
        free(self->files)

    def find_file(self, path: byte*) -> FileState*:
        for fs = self->files; fs < &self->files[self->nfiles]; fs++:
            if strcmp(fs->path, path) == 0:
                return fs
        return NULL

    def parse(self, filename: byte*, import_location: Location*) -> None:
        if self->find_file(filename) != NULL:
            # already parsed
            return

        fs = FileState{path = strdup(filename)}

        if command_line_args.verbosity >= 1:
            printf("Tokenizing %s\n", filename)
        tokens = tokenize(fs.path, import_location)

        if command_line_args.verbosity >= 2:
            print_tokens(tokens)

        if command_line_args.verbosity >= 1:
            printf("Parsing %s\n", filename)
        fs.ast = parse(tokens, self->stdlib_path)
        free_tokens(tokens)

        if strcmp(filename, command_line_args.infile) == 0:
            fs.ast.is_main_file = True

        if command_line_args.verbosity >= 1:
            printf("Evaluating compile-time if statements in %s\n", filename)
        evaluate_compile_time_if_statements(&fs.ast)

        if command_line_args.verbosity >= 2:
            fs.ast.print()

        check_imports_at_start_of_file(&fs.ast.body)

        self->files = realloc(self->files, sizeof(self->files[0]) * (self->nfiles + 1))
        assert self->files != NULL
        self->files[self->nfiles++] = fs

        for stmt = fs.ast.body.statements; stmt < &fs.ast.body.statements[fs.ast.body.nstatements]; stmt++:
            if stmt->kind == AstStatementKind.Import:
                self->parse(stmt->import_statement.resolved_path, &stmt->location)  # recursive call

    def parse_from_stdlib(self, filename: byte*) -> None:
        path = malloc(strlen(self->stdlib_path) + strlen(filename) + 123)
        sprintf(path, "%s/%s", self->stdlib_path, filename)
        self->parse(path, NULL)
        free(path)

    # Each step of type checking produces exported symbols that other files can import.
    # This method hands them over to the importing files.
    def exports_to_imports(self, pending_exports: ExportSymbol**) -> None:
        for to = self->files; to < &self->files[self->nfiles]; to++:
            seen_before: FileState** = NULL
            seen_before_len = 0

            for stmt = to->ast.body.statements; stmt < &to->ast.body.statements[to->ast.body.nstatements]; stmt++:
                if stmt->kind != AstStatementKind.Import:
                    continue

                from = self->find_file(stmt->import_statement.resolved_path)
                assert from != NULL
                from_index = ((from as long) - (self->files as long)) / sizeof(self->files[0])

                if from == to:
                    fail(stmt->location, "the file itself cannot be imported")

                for i = 0; i < seen_before_len; i++:
                    if seen_before[i] == from:
                        msg: byte[500]
                        snprintf(msg, sizeof msg, "file \"%s\" is imported twice", stmt->import_statement.specified_path)
                        fail(stmt->location, msg)

                seen_before = realloc(seen_before, sizeof(seen_before[0]) * (seen_before_len + 1))
                seen_before[seen_before_len++] = from

                for es = pending_exports[from_index]; es->name[0] != '\0'; es++:
                    if command_line_args.verbosity >= 2:
                        match es->kind:
                            case ExportSymbolKind.Function:
                                kindstr = "function"
                            case ExportSymbolKind.GlobalVar:
                                kindstr = "global var"
                            case ExportSymbolKind.Type:
                                kindstr = "type"
                        printf("Adding imported %s %s: %s --> %s\n",
                            kindstr, es->name, from->path, to->path)

                    to->add_imported_symbol(es, &stmt->import_statement)

            free(seen_before)

        for i = 0; i < self->nfiles; i++:
            for es = pending_exports[i]; es->name[0] != '\0'; es++:
                es->free()
            free(pending_exports[i])
            pending_exports[i] = NULL

    def typecheck_all_files(self) -> None:
        if command_line_args.verbosity >= 1:
            printf("Type-checking...\n")

        pending_exports: ExportSymbol** = malloc(sizeof(pending_exports[0]) * self->nfiles)

        for i = 0; i < self->nfiles; i++:
            if command_line_args.verbosity >= 1:
                printf("  step 1: %s\n", self->files[i].path)
            pending_exports[i] = typecheck_step1_create_types(&self->files[i].ast)

        self->exports_to_imports(pending_exports)

        for i = 0; i < self->nfiles; i++:
            if command_line_args.verbosity >= 1:
                printf("  step 2: %s\n", self->files[i].path)
            pending_exports[i] = typecheck_step2_populate_types(&self->files[i].ast)

        self->exports_to_imports(pending_exports)

        for i = 0; i < self->nfiles; i++:
            if command_line_args.verbosity >= 1:
                printf("  step 3: %s\n", self->files[i].path)
            typecheck_step3_function_and_method_bodies(&self->files[i].ast)
            if command_line_args.verbosity >= 3:
                # AST now contains types. If very verbose, print them.
                self->files[i].ast.print()

        free(pending_exports)

    def build_and_analyze_all_uvgs(self) -> None:
        print_uvgs = command_line_args.verbosity >= 2
        for i = 0; i < self->nfiles; i++:
            if command_line_args.verbosity >= 1:
                printf("Building and analyzing UVGs for %s\n", self->files[i].path)
            build_and_analyze_uvgs(&self->files[i].ast, print_uvgs)

    def collect_linker_flags_from_link_statements(self) -> byte*:
        result: byte* = strdup("")
        result_len = 0L
        result_alloc = 1L

        for file = self->files; file < &self->files[self->nfiles]; file++:
            body = &file->ast.body
            for stmt = body->statements; stmt < &body->statements[body->nstatements]; stmt++:
                if stmt->kind == AstStatementKind.Link:
                    result_len += strlen(stmt->link_statement.resolved_flags)
                    while result_alloc <= result_len:
                        result_alloc *= 2
                    result = realloc(result, result_alloc)
                    assert result != NULL
                    strcat(result, stmt->link_statement.resolved_flags)

        return result


def optimize(module: LLVMModule*, level: int) -> None:
    assert 1 <= level and level <= 3

    pm = LLVMCreatePassManager()

    # The default settings should be fine for Jou because they work well for
    # C and C++, and Jou is quite similar to C.
    pmbuilder = LLVMPassManagerBuilderCreate()
    LLVMPassManagerBuilderSetOptLevel(pmbuilder, level)
    LLVMPassManagerBuilderPopulateModulePassManager(pmbuilder, pm)
    LLVMPassManagerBuilderDispose(pmbuilder)

    LLVMRunPassManager(pm, module)
    LLVMDisposePassManager(pm)


def compile_llvm_ir_to_object_file(module: LLVMModule*) -> byte*:
    len = 0L
    objname = get_filename_without_jou_suffix(LLVMGetSourceFileName(module, &len))

    objname = realloc(objname, strlen(objname) + 10)
    if WINDOWS:
        strcat(objname, ".obj")
    else:
        strcat(objname, ".o")

    path = get_path_to_file_in_jou_compiled(objname)
    free(objname)

    if command_line_args.verbosity >= 1:
        printf("Emitting object file: %s\n", path)

    tmppath = strdup(path)
    error: byte* = NULL
    if LLVMTargetMachineEmitToFile(target.target_machine, module, tmppath, LLVMCodeGenFileType.ObjectFile, &error) != 0:
        assert error != NULL
        fprintf(stderr, "failed to emit object file \"%s\": %s\n", path, error)
        exit(1)
    free(tmppath)

    assert error == NULL
    return path


def tokenize_only(path: byte*) -> None:
    tokens = tokenize(command_line_args.infile, NULL)
    print_tokens(tokens)
    free_tokens(tokens)


def parse_only(path: byte*, stdlib_path: byte*) -> None:
    tokens = tokenize(command_line_args.infile, NULL)
    ast = parse(tokens, stdlib_path)
    ast.print()
    ast.free()
    free_tokens(tokens)


def main(argc: int, argv: byte**) -> int:
    init_target()
    init_types()
    stdlib = find_stdlib()

    parse_command_line_args(argc, argv)

    if command_line_args.verbosity >= 2:
        printf("Target triple: %s\n", target.triple)
        printf("Data layout: %s\n", target.data_layout)

    if command_line_args.tokenize_only:
        tokenize_only(command_line_args.infile)
        return 0

    if command_line_args.parse_only:
        parse_only(command_line_args.infile, stdlib)
        return 0

    compst = CompileState{ stdlib_path = stdlib }

    # This part recursively finds and parses imported files.
    compst.parse_from_stdlib("_assert_fail.jou")
    if WINDOWS or MACOS or NETBSD:
        compst.parse_from_stdlib("_jou_startup.jou")
    compst.parse(command_line_args.infile, NULL)

    compst.typecheck_all_files()

    if command_line_args.uvg_only:
        mainfile = compst.find_file(command_line_args.infile)
        assert mainfile != NULL
        build_and_analyze_uvgs(&mainfile->ast, True)
        return 0

    compst.build_and_analyze_all_uvgs()

    objpaths: byte** = calloc(sizeof objpaths[0], compst.nfiles + 1)
    for i = 0; i < compst.nfiles; i++:
        llvm_ir = compst.files[i].build_llvm_ir()
        objpaths[i] = compile_llvm_ir_to_object_file(llvm_ir)
        LLVMDisposeModule(llvm_ir)

    link_flags = compst.collect_linker_flags_from_link_statements()

    # Check for missing main() as late as possible, so that other errors come first.
    # This way Jou users can work on other functions before main() function is written.
    mainfile = compst.find_file(command_line_args.infile)
    assert mainfile != NULL
    if not defines_main(&mainfile->ast):
        fail(Location{path=mainfile->path}, "missing `main` function to execute the program")

    compst.free()
    free(stdlib)

    exepath = decide_exe_path()
    run_linker(objpaths, exepath, link_flags)
    free(link_flags)

    for i = 0; objpaths[i] != NULL; i++:
        free(objpaths[i])
    free(objpaths)

    ret = 0
    if command_line_args.outfile == NULL:
        if command_line_args.verbosity >= 1:
            printf("Run: %s\n", exepath)
        ret = run_exe(exepath, command_line_args.valgrind)

    free(exepath)

    # not really necessary, but makes valgrind much happier
    free_global_type_state()
    cleanup_target()

    return ret
