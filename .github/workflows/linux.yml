on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Testing all levels because there was a bug that only happened with -O1. (#224)
        # Please keep in sync with valgrind.yml
        params:
          - { llvm-version: 15, opt-level: '-O0' }
          - { llvm-version: 15, opt-level: '-O1' }
          - { llvm-version: 15, opt-level: '-O2' }
          - { llvm-version: 15, opt-level: '-O3' }
          - { llvm-version: 16, opt-level: '-O1' }
          - { llvm-version: 17, opt-level: '-O1' }
          - { llvm-version: 18, opt-level: '-O1' }
          - { llvm-version: 19, opt-level: '-O0' }
          - { llvm-version: 19, opt-level: '-O1' }
          - { llvm-version: 19, opt-level: '-O2' }
          - { llvm-version: 19, opt-level: '-O3' }
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch the whole Git history for bootstrapping
      - uses: actions/cache@v4
        with:
          path: jou_bootstrap
          key: bootstrap-${{ runner.os }}-${{ matrix.params.llvm-version }}-${{ matrix.params.opt-level }}-${{ hashFiles('bootstrap.sh') }}
      - name: "Mark cached bootstrap compiler as modified so that it is not rebuilt"
        run: touch -c jou_bootstrap
      - run: sudo apt update
      # liblzma-dev is for testing the `link` keyword, there is a test that decompresseses .xz file
      - run: sudo apt install -y llvm-${{ matrix.params.llvm-version }}-dev clang-${{ matrix.params.llvm-version }} make valgrind liblzma-dev
      - name: "Select LLVM version"
        run: echo "LLVM_CONFIG=llvm-config-${{ matrix.params.llvm-version }}" >> $GITHUB_ENV
#      - name: "Compile and test"
#        run: ./runtests.sh --verbose --jou-flags "${{ matrix.params.opt-level }}"
      - name: "Compile"
        run: make
      - name: "Temporary valgrind"
        run: rm -rf examples/aoc2024/day23/jou_compiled; valgrind --gen-suppressions=all --error-exitcode=1 -q --suppressions='valgrind-suppressions.sup' ./jou -o /dev/null examples/aoc2024/day23/part2.jou
      - name: "Compile the compiler with itself"
        run: ./jou -o jou2 compiler/main.jou && mv jou2 jou
      - name: "Compile and test again"
        run: ./runtests.sh --verbose --jou-flags "${{ matrix.params.opt-level }}"
      # Valgrinding all files is slow, but let's valgrind the hello world.
      # This is enough to catch many bugs.
      #
      # We also have a separate, "full" valgrind run. See valgrind.yml.
      - name: "Run hello world with valgrind"
        run: ./runtests.sh --verbose --jou-flags "${{ matrix.params.opt-level }}" --valgrind hello
      - run: ./doctest.sh
