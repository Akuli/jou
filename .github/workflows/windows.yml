#
#
#
# *** If you edit this file, make sure that CONTRIBUTING.md stays up to date.
#
#
#
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-zip:
    runs-on: windows-latest
    timeout-minutes: 10  # may need to bootstrap
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch the whole Git history for bootstrapping
      - uses: actions/cache@v4
        with:
          path: jou_bootstrap.exe
          key: bootstrap-${{ runner.os }}-${{ hashFiles('*.sh') }}
      - name: "Mark cached bootstrap compiler as modified so that it is not rebuilt"
        run: touch -c jou_bootstrap.exe
      # Do not use --small because it relies on a previously built zip
      - run: source activate && ./windows_setup.sh
        shell: bash
      - run: source activate && mingw32-make
        shell: bash
      # We don't need to copy all of mingw64. We only need the GNU linker.
      # The less we copy, the smaller the resulting zip becomes.
      #
      # gcc is needed only to run the linker. It would be possible to invoke ld.exe
      # directly, but the command-line it wants is a bit complicated and it's just
      # easier to let a C compiler figure it out. I also tried using clang instead
      # of gcc, but it depends on many LLVM DLLs and the zip file became huge.
      - name: Copy the linker from mingw64 to jou/mingw64
        shell: bash
        run: |
          # Executables are copied without their DLLs (added later)
          # Names of .a files figured out by deleting them all and looking at error message.
          # CRT (C RunTime) files are needed because the linker implicitly adds them to every executable.
          for file in \
              mingw64/version_info.txt \
              $(find mingw64 -name 'crt*.o') \
              mingw64/bin/gcc.exe \
              mingw64/lib/gcc/x86_64-w64-mingw32/14.2.0/libgcc.a \
              mingw64/lib/gcc/x86_64-w64-mingw32/14.2.0/libgcc_eh.a \
              mingw64/libexec/gcc/x86_64-w64-mingw32/14.2.0/liblto_plugin.dll \
              mingw64/x86_64-w64-mingw32/bin/ld.exe \
              mingw64/x86_64-w64-mingw32/lib/libadvapi32.a \
              mingw64/x86_64-w64-mingw32/lib/libkernel32.a \
              mingw64/x86_64-w64-mingw32/lib/libm.a \
              mingw64/x86_64-w64-mingw32/lib/libmingw32.a \
              mingw64/x86_64-w64-mingw32/lib/libmingwex.a \
              mingw64/x86_64-w64-mingw32/lib/libmsvcrt.a \
              mingw64/x86_64-w64-mingw32/lib/libpthread.a \
              mingw64/x86_64-w64-mingw32/lib/libshell32.a \
              mingw64/x86_64-w64-mingw32/lib/libuser32.a
          do
            mkdir -vp jou/$(dirname $file)
            cp -v $file jou/$file
          done
      - name: Copy more files to jou/
        # Please keep this list of files in sync with update.ps1
        run: cp -rv stdlib doc examples LICENSE jou.exe update.ps1 jou
        shell: bash
      - name: Copy missing DLL files to jou/
        shell: bash
        run: |
          function copy_dlls() {
            local from=$1
            local to=$2
            local queue=($to/*.exe)
            while [ ${#queue[@]} != 0 ]; do
              local args=(${queue[@]})
              queue=()
              for dll in $(mingw64/bin/objdump -p ${args[@]} | grep 'DLL Name:' | cut -d: -f2 | sort -u); do
                if [ -f $from/$dll ] && ! [ -f $to/$dll ]; then
                  cp -v $from/$dll $to/
                  queue+=($to/$dll)
                fi
              done
            done
          }
          copy_dlls mingw64/bin jou
          copy_dlls mingw64/bin jou/mingw64/bin
          copy_dlls mingw64/x86_64-w64-mingw32/bin jou/mingw64/x86_64-w64-mingw32/bin
      - name: Convert text files to Windows-style CRLF line endings
        run: mingw64/bin/unix2dos $(find jou -name '*.jou') $(find jou -name '*.md') jou/LICENSE
        shell: bash
      - run: Compress-Archive -Path jou -DestinationPath jou.zip
      - name: Display size of jou.zip
        run: ls -lh jou.zip
        shell: bash
      - uses: actions/upload-artifact@v4
        with:
          name: windows-zip
          path: jou.zip

  test:
    runs-on: windows-latest
    timeout-minutes: 20  # may need to bootstrap
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch the whole Git history for bootstrapping
      - uses: actions/cache@v4
        with:
          path: jou_bootstrap.exe
          key: bootstrap-${{ runner.os }}-${{ hashFiles('*.sh') }}
      - name: "Mark cached bootstrap compiler as modified so that it is not rebuilt"
        run: touch -c jou_bootstrap.exe
      - run: ./windows_setup.sh --small
        shell: bash
      - name: "Compile and test"
        run: source activate && ./runtests.sh --verbose
        shell: bash
      - name: "Compile the compiler with itself"
        run: source activate && ./jou -o jou2 compiler/main.jou && mv jou2.exe jou.exe
        shell: bash
      - name: "Compile and test again"
        run: source activate && ./runtests.sh --verbose
        shell: bash
      - run: source activate && ./doctest.sh
        shell: bash

  test-zip:
    needs: build-zip
    runs-on: windows-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          path: repo
      - uses: actions/download-artifact@v4
        with:
          name: windows-zip
      - run: unzip jou.zip
      # Make sure it works even if there is a space in folder name
      - run: mv jou "test dir"
        shell: bash
      - run: cp -r repo/tests repo/runtests.sh "test dir"
        shell: bash
      - name: "Delete a test that depends on the compiler and cannot work without it"
        run: rm -v "test dir"/tests/should_succeed/compiler_unit_tests.jou
        shell: bash
      - run: cd "test dir" && ./jou.exe --verbose examples/hello.jou
        shell: bash
      - run: cd "test dir" && ./runtests.sh --dont-run-make --verbose
        shell: bash
