on:
  push:
    branches:
      - main
  pull_request:

jobs:
  # Creates jou.exe and downloads the DLL files it needs.
  # Even though the resulting executable runs on windows, it is compiled on linux.
  # This is by far the easiest way to compile for Windows that I know of.
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download LLVM binaries
        # Apparently the exe file is created with nsis installer and 7z can extract from it.
        # Figured out by looking at source code of https://github.com/KyleMayes/install-llvm-action
        run: |
          wget --no-verbose https://github.com/llvm/llvm-project/releases/download/llvmorg-13.0.1/LLVM-13.0.1-win64.exe
          7z x LLVM-13.0.1-win64.exe bin/LLVM-C.dll lib/LLVM-C.lib
      # llvm-13-dev needed for the header files
      # Using gcc instead of clang, because gcc "just works".
      - run: sudo apt install -y llvm-13-dev gcc-mingw-w64-x86-64-win32
      - run: CC=x86_64-w64-mingw32-gcc LDFLAGS=lib/LLVM-C.lib make
      - run: mkdir -v exe-and-dlls
      - run: cp -vr jou.exe bin/LLVM-C.dll exe-and-dlls/
      - uses: actions/upload-artifact@v3
        with:
          name: exe-and-dlls
          path: exe-and-dlls

  # TODO: Doesn't work, lots of errors
#  test:
#    needs: build
#    runs-on: windows-latest
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/download-artifact@v3
#        with:
#          name: exe-and-dlls
#      - shell: bash
#        run: tests/runtests.sh './jou.exe %s'
