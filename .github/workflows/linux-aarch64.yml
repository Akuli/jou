on:
  # This is super slow in GitHub Actions because we need to emulate aarch64 CPU.
  schedule:
    - cron: '0 4 * * *'
  workflow_dispatch:  # Can also be triggered manually from github UI
  pull_request:
    paths:
      - .github/workflows/linux-aarch64.yml  # Run whenever this file is modified

jobs:
  test:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - name: Install qemu
        run: sudo apt update && sudo apt -y install qemu-system-aarch64

      - name: Download Debian disk image
        run: |
          wget -O disk.qcow2 https://cloud.debian.org/images/cloud/trixie/20250814-2204/debian-13-nocloud-arm64-20250814-2204.qcow2
          echo 'bda283e7c7037220897e201a5387773e48f688d33795cccd84d20db01dbffcbc  disk.qcow2' | sha256sum --check

      - name: Start qemu
        # Figuring out the qemu command was painful and took a long time.
        #
        # Some notes:
        #
        #   - Without -bios the machine gets stuck with no output. See:
        #     https://superuser.com/questions/1684886/qemu-aarch64-on-arm-mac-never-boots-and-only-shows-qemu-prompt
        #
        #   - There are 3 ways to specify networking. It seems like `-nic` is
        #     the modern thing to do when you want something that just works.
        #     We forward port 2222 to inside the VM, but for safety of anyone
        #     running this command locally, only when connecting from localhost.
        run: |
          touch input output
          tail -f input | \
            qemu-system-aarch64 \
            -machine virt \
            -cpu cortex-a72 \
            -smp 2 \
            -m 1G \
            -hda disk.qcow2 \
            -bios /usr/share/qemu-efi-aarch64/QEMU_EFI.fd \
            -serial stdio \
            -monitor none \
            -nic user,hostfwd=tcp:127.0.0.1:2222-:2222 \
            -nographic \
            &> output &
          echo $! > qemu-pid.txt

      - name: Wait for Debian to boot and log in
        run: |
          tail -f output & trap "kill $!" EXIT
          while ! grep -q 'localhost login:' output; do :; done
          echo 'root' >> input  # user root, no password
          while ! grep -q 'root@localhost:~#' output; do sleep 1; done

      - name: Create runner script
        run: |
          cat >run.sh <<EOF
          #!/bin/bash
          [ $# == 1 ] || { echo "Usage: $0 <command>" >&2; exit 2; }
          function skip_n_bytes() { local n=$1 file=$2; tail -c +$((n+1)) $file; }
          id="Command_$RANDOM$RANDOM$RANDOM$RANDOM"
          tail -c0 -f output | tee output_$id &
          trap "kill $(jobs -p)" EXIT
          echo -n "$@" >> input
          echo " ; echo Exit status: \$?; echo '$id'" >> input
          while ! skip_n_bytes $oldsize output | grep -q "^$id"; do sleep 0.2; done
          exit $(grep --text -o "Exit status: [0-9]*" output | tail -1 | cut -d ' ' -f 3)
          EOF
          chmod +x run.sh

      - name: Install dependencies in VM
        run: ./run.sh "apt update && apt -y install netcat-traditional git llvm-19-dev clang-19 make"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: jou
          fetch-depth: 0  # Fetch the whole Git history for bootstrapping

      - name: Copy repository to VM
        run: |
          ./run.sh "nc -nlvp 2222 | tar x" &
          tar c jou | nc -q 5 localhost 2222 &
          wait
          ./run.sh "cd jou"

      - name: Compile and test
        run: ./run.sh "./runtests.sh --verbose"
      - name: Compile the compiler with itself
        run: ./run.sh "./jou -o jou2 compiler/main.jou && mv jou2 jou"
      - name: Compile and test again
        run: ./run.sh "./runtests.sh --verbose"
      - run: ./doctest.sh

      - name: Stop qemu
        if: always()  # Run this even if there are errors
        run: |
          if [ -f qemu-pid.txt ]; then kill $(cat qemu-pid.txt); fi
