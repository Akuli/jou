# Runs tests with valgrind. That catches various memory bugs, but is too slow
# for running in every pull request.

on:
  schedule:
    - cron: '0 4 * * *'
  workflow_dispatch:  # Can also be triggered manually from github UI

jobs:
  valgrind:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        llvm-version: [14, 15, 16]
        # Testing all levels because there was a bug that only happened with -O1. (#224)
        opt-level: ['-O0', '-O1', '-O2', '-O3']
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      # Do not valgrind when there's nothing new to valgrind in the repo
      - name: Check if there was any commits within the last 24 hours
        run: |
          if git --no-pager log --oneline --since="24 hours ago" --exit-code; then
            echo "No commits, will not run valgrind"
            echo "recent_commits=false" >> $GITHUB_ENV
          else
            echo "recent_commits=true" >> $GITHUB_ENV
          fi

      - if: env.recent_commits == 'true'
        run: sudo apt update

      - if: env.recent_commits == 'true'
        run: sudo apt install -y llvm-${{ matrix.llvm-version }}-dev clang-${{ matrix.llvm-version }} make valgrind

      - if: env.recent_commits == 'true'
        run: LLVM_CONFIG=llvm-config-${{ matrix.llvm-version }} make

      - if: env.recent_commits == 'true'
        name: "Test stage1 compiler with valgrind"
        run: ./runtests.sh --verbose --valgrind --jou-flags "${{ matrix.opt-level }}" --stage1

      - if: env.recent_commits == 'true'
        name: "Test stage2 compiler with valgrind"
        run: ./runtests.sh --verbose --valgrind --jou-flags "${{ matrix.opt-level }}" --stage2

      - if: env.recent_commits == 'true'
        name: "Test stage3 compiler with valgrind"
        run: ./runtests.sh --verbose --valgrind --jou-flags "${{ matrix.opt-level }}"

  # Based on: https://github.com/python/typeshed/blob/9f28171658b9ca6c32a7cb93fbb99fc92b17858b/.github/workflows/daily.yml
  create-issue-on-failure:
    name: Create an issue if valgrind failed
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [valgrind]
    if: ${{ github.repository == 'Akuli/jou' && always() && needs.valgrind.result == 'failure' }}
    permissions:
      issues: write
    steps:
      - run: |
          # Usage: find_issue <title>
          # Echos issue number, if any
          function find_issue() {
              curl -s "https://api.github.com/repos/${{ github.repository }}/issues?state=open" \
                  | jq -r --arg t "$1" '.[] | select(.title==$t) | .number'
          }

          # Usage: get_body <issue_number>
          function get_body() {
              curl -s "https://api.github.com/repos/${{ github.repository }}/issues/$1" | jq -r .body
          }

          # Usage: echo body | set_body <issue_number>
          function set_body() {
              curl -s -X PATCH \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/repos/${{ github.repository }}/issues/$1" \
                  -d "$(jq -n --arg b "$(cat)" '{body: $b}')"
          }

          # Usage: echo body | new_issue <title>
          function new_issue() {
              curl -s -X POST \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/repos/${{ github.repository }}/issues" \
                  -d "$(jq -n --arg t "$1" --arg b "$(cat)" '{title: $t, body: $b}')"
          }

          link="- [$(date)](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          echo $link

          echo "Checking if there is already an issue about valgrind errors..."
          n=$(find_issue "Running tests with valgrind failed")

          if [ -n "$n" ]; then
              echo "There is already an open issue about the valgrind errors. Appending link to issue description."
              ((get_body $n | awk 1) && echo "$link") | set_body $n
          else
              echo "No open issue found, creating a new one."
              (echo "Valgrind outputs:" && echo "$link") | new_issue "Running tests with valgrind failed"
          fi
